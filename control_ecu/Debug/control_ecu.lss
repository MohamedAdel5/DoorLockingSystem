
control_ecu.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000226e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  0000226e  00002302  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  0080006e  0080006e  00002310  2**0
                  ALLOC
  3 .stab         000029ac  00000000  00000000  00002310  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000017e4  00000000  00000000  00004cbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000064a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000065e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006750  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008399  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009284  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a034  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a194  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a421  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000abef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 bc 09 	jmp	0x1378	; 0x1378 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 a3 07 	jmp	0xf46	; 0xf46 <__vector_11>
      30:	0c 94 09 08 	jmp	0x1012	; 0x1012 <__vector_12>
      34:	0c 94 d6 07 	jmp	0xfac	; 0xfac <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 45 0b 	jmp	0x168a	; 0x168a <__vector_17>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e6       	ldi	r30, 0x6E	; 110
      68:	f2 e2       	ldi	r31, 0x22	; 34
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 36       	cpi	r26, 0x6E	; 110
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae e6       	ldi	r26, 0x6E	; 110
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 37       	cpi	r26, 0x7D	; 125
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 97 0c 	call	0x192e	; 0x192e <main>
      8a:	0c 94 35 11 	jmp	0x226a	; 0x226a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 fe 10 	jmp	0x21fc	; 0x21fc <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 1a 11 	jmp	0x2234	; 0x2234 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 0a 11 	jmp	0x2214	; 0x2214 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 26 11 	jmp	0x224c	; 0x224c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 0a 11 	jmp	0x2214	; 0x2214 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 26 11 	jmp	0x224c	; 0x224c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 fe 10 	jmp	0x21fc	; 0x21fc <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 1a 11 	jmp	0x2234	; 0x2234 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 0a 11 	jmp	0x2214	; 0x2214 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 26 11 	jmp	0x224c	; 0x224c <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 0a 11 	jmp	0x2214	; 0x2214 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 26 11 	jmp	0x224c	; 0x224c <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 0a 11 	jmp	0x2214	; 0x2214 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 26 11 	jmp	0x224c	; 0x224c <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 0e 11 	jmp	0x221c	; 0x221c <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 2a 11 	jmp	0x2254	; 0x2254 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <UART_init>:
static  void(*g_fptrCallBack_transmit_empty)(void) = NULLPTR;
/***************************************************************
 	 	 	 	 	 	Functions definitions
 ***************************************************************/
void UART_init(UART_config *config)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	28 97       	sbiw	r28, 0x08	; 8
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	9c 83       	std	Y+4, r25	; 0x04
     b5c:	8b 83       	std	Y+3, r24	; 0x03
	 * Transmit flag is CLEARED as an initial value
	 * UART data register Empty flag is SET as an initial value
	 *the error flags are CLEARED for future compatibility
	 * Double UART transmission speed is ENABLED
	 * Multiprocessor communication mode is DISABLED*/
	UCSRA = 0x22;
     b5e:	eb e2       	ldi	r30, 0x2B	; 43
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	82 e2       	ldi	r24, 0x22	; 34
     b64:	80 83       	st	Z, r24


	/*For 8-bit character size configuration*/

	CLEAR_BIT(UCSRB, UCSZ2);
     b66:	aa e2       	ldi	r26, 0x2A	; 42
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	ea e2       	ldi	r30, 0x2A	; 42
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	80 81       	ld	r24, Z
     b70:	8b 7f       	andi	r24, 0xFB	; 251
     b72:	8c 93       	st	X, r24

	SET_BIT(UCSRC, URSEL);		/*enable editing UCSRC*/
     b74:	a0 e4       	ldi	r26, 0x40	; 64
     b76:	b0 e0       	ldi	r27, 0x00	; 0
     b78:	e0 e4       	ldi	r30, 0x40	; 64
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	80 81       	ld	r24, Z
     b7e:	80 68       	ori	r24, 0x80	; 128
     b80:	8c 93       	st	X, r24

	SET_BIT(UCSRC, UCSZ0);
     b82:	a0 e4       	ldi	r26, 0x40	; 64
     b84:	b0 e0       	ldi	r27, 0x00	; 0
     b86:	e0 e4       	ldi	r30, 0x40	; 64
     b88:	f0 e0       	ldi	r31, 0x00	; 0
     b8a:	80 81       	ld	r24, Z
     b8c:	82 60       	ori	r24, 0x02	; 2
     b8e:	8c 93       	st	X, r24
	SET_BIT(UCSRC, UCSZ1);
     b90:	a0 e4       	ldi	r26, 0x40	; 64
     b92:	b0 e0       	ldi	r27, 0x00	; 0
     b94:	e0 e4       	ldi	r30, 0x40	; 64
     b96:	f0 e0       	ldi	r31, 0x00	; 0
     b98:	80 81       	ld	r24, Z
     b9a:	84 60       	ori	r24, 0x04	; 4
     b9c:	8c 93       	st	X, r24

	CLEAR_BIT(UCSRC, UMSEL);		/*ASYNC Operation*/
     b9e:	a0 e4       	ldi	r26, 0x40	; 64
     ba0:	b0 e0       	ldi	r27, 0x00	; 0
     ba2:	e0 e4       	ldi	r30, 0x40	; 64
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	80 81       	ld	r24, Z
     ba8:	8f 7b       	andi	r24, 0xBF	; 191
     baa:	8c 93       	st	X, r24
	CLEAR_BIT(UCSRC, UCPOL);		/*Clock polarity disabled because the Operation is ASYNC*/
     bac:	a0 e4       	ldi	r26, 0x40	; 64
     bae:	b0 e0       	ldi	r27, 0x00	; 0
     bb0:	e0 e4       	ldi	r30, 0x40	; 64
     bb2:	f0 e0       	ldi	r31, 0x00	; 0
     bb4:	80 81       	ld	r24, Z
     bb6:	8e 7f       	andi	r24, 0xFE	; 254
     bb8:	8c 93       	st	X, r24

	switch(config->parity)
     bba:	eb 81       	ldd	r30, Y+3	; 0x03
     bbc:	fc 81       	ldd	r31, Y+4	; 0x04
     bbe:	83 81       	ldd	r24, Z+3	; 0x03
     bc0:	28 2f       	mov	r18, r24
     bc2:	30 e0       	ldi	r19, 0x00	; 0
     bc4:	38 87       	std	Y+8, r19	; 0x08
     bc6:	2f 83       	std	Y+7, r18	; 0x07
     bc8:	8f 81       	ldd	r24, Y+7	; 0x07
     bca:	98 85       	ldd	r25, Y+8	; 0x08
     bcc:	82 30       	cpi	r24, 0x02	; 2
     bce:	91 05       	cpc	r25, r1
     bd0:	a1 f0       	breq	.+40     	; 0xbfa <UART_init+0xb4>
     bd2:	2f 81       	ldd	r18, Y+7	; 0x07
     bd4:	38 85       	ldd	r19, Y+8	; 0x08
     bd6:	23 30       	cpi	r18, 0x03	; 3
     bd8:	31 05       	cpc	r19, r1
     bda:	f1 f0       	breq	.+60     	; 0xc18 <UART_init+0xd2>
	{
	default:
	case DISABLED:
		CLEAR_BIT(UCSRC, UPM0);
     bdc:	a0 e4       	ldi	r26, 0x40	; 64
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	e0 e4       	ldi	r30, 0x40	; 64
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	8f 7e       	andi	r24, 0xEF	; 239
     be8:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRC, UPM1);
     bea:	a0 e4       	ldi	r26, 0x40	; 64
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	e0 e4       	ldi	r30, 0x40	; 64
     bf0:	f0 e0       	ldi	r31, 0x00	; 0
     bf2:	80 81       	ld	r24, Z
     bf4:	8f 7d       	andi	r24, 0xDF	; 223
     bf6:	8c 93       	st	X, r24
     bf8:	1d c0       	rjmp	.+58     	; 0xc34 <UART_init+0xee>
		break;
	case EVEN:
		CLEAR_BIT(UCSRC, UPM0);
     bfa:	a0 e4       	ldi	r26, 0x40	; 64
     bfc:	b0 e0       	ldi	r27, 0x00	; 0
     bfe:	e0 e4       	ldi	r30, 0x40	; 64
     c00:	f0 e0       	ldi	r31, 0x00	; 0
     c02:	80 81       	ld	r24, Z
     c04:	8f 7e       	andi	r24, 0xEF	; 239
     c06:	8c 93       	st	X, r24
		SET_BIT(UCSRC, UPM1);
     c08:	a0 e4       	ldi	r26, 0x40	; 64
     c0a:	b0 e0       	ldi	r27, 0x00	; 0
     c0c:	e0 e4       	ldi	r30, 0x40	; 64
     c0e:	f0 e0       	ldi	r31, 0x00	; 0
     c10:	80 81       	ld	r24, Z
     c12:	80 62       	ori	r24, 0x20	; 32
     c14:	8c 93       	st	X, r24
     c16:	0e c0       	rjmp	.+28     	; 0xc34 <UART_init+0xee>
		break;
	case ODD:
		SET_BIT(UCSRC, UPM0);
     c18:	a0 e4       	ldi	r26, 0x40	; 64
     c1a:	b0 e0       	ldi	r27, 0x00	; 0
     c1c:	e0 e4       	ldi	r30, 0x40	; 64
     c1e:	f0 e0       	ldi	r31, 0x00	; 0
     c20:	80 81       	ld	r24, Z
     c22:	80 61       	ori	r24, 0x10	; 16
     c24:	8c 93       	st	X, r24
		SET_BIT(UCSRC, UPM1);
     c26:	a0 e4       	ldi	r26, 0x40	; 64
     c28:	b0 e0       	ldi	r27, 0x00	; 0
     c2a:	e0 e4       	ldi	r30, 0x40	; 64
     c2c:	f0 e0       	ldi	r31, 0x00	; 0
     c2e:	80 81       	ld	r24, Z
     c30:	80 62       	ori	r24, 0x20	; 32
     c32:	8c 93       	st	X, r24
		break;
	}
	switch(config->stopBit)
     c34:	eb 81       	ldd	r30, Y+3	; 0x03
     c36:	fc 81       	ldd	r31, Y+4	; 0x04
     c38:	84 81       	ldd	r24, Z+4	; 0x04
     c3a:	88 2f       	mov	r24, r24
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	81 30       	cpi	r24, 0x01	; 1
     c40:	91 05       	cpc	r25, r1
     c42:	41 f0       	breq	.+16     	; 0xc54 <UART_init+0x10e>
	{
	default:
	case STOP_BIT_1:
		CLEAR_BIT(UCSRC, USBS);
     c44:	a0 e4       	ldi	r26, 0x40	; 64
     c46:	b0 e0       	ldi	r27, 0x00	; 0
     c48:	e0 e4       	ldi	r30, 0x40	; 64
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	80 81       	ld	r24, Z
     c4e:	87 7f       	andi	r24, 0xF7	; 247
     c50:	8c 93       	st	X, r24
     c52:	07 c0       	rjmp	.+14     	; 0xc62 <UART_init+0x11c>
		break;
	case STOP_BIT_2:
		SET_BIT(UCSRC, USBS);
     c54:	a0 e4       	ldi	r26, 0x40	; 64
     c56:	b0 e0       	ldi	r27, 0x00	; 0
     c58:	e0 e4       	ldi	r30, 0x40	; 64
     c5a:	f0 e0       	ldi	r31, 0x00	; 0
     c5c:	80 81       	ld	r24, Z
     c5e:	88 60       	ori	r24, 0x08	; 8
     c60:	8c 93       	st	X, r24
		break;
	}
	uint16 baud = (F_CPU/(8UL * config->baudRate))-1; /*UBBR equation for enabled Double UART transmission speed*/
     c62:	eb 81       	ldd	r30, Y+3	; 0x03
     c64:	fc 81       	ldd	r31, Y+4	; 0x04
     c66:	81 81       	ldd	r24, Z+1	; 0x01
     c68:	92 81       	ldd	r25, Z+2	; 0x02
     c6a:	cc 01       	movw	r24, r24
     c6c:	a0 e0       	ldi	r26, 0x00	; 0
     c6e:	b0 e0       	ldi	r27, 0x00	; 0
     c70:	88 0f       	add	r24, r24
     c72:	99 1f       	adc	r25, r25
     c74:	aa 1f       	adc	r26, r26
     c76:	bb 1f       	adc	r27, r27
     c78:	88 0f       	add	r24, r24
     c7a:	99 1f       	adc	r25, r25
     c7c:	aa 1f       	adc	r26, r26
     c7e:	bb 1f       	adc	r27, r27
     c80:	88 0f       	add	r24, r24
     c82:	99 1f       	adc	r25, r25
     c84:	aa 1f       	adc	r26, r26
     c86:	bb 1f       	adc	r27, r27
     c88:	9c 01       	movw	r18, r24
     c8a:	ad 01       	movw	r20, r26
     c8c:	80 e0       	ldi	r24, 0x00	; 0
     c8e:	92 e1       	ldi	r25, 0x12	; 18
     c90:	aa e7       	ldi	r26, 0x7A	; 122
     c92:	b0 e0       	ldi	r27, 0x00	; 0
     c94:	bc 01       	movw	r22, r24
     c96:	cd 01       	movw	r24, r26
     c98:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <__udivmodsi4>
     c9c:	da 01       	movw	r26, r20
     c9e:	c9 01       	movw	r24, r18
     ca0:	01 97       	sbiw	r24, 0x01	; 1
     ca2:	9a 83       	std	Y+2, r25	; 0x02
     ca4:	89 83       	std	Y+1, r24	; 0x01

	CLEAR_BIT(UCSRC, URSEL);		/*enable editing UBRRH*/
     ca6:	a0 e4       	ldi	r26, 0x40	; 64
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	e0 e4       	ldi	r30, 0x40	; 64
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	8f 77       	andi	r24, 0x7F	; 127
     cb2:	8c 93       	st	X, r24

	UBRRH = (baud >> 8);
     cb4:	e0 e4       	ldi	r30, 0x40	; 64
     cb6:	f0 e0       	ldi	r31, 0x00	; 0
     cb8:	89 81       	ldd	r24, Y+1	; 0x01
     cba:	9a 81       	ldd	r25, Y+2	; 0x02
     cbc:	89 2f       	mov	r24, r25
     cbe:	99 27       	eor	r25, r25
     cc0:	80 83       	st	Z, r24
	UBRRL = baud;
     cc2:	e9 e2       	ldi	r30, 0x29	; 41
     cc4:	f0 e0       	ldi	r31, 0x00	; 0
     cc6:	89 81       	ldd	r24, Y+1	; 0x01
     cc8:	80 83       	st	Z, r24


	/*Finally Enable the UART*/
	switch(config->mode)
     cca:	eb 81       	ldd	r30, Y+3	; 0x03
     ccc:	fc 81       	ldd	r31, Y+4	; 0x04
     cce:	80 81       	ld	r24, Z
     cd0:	28 2f       	mov	r18, r24
     cd2:	30 e0       	ldi	r19, 0x00	; 0
     cd4:	3e 83       	std	Y+6, r19	; 0x06
     cd6:	2d 83       	std	Y+5, r18	; 0x05
     cd8:	8d 81       	ldd	r24, Y+5	; 0x05
     cda:	9e 81       	ldd	r25, Y+6	; 0x06
     cdc:	00 97       	sbiw	r24, 0x00	; 0
     cde:	31 f0       	breq	.+12     	; 0xcec <UART_init+0x1a6>
     ce0:	2d 81       	ldd	r18, Y+5	; 0x05
     ce2:	3e 81       	ldd	r19, Y+6	; 0x06
     ce4:	21 30       	cpi	r18, 0x01	; 1
     ce6:	31 05       	cpc	r19, r1
     ce8:	81 f0       	breq	.+32     	; 0xd0a <UART_init+0x1c4>
     cea:	1e c0       	rjmp	.+60     	; 0xd28 <UART_init+0x1e2>
	{
	case T:
		SET_BIT(PORTD, PD1);	/*Sets TX pin as output pin(redundant because the UART overrides the i/o port functionality)*/
     cec:	a2 e3       	ldi	r26, 0x32	; 50
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	e2 e3       	ldi	r30, 0x32	; 50
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	82 60       	ori	r24, 0x02	; 2
     cf8:	8c 93       	st	X, r24
		SET_BIT(UCSRB, TXEN);	/*Enable Transmitting*/
     cfa:	aa e2       	ldi	r26, 0x2A	; 42
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	ea e2       	ldi	r30, 0x2A	; 42
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	88 60       	ori	r24, 0x08	; 8
     d06:	8c 93       	st	X, r24
     d08:	2b c0       	rjmp	.+86     	; 0xd60 <UART_init+0x21a>
		break;
	case R:
		CLEAR_BIT(PORTD, PD0);	/*Sets RX pin as input pin(redundant because the UART overrides the i/o port functionality)*/
     d0a:	a2 e3       	ldi	r26, 0x32	; 50
     d0c:	b0 e0       	ldi	r27, 0x00	; 0
     d0e:	e2 e3       	ldi	r30, 0x32	; 50
     d10:	f0 e0       	ldi	r31, 0x00	; 0
     d12:	80 81       	ld	r24, Z
     d14:	8e 7f       	andi	r24, 0xFE	; 254
     d16:	8c 93       	st	X, r24
		SET_BIT(UCSRB, RXEN);	/*Enable Receiving*/
     d18:	aa e2       	ldi	r26, 0x2A	; 42
     d1a:	b0 e0       	ldi	r27, 0x00	; 0
     d1c:	ea e2       	ldi	r30, 0x2A	; 42
     d1e:	f0 e0       	ldi	r31, 0x00	; 0
     d20:	80 81       	ld	r24, Z
     d22:	80 61       	ori	r24, 0x10	; 16
     d24:	8c 93       	st	X, r24
     d26:	1c c0       	rjmp	.+56     	; 0xd60 <UART_init+0x21a>
		break;

	default: /*The default value is Transmit and receive*/
	case TR:
		SET_BIT(PORTD, PD1);
     d28:	a2 e3       	ldi	r26, 0x32	; 50
     d2a:	b0 e0       	ldi	r27, 0x00	; 0
     d2c:	e2 e3       	ldi	r30, 0x32	; 50
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	80 81       	ld	r24, Z
     d32:	82 60       	ori	r24, 0x02	; 2
     d34:	8c 93       	st	X, r24
		CLEAR_BIT(PORTD, PD0);
     d36:	a2 e3       	ldi	r26, 0x32	; 50
     d38:	b0 e0       	ldi	r27, 0x00	; 0
     d3a:	e2 e3       	ldi	r30, 0x32	; 50
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	80 81       	ld	r24, Z
     d40:	8e 7f       	andi	r24, 0xFE	; 254
     d42:	8c 93       	st	X, r24
		SET_BIT(UCSRB, TXEN);
     d44:	aa e2       	ldi	r26, 0x2A	; 42
     d46:	b0 e0       	ldi	r27, 0x00	; 0
     d48:	ea e2       	ldi	r30, 0x2A	; 42
     d4a:	f0 e0       	ldi	r31, 0x00	; 0
     d4c:	80 81       	ld	r24, Z
     d4e:	88 60       	ori	r24, 0x08	; 8
     d50:	8c 93       	st	X, r24
		SET_BIT(UCSRB, RXEN);
     d52:	aa e2       	ldi	r26, 0x2A	; 42
     d54:	b0 e0       	ldi	r27, 0x00	; 0
     d56:	ea e2       	ldi	r30, 0x2A	; 42
     d58:	f0 e0       	ldi	r31, 0x00	; 0
     d5a:	80 81       	ld	r24, Z
     d5c:	80 61       	ori	r24, 0x10	; 16
     d5e:	8c 93       	st	X, r24
		break;
	}

}
     d60:	28 96       	adiw	r28, 0x08	; 8
     d62:	0f b6       	in	r0, 0x3f	; 63
     d64:	f8 94       	cli
     d66:	de bf       	out	0x3e, r29	; 62
     d68:	0f be       	out	0x3f, r0	; 63
     d6a:	cd bf       	out	0x3d, r28	; 61
     d6c:	cf 91       	pop	r28
     d6e:	df 91       	pop	r29
     d70:	08 95       	ret

00000d72 <UART_deinit>:
void UART_deinit(void)
{
     d72:	df 93       	push	r29
     d74:	cf 93       	push	r28
     d76:	cd b7       	in	r28, 0x3d	; 61
     d78:	de b7       	in	r29, 0x3e	; 62
	UCSRB = 0;	/*disable receive and transmit*/
     d7a:	ea e2       	ldi	r30, 0x2A	; 42
     d7c:	f0 e0       	ldi	r31, 0x00	; 0
     d7e:	10 82       	st	Z, r1
}
     d80:	cf 91       	pop	r28
     d82:	df 91       	pop	r29
     d84:	08 95       	ret

00000d86 <UART_sendByte>:

void UART_sendByte(const uint8 data)
{
     d86:	df 93       	push	r29
     d88:	cf 93       	push	r28
     d8a:	0f 92       	push	r0
     d8c:	cd b7       	in	r28, 0x3d	; 61
     d8e:	de b7       	in	r29, 0x3e	; 62
     d90:	89 83       	std	Y+1, r24	; 0x01



	while(BIT_IS_CLEAR(UCSRA, UDRE));
     d92:	eb e2       	ldi	r30, 0x2B	; 43
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	80 81       	ld	r24, Z
     d98:	88 2f       	mov	r24, r24
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	80 72       	andi	r24, 0x20	; 32
     d9e:	90 70       	andi	r25, 0x00	; 0
     da0:	00 97       	sbiw	r24, 0x00	; 0
     da2:	b9 f3       	breq	.-18     	; 0xd92 <UART_sendByte+0xc>
	UDR = data;
     da4:	ec e2       	ldi	r30, 0x2C	; 44
     da6:	f0 e0       	ldi	r31, 0x00	; 0
     da8:	89 81       	ldd	r24, Y+1	; 0x01
     daa:	80 83       	st	Z, r24
	 *
	 * UDR = data;
	 * while(BIT_IS_CLEAR(UCSRA, TXC)); //this line can not be written before the "UDR = data" statement because it may cause an infinite loop
	 * SET_BIT(UCSRA, TXC);
	 */
}
     dac:	0f 90       	pop	r0
     dae:	cf 91       	pop	r28
     db0:	df 91       	pop	r29
     db2:	08 95       	ret

00000db4 <UART_receiveByte>:
UART_status UART_receiveByte(uint8 * const data)
{
     db4:	df 93       	push	r29
     db6:	cf 93       	push	r28
     db8:	00 d0       	rcall	.+0      	; 0xdba <UART_receiveByte+0x6>
     dba:	0f 92       	push	r0
     dbc:	cd b7       	in	r28, 0x3d	; 61
     dbe:	de b7       	in	r29, 0x3e	; 62
     dc0:	9a 83       	std	Y+2, r25	; 0x02
     dc2:	89 83       	std	Y+1, r24	; 0x01
	while(BIT_IS_CLEAR(UCSRA, RXC));	/*Polling for RXC*/
     dc4:	eb e2       	ldi	r30, 0x2B	; 43
     dc6:	f0 e0       	ldi	r31, 0x00	; 0
     dc8:	80 81       	ld	r24, Z
     dca:	88 23       	and	r24, r24
     dcc:	dc f7       	brge	.-10     	; 0xdc4 <UART_receiveByte+0x10>

	if(BIT_IS_SET(UCSRA, FE) || BIT_IS_SET(UCSRA, PE))
     dce:	eb e2       	ldi	r30, 0x2B	; 43
     dd0:	f0 e0       	ldi	r31, 0x00	; 0
     dd2:	80 81       	ld	r24, Z
     dd4:	88 2f       	mov	r24, r24
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	80 71       	andi	r24, 0x10	; 16
     dda:	90 70       	andi	r25, 0x00	; 0
     ddc:	00 97       	sbiw	r24, 0x00	; 0
     dde:	49 f4       	brne	.+18     	; 0xdf2 <UART_receiveByte+0x3e>
     de0:	eb e2       	ldi	r30, 0x2B	; 43
     de2:	f0 e0       	ldi	r31, 0x00	; 0
     de4:	80 81       	ld	r24, Z
     de6:	88 2f       	mov	r24, r24
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	84 70       	andi	r24, 0x04	; 4
     dec:	90 70       	andi	r25, 0x00	; 0
     dee:	00 97       	sbiw	r24, 0x00	; 0
     df0:	11 f0       	breq	.+4      	; 0xdf6 <UART_receiveByte+0x42>
	{
		return ERROR;
     df2:	1b 82       	std	Y+3, r1	; 0x03
     df4:	08 c0       	rjmp	.+16     	; 0xe06 <UART_receiveByte+0x52>
	}
	else
	{
		*data = UDR;		/*RXC is cleared on reading the UDR register*/
     df6:	ec e2       	ldi	r30, 0x2C	; 44
     df8:	f0 e0       	ldi	r31, 0x00	; 0
     dfa:	80 81       	ld	r24, Z
     dfc:	e9 81       	ldd	r30, Y+1	; 0x01
     dfe:	fa 81       	ldd	r31, Y+2	; 0x02
     e00:	80 83       	st	Z, r24
		return SUCCESS;
     e02:	81 e0       	ldi	r24, 0x01	; 1
     e04:	8b 83       	std	Y+3, r24	; 0x03
     e06:	8b 81       	ldd	r24, Y+3	; 0x03
	}
}
     e08:	0f 90       	pop	r0
     e0a:	0f 90       	pop	r0
     e0c:	0f 90       	pop	r0
     e0e:	cf 91       	pop	r28
     e10:	df 91       	pop	r29
     e12:	08 95       	ret

00000e14 <UART_sendString>:

void UART_sendString(const uint8* str)
{
     e14:	df 93       	push	r29
     e16:	cf 93       	push	r28
     e18:	00 d0       	rcall	.+0      	; 0xe1a <UART_sendString+0x6>
     e1a:	cd b7       	in	r28, 0x3d	; 61
     e1c:	de b7       	in	r29, 0x3e	; 62
     e1e:	9a 83       	std	Y+2, r25	; 0x02
     e20:	89 83       	std	Y+1, r24	; 0x01
     e22:	0a c0       	rjmp	.+20     	; 0xe38 <UART_sendString+0x24>
	while(*str != '\0')
	{
		UART_sendByte(*str);
     e24:	e9 81       	ldd	r30, Y+1	; 0x01
     e26:	fa 81       	ldd	r31, Y+2	; 0x02
     e28:	80 81       	ld	r24, Z
     e2a:	0e 94 c3 06 	call	0xd86	; 0xd86 <UART_sendByte>
		str++;
     e2e:	89 81       	ldd	r24, Y+1	; 0x01
     e30:	9a 81       	ldd	r25, Y+2	; 0x02
     e32:	01 96       	adiw	r24, 0x01	; 1
     e34:	9a 83       	std	Y+2, r25	; 0x02
     e36:	89 83       	std	Y+1, r24	; 0x01
	}
}

void UART_sendString(const uint8* str)
{
	while(*str != '\0')
     e38:	e9 81       	ldd	r30, Y+1	; 0x01
     e3a:	fa 81       	ldd	r31, Y+2	; 0x02
     e3c:	80 81       	ld	r24, Z
     e3e:	88 23       	and	r24, r24
     e40:	89 f7       	brne	.-30     	; 0xe24 <UART_sendString+0x10>
	{
		UART_sendByte(*str);
		str++;
	}
}
     e42:	0f 90       	pop	r0
     e44:	0f 90       	pop	r0
     e46:	cf 91       	pop	r28
     e48:	df 91       	pop	r29
     e4a:	08 95       	ret

00000e4c <UART_receiveString>:
void UART_receiveString(uint8* str)
{
     e4c:	df 93       	push	r29
     e4e:	cf 93       	push	r28
     e50:	00 d0       	rcall	.+0      	; 0xe52 <UART_receiveString+0x6>
     e52:	0f 92       	push	r0
     e54:	cd b7       	in	r28, 0x3d	; 61
     e56:	de b7       	in	r29, 0x3e	; 62
     e58:	9b 83       	std	Y+3, r25	; 0x03
     e5a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 receivedByte;
	UART_receiveByte(&receivedByte);
     e5c:	ce 01       	movw	r24, r28
     e5e:	01 96       	adiw	r24, 0x01	; 1
     e60:	0e 94 da 06 	call	0xdb4	; 0xdb4 <UART_receiveByte>
     e64:	0d c0       	rjmp	.+26     	; 0xe80 <UART_receiveString+0x34>
	while(receivedByte != UART_TERMINATING_CHARACTER) 	//till the user enters the terminating character
	{
		*str = receivedByte;
     e66:	89 81       	ldd	r24, Y+1	; 0x01
     e68:	ea 81       	ldd	r30, Y+2	; 0x02
     e6a:	fb 81       	ldd	r31, Y+3	; 0x03
     e6c:	80 83       	st	Z, r24
		str++;
     e6e:	8a 81       	ldd	r24, Y+2	; 0x02
     e70:	9b 81       	ldd	r25, Y+3	; 0x03
     e72:	01 96       	adiw	r24, 0x01	; 1
     e74:	9b 83       	std	Y+3, r25	; 0x03
     e76:	8a 83       	std	Y+2, r24	; 0x02
		UART_receiveByte(&receivedByte);
     e78:	ce 01       	movw	r24, r28
     e7a:	01 96       	adiw	r24, 0x01	; 1
     e7c:	0e 94 da 06 	call	0xdb4	; 0xdb4 <UART_receiveByte>
}
void UART_receiveString(uint8* str)
{
	uint8 receivedByte;
	UART_receiveByte(&receivedByte);
	while(receivedByte != UART_TERMINATING_CHARACTER) 	//till the user enters the terminating character
     e80:	89 81       	ldd	r24, Y+1	; 0x01
     e82:	83 32       	cpi	r24, 0x23	; 35
     e84:	81 f7       	brne	.-32     	; 0xe66 <UART_receiveString+0x1a>
	{
		*str = receivedByte;
		str++;
		UART_receiveByte(&receivedByte);
	}
	*str = '\0';
     e86:	ea 81       	ldd	r30, Y+2	; 0x02
     e88:	fb 81       	ldd	r31, Y+3	; 0x03
     e8a:	10 82       	st	Z, r1
}
     e8c:	0f 90       	pop	r0
     e8e:	0f 90       	pop	r0
     e90:	0f 90       	pop	r0
     e92:	cf 91       	pop	r28
     e94:	df 91       	pop	r29
     e96:	08 95       	ret

00000e98 <UART_interrupt_receive>:
void UART_interrupt_receive(void(*a_fptrCallBack_receive)())
{
     e98:	df 93       	push	r29
     e9a:	cf 93       	push	r28
     e9c:	00 d0       	rcall	.+0      	; 0xe9e <UART_interrupt_receive+0x6>
     e9e:	cd b7       	in	r28, 0x3d	; 61
     ea0:	de b7       	in	r29, 0x3e	; 62
     ea2:	9a 83       	std	Y+2, r25	; 0x02
     ea4:	89 83       	std	Y+1, r24	; 0x01
	if(a_fptrCallBack_receive != NULLPTR)
     ea6:	89 81       	ldd	r24, Y+1	; 0x01
     ea8:	9a 81       	ldd	r25, Y+2	; 0x02
     eaa:	00 97       	sbiw	r24, 0x00	; 0
     eac:	69 f0       	breq	.+26     	; 0xec8 <UART_interrupt_receive+0x30>
	{
		SET_BIT(UCSRB, RXCIE);		/*Enable interrupt RXC*/
     eae:	aa e2       	ldi	r26, 0x2A	; 42
     eb0:	b0 e0       	ldi	r27, 0x00	; 0
     eb2:	ea e2       	ldi	r30, 0x2A	; 42
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	80 81       	ld	r24, Z
     eb8:	80 68       	ori	r24, 0x80	; 128
     eba:	8c 93       	st	X, r24
		g_fptrCallBack_receive = a_fptrCallBack_receive;
     ebc:	89 81       	ldd	r24, Y+1	; 0x01
     ebe:	9a 81       	ldd	r25, Y+2	; 0x02
     ec0:	90 93 6f 00 	sts	0x006F, r25
     ec4:	80 93 6e 00 	sts	0x006E, r24
	}
}
     ec8:	0f 90       	pop	r0
     eca:	0f 90       	pop	r0
     ecc:	cf 91       	pop	r28
     ece:	df 91       	pop	r29
     ed0:	08 95       	ret

00000ed2 <UART_interrupt_transmit_complete>:
void UART_interrupt_transmit_complete(void(*a_fptrCallBack_transmit_complete)())
{
     ed2:	df 93       	push	r29
     ed4:	cf 93       	push	r28
     ed6:	00 d0       	rcall	.+0      	; 0xed8 <UART_interrupt_transmit_complete+0x6>
     ed8:	cd b7       	in	r28, 0x3d	; 61
     eda:	de b7       	in	r29, 0x3e	; 62
     edc:	9a 83       	std	Y+2, r25	; 0x02
     ede:	89 83       	std	Y+1, r24	; 0x01
	if(a_fptrCallBack_transmit_complete != NULLPTR)
     ee0:	89 81       	ldd	r24, Y+1	; 0x01
     ee2:	9a 81       	ldd	r25, Y+2	; 0x02
     ee4:	00 97       	sbiw	r24, 0x00	; 0
     ee6:	69 f0       	breq	.+26     	; 0xf02 <UART_interrupt_transmit_complete+0x30>
	{
		SET_BIT(UCSRB, TXCIE);		/*Enable interrupt TXC*/
     ee8:	aa e2       	ldi	r26, 0x2A	; 42
     eea:	b0 e0       	ldi	r27, 0x00	; 0
     eec:	ea e2       	ldi	r30, 0x2A	; 42
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	80 81       	ld	r24, Z
     ef2:	80 64       	ori	r24, 0x40	; 64
     ef4:	8c 93       	st	X, r24
		g_fptrCallBack_transmit_complete = a_fptrCallBack_transmit_complete;
     ef6:	89 81       	ldd	r24, Y+1	; 0x01
     ef8:	9a 81       	ldd	r25, Y+2	; 0x02
     efa:	90 93 71 00 	sts	0x0071, r25
     efe:	80 93 70 00 	sts	0x0070, r24
	}
}
     f02:	0f 90       	pop	r0
     f04:	0f 90       	pop	r0
     f06:	cf 91       	pop	r28
     f08:	df 91       	pop	r29
     f0a:	08 95       	ret

00000f0c <UART_interrupt_transmit_empty>:
void UART_interrupt_transmit_empty(void(*a_fptrCallBack_transmit_empty)())
{
     f0c:	df 93       	push	r29
     f0e:	cf 93       	push	r28
     f10:	00 d0       	rcall	.+0      	; 0xf12 <UART_interrupt_transmit_empty+0x6>
     f12:	cd b7       	in	r28, 0x3d	; 61
     f14:	de b7       	in	r29, 0x3e	; 62
     f16:	9a 83       	std	Y+2, r25	; 0x02
     f18:	89 83       	std	Y+1, r24	; 0x01
	if(a_fptrCallBack_transmit_empty != NULLPTR)
     f1a:	89 81       	ldd	r24, Y+1	; 0x01
     f1c:	9a 81       	ldd	r25, Y+2	; 0x02
     f1e:	00 97       	sbiw	r24, 0x00	; 0
     f20:	69 f0       	breq	.+26     	; 0xf3c <UART_interrupt_transmit_empty+0x30>
	{
		SET_BIT(UCSRB, UDRIE);		/*Enable interrupt UDRE*/
     f22:	aa e2       	ldi	r26, 0x2A	; 42
     f24:	b0 e0       	ldi	r27, 0x00	; 0
     f26:	ea e2       	ldi	r30, 0x2A	; 42
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	80 81       	ld	r24, Z
     f2c:	80 62       	ori	r24, 0x20	; 32
     f2e:	8c 93       	st	X, r24
		g_fptrCallBack_transmit_empty = a_fptrCallBack_transmit_empty;
     f30:	89 81       	ldd	r24, Y+1	; 0x01
     f32:	9a 81       	ldd	r25, Y+2	; 0x02
     f34:	90 93 73 00 	sts	0x0073, r25
     f38:	80 93 72 00 	sts	0x0072, r24
	}
}
     f3c:	0f 90       	pop	r0
     f3e:	0f 90       	pop	r0
     f40:	cf 91       	pop	r28
     f42:	df 91       	pop	r29
     f44:	08 95       	ret

00000f46 <__vector_11>:
ISR(USART_RXC_vect)
{
     f46:	1f 92       	push	r1
     f48:	0f 92       	push	r0
     f4a:	0f b6       	in	r0, 0x3f	; 63
     f4c:	0f 92       	push	r0
     f4e:	11 24       	eor	r1, r1
     f50:	2f 93       	push	r18
     f52:	3f 93       	push	r19
     f54:	4f 93       	push	r20
     f56:	5f 93       	push	r21
     f58:	6f 93       	push	r22
     f5a:	7f 93       	push	r23
     f5c:	8f 93       	push	r24
     f5e:	9f 93       	push	r25
     f60:	af 93       	push	r26
     f62:	bf 93       	push	r27
     f64:	ef 93       	push	r30
     f66:	ff 93       	push	r31
     f68:	df 93       	push	r29
     f6a:	cf 93       	push	r28
     f6c:	cd b7       	in	r28, 0x3d	; 61
     f6e:	de b7       	in	r29, 0x3e	; 62
	if(g_fptrCallBack_receive != NULLPTR)
     f70:	80 91 6e 00 	lds	r24, 0x006E
     f74:	90 91 6f 00 	lds	r25, 0x006F
     f78:	00 97       	sbiw	r24, 0x00	; 0
     f7a:	29 f0       	breq	.+10     	; 0xf86 <__vector_11+0x40>
		(*g_fptrCallBack_receive)();
     f7c:	e0 91 6e 00 	lds	r30, 0x006E
     f80:	f0 91 6f 00 	lds	r31, 0x006F
     f84:	09 95       	icall
	/*You must read UDR or clear RXCIE(disable RXC interrupt) bit otherwise a new interrupt will occur once the interrupt routine terminates. (You can't clear RXC flag because it's read only.. its only cleared when UDR is read)*/
}
     f86:	cf 91       	pop	r28
     f88:	df 91       	pop	r29
     f8a:	ff 91       	pop	r31
     f8c:	ef 91       	pop	r30
     f8e:	bf 91       	pop	r27
     f90:	af 91       	pop	r26
     f92:	9f 91       	pop	r25
     f94:	8f 91       	pop	r24
     f96:	7f 91       	pop	r23
     f98:	6f 91       	pop	r22
     f9a:	5f 91       	pop	r21
     f9c:	4f 91       	pop	r20
     f9e:	3f 91       	pop	r19
     fa0:	2f 91       	pop	r18
     fa2:	0f 90       	pop	r0
     fa4:	0f be       	out	0x3f, r0	; 63
     fa6:	0f 90       	pop	r0
     fa8:	1f 90       	pop	r1
     faa:	18 95       	reti

00000fac <__vector_13>:
ISR(USART_TXC_vect)
{
     fac:	1f 92       	push	r1
     fae:	0f 92       	push	r0
     fb0:	0f b6       	in	r0, 0x3f	; 63
     fb2:	0f 92       	push	r0
     fb4:	11 24       	eor	r1, r1
     fb6:	2f 93       	push	r18
     fb8:	3f 93       	push	r19
     fba:	4f 93       	push	r20
     fbc:	5f 93       	push	r21
     fbe:	6f 93       	push	r22
     fc0:	7f 93       	push	r23
     fc2:	8f 93       	push	r24
     fc4:	9f 93       	push	r25
     fc6:	af 93       	push	r26
     fc8:	bf 93       	push	r27
     fca:	ef 93       	push	r30
     fcc:	ff 93       	push	r31
     fce:	df 93       	push	r29
     fd0:	cf 93       	push	r28
     fd2:	cd b7       	in	r28, 0x3d	; 61
     fd4:	de b7       	in	r29, 0x3e	; 62
	if(g_fptrCallBack_transmit_complete != NULLPTR)
     fd6:	80 91 70 00 	lds	r24, 0x0070
     fda:	90 91 71 00 	lds	r25, 0x0071
     fde:	00 97       	sbiw	r24, 0x00	; 0
     fe0:	29 f0       	breq	.+10     	; 0xfec <__vector_13+0x40>
		(*g_fptrCallBack_transmit_complete)();
     fe2:	e0 91 70 00 	lds	r30, 0x0070
     fe6:	f0 91 71 00 	lds	r31, 0x0071
     fea:	09 95       	icall

	/*TXC flag is automatically cleared after the execution of its ISR*/
}
     fec:	cf 91       	pop	r28
     fee:	df 91       	pop	r29
     ff0:	ff 91       	pop	r31
     ff2:	ef 91       	pop	r30
     ff4:	bf 91       	pop	r27
     ff6:	af 91       	pop	r26
     ff8:	9f 91       	pop	r25
     ffa:	8f 91       	pop	r24
     ffc:	7f 91       	pop	r23
     ffe:	6f 91       	pop	r22
    1000:	5f 91       	pop	r21
    1002:	4f 91       	pop	r20
    1004:	3f 91       	pop	r19
    1006:	2f 91       	pop	r18
    1008:	0f 90       	pop	r0
    100a:	0f be       	out	0x3f, r0	; 63
    100c:	0f 90       	pop	r0
    100e:	1f 90       	pop	r1
    1010:	18 95       	reti

00001012 <__vector_12>:
ISR(USART_UDRE_vect)
{
    1012:	1f 92       	push	r1
    1014:	0f 92       	push	r0
    1016:	0f b6       	in	r0, 0x3f	; 63
    1018:	0f 92       	push	r0
    101a:	11 24       	eor	r1, r1
    101c:	2f 93       	push	r18
    101e:	3f 93       	push	r19
    1020:	4f 93       	push	r20
    1022:	5f 93       	push	r21
    1024:	6f 93       	push	r22
    1026:	7f 93       	push	r23
    1028:	8f 93       	push	r24
    102a:	9f 93       	push	r25
    102c:	af 93       	push	r26
    102e:	bf 93       	push	r27
    1030:	ef 93       	push	r30
    1032:	ff 93       	push	r31
    1034:	df 93       	push	r29
    1036:	cf 93       	push	r28
    1038:	cd b7       	in	r28, 0x3d	; 61
    103a:	de b7       	in	r29, 0x3e	; 62
	if(g_fptrCallBack_transmit_empty != NULLPTR)
    103c:	80 91 72 00 	lds	r24, 0x0072
    1040:	90 91 73 00 	lds	r25, 0x0073
    1044:	00 97       	sbiw	r24, 0x00	; 0
    1046:	29 f0       	breq	.+10     	; 0x1052 <__vector_12+0x40>
		(*g_fptrCallBack_transmit_empty)();
    1048:	e0 91 72 00 	lds	r30, 0x0072
    104c:	f0 91 73 00 	lds	r31, 0x0073
    1050:	09 95       	icall
	/*You must write in UDR or clear UDRIE(disable UDRE interrupt) bit otherwise a new interrupt will occur once the interrupt routine terminates. (You can't clear UDRE flag because it's read only.. its only cleared when UDR is written)*/
}
    1052:	cf 91       	pop	r28
    1054:	df 91       	pop	r29
    1056:	ff 91       	pop	r31
    1058:	ef 91       	pop	r30
    105a:	bf 91       	pop	r27
    105c:	af 91       	pop	r26
    105e:	9f 91       	pop	r25
    1060:	8f 91       	pop	r24
    1062:	7f 91       	pop	r23
    1064:	6f 91       	pop	r22
    1066:	5f 91       	pop	r21
    1068:	4f 91       	pop	r20
    106a:	3f 91       	pop	r19
    106c:	2f 91       	pop	r18
    106e:	0f 90       	pop	r0
    1070:	0f be       	out	0x3f, r0	; 63
    1072:	0f 90       	pop	r0
    1074:	1f 90       	pop	r1
    1076:	18 95       	reti

00001078 <TIMER0_PWM_init>:
static TIMER0_CLOCK g_clock = 0;
/*******************************************************************************
*                    			Functions Definitions
 *******************************************************************************/
void TIMER0_PWM_init(TIMER0_CLOCK a_clock)
{
    1078:	df 93       	push	r29
    107a:	cf 93       	push	r28
    107c:	0f 92       	push	r0
    107e:	cd b7       	in	r28, 0x3d	; 61
    1080:	de b7       	in	r29, 0x3e	; 62
    1082:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(DDRB, PB3);		/*Set OC0 pin as output pin*/
    1084:	a7 e3       	ldi	r26, 0x37	; 55
    1086:	b0 e0       	ldi	r27, 0x00	; 0
    1088:	e7 e3       	ldi	r30, 0x37	; 55
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	80 81       	ld	r24, Z
    108e:	88 60       	ori	r24, 0x08	; 8
    1090:	8c 93       	st	X, r24
	/*Disables Force compare output on OC0 pin => PWM modes have to disable this pin*/
	CLEAR_BIT(TCCR0, FOC0);
    1092:	a3 e5       	ldi	r26, 0x53	; 83
    1094:	b0 e0       	ldi	r27, 0x00	; 0
    1096:	e3 e5       	ldi	r30, 0x53	; 83
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	80 81       	ld	r24, Z
    109c:	8f 77       	andi	r24, 0x7F	; 127
    109e:	8c 93       	st	X, r24
	/*Choosing Timer mode => FAST PWM*/
	SET_BIT(TCCR0, WGM00);
    10a0:	a3 e5       	ldi	r26, 0x53	; 83
    10a2:	b0 e0       	ldi	r27, 0x00	; 0
    10a4:	e3 e5       	ldi	r30, 0x53	; 83
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	80 81       	ld	r24, Z
    10aa:	80 64       	ori	r24, 0x40	; 64
    10ac:	8c 93       	st	X, r24
	SET_BIT(TCCR0, WGM01);
    10ae:	a3 e5       	ldi	r26, 0x53	; 83
    10b0:	b0 e0       	ldi	r27, 0x00	; 0
    10b2:	e3 e5       	ldi	r30, 0x53	; 83
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	80 81       	ld	r24, Z
    10b8:	88 60       	ori	r24, 0x08	; 8
    10ba:	8c 93       	st	X, r24

	TCNT0 = 0;
    10bc:	e2 e5       	ldi	r30, 0x52	; 82
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	10 82       	st	Z, r1
	g_clock = a_clock;
    10c2:	89 81       	ldd	r24, Y+1	; 0x01
    10c4:	80 93 74 00 	sts	0x0074, r24
}
    10c8:	0f 90       	pop	r0
    10ca:	cf 91       	pop	r28
    10cc:	df 91       	pop	r29
    10ce:	08 95       	ret

000010d0 <TIMER0_PWM_deinit>:
void TIMER0_PWM_deinit(void)
{
    10d0:	df 93       	push	r29
    10d2:	cf 93       	push	r28
    10d4:	cd b7       	in	r28, 0x3d	; 61
    10d6:	de b7       	in	r29, 0x3e	; 62
	/*Disconnects clock and reinitialize TCCR0*/
	TCCR0 = 0;
    10d8:	e3 e5       	ldi	r30, 0x53	; 83
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	10 82       	st	Z, r1
	TCNT0 = 0;
    10de:	e2 e5       	ldi	r30, 0x52	; 82
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	10 82       	st	Z, r1
	OCR0 = 0;
    10e4:	ec e5       	ldi	r30, 0x5C	; 92
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	10 82       	st	Z, r1
	SET_BIT(TIFR, OCF0);
    10ea:	a8 e5       	ldi	r26, 0x58	; 88
    10ec:	b0 e0       	ldi	r27, 0x00	; 0
    10ee:	e8 e5       	ldi	r30, 0x58	; 88
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	80 81       	ld	r24, Z
    10f4:	82 60       	ori	r24, 0x02	; 2
    10f6:	8c 93       	st	X, r24
	SET_BIT(TIFR, TOV0);
    10f8:	a8 e5       	ldi	r26, 0x58	; 88
    10fa:	b0 e0       	ldi	r27, 0x00	; 0
    10fc:	e8 e5       	ldi	r30, 0x58	; 88
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	80 81       	ld	r24, Z
    1102:	81 60       	ori	r24, 0x01	; 1
    1104:	8c 93       	st	X, r24
}
    1106:	cf 91       	pop	r28
    1108:	df 91       	pop	r29
    110a:	08 95       	ret

0000110c <TIMER0_PWM_stop>:
void TIMER0_PWM_stop(void)
{
    110c:	df 93       	push	r29
    110e:	cf 93       	push	r28
    1110:	cd b7       	in	r28, 0x3d	; 61
    1112:	de b7       	in	r29, 0x3e	; 62
	TCCR0 &= 0xF8;	/*Disconnects Clock*/
    1114:	a3 e5       	ldi	r26, 0x53	; 83
    1116:	b0 e0       	ldi	r27, 0x00	; 0
    1118:	e3 e5       	ldi	r30, 0x53	; 83
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	80 81       	ld	r24, Z
    111e:	88 7f       	andi	r24, 0xF8	; 248
    1120:	8c 93       	st	X, r24
}
    1122:	cf 91       	pop	r28
    1124:	df 91       	pop	r29
    1126:	08 95       	ret

00001128 <TIMER0_PWM_start>:
void TIMER0_PWM_start(const TIMER0_PWM_MODE a_pwmMode, const uint8 a_dutyCycle)
{
    1128:	df 93       	push	r29
    112a:	cf 93       	push	r28
    112c:	00 d0       	rcall	.+0      	; 0x112e <TIMER0_PWM_start+0x6>
    112e:	cd b7       	in	r28, 0x3d	; 61
    1130:	de b7       	in	r29, 0x3e	; 62
    1132:	89 83       	std	Y+1, r24	; 0x01
    1134:	6a 83       	std	Y+2, r22	; 0x02
	switch(a_pwmMode)
    1136:	89 81       	ldd	r24, Y+1	; 0x01
    1138:	88 2f       	mov	r24, r24
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	81 30       	cpi	r24, 0x01	; 1
    113e:	91 05       	cpc	r25, r1
    1140:	79 f0       	breq	.+30     	; 0x1160 <TIMER0_PWM_start+0x38>
	{
	default:
	case NON_INVERTING:
		CLEAR_BIT(TCCR0, COM00);
    1142:	a3 e5       	ldi	r26, 0x53	; 83
    1144:	b0 e0       	ldi	r27, 0x00	; 0
    1146:	e3 e5       	ldi	r30, 0x53	; 83
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	80 81       	ld	r24, Z
    114c:	8f 7e       	andi	r24, 0xEF	; 239
    114e:	8c 93       	st	X, r24
		SET_BIT(TCCR0, COM01);
    1150:	a3 e5       	ldi	r26, 0x53	; 83
    1152:	b0 e0       	ldi	r27, 0x00	; 0
    1154:	e3 e5       	ldi	r30, 0x53	; 83
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	80 81       	ld	r24, Z
    115a:	80 62       	ori	r24, 0x20	; 32
    115c:	8c 93       	st	X, r24
    115e:	0e c0       	rjmp	.+28     	; 0x117c <TIMER0_PWM_start+0x54>
		break;
	case INVERTING:
		SET_BIT(TCCR0, COM00);
    1160:	a3 e5       	ldi	r26, 0x53	; 83
    1162:	b0 e0       	ldi	r27, 0x00	; 0
    1164:	e3 e5       	ldi	r30, 0x53	; 83
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	80 81       	ld	r24, Z
    116a:	80 61       	ori	r24, 0x10	; 16
    116c:	8c 93       	st	X, r24
		SET_BIT(TCCR0, COM01);
    116e:	a3 e5       	ldi	r26, 0x53	; 83
    1170:	b0 e0       	ldi	r27, 0x00	; 0
    1172:	e3 e5       	ldi	r30, 0x53	; 83
    1174:	f0 e0       	ldi	r31, 0x00	; 0
    1176:	80 81       	ld	r24, Z
    1178:	80 62       	ori	r24, 0x20	; 32
    117a:	8c 93       	st	X, r24
		break;
	}
	TCNT0 = 0;
    117c:	e2 e5       	ldi	r30, 0x52	; 82
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	10 82       	st	Z, r1
	OCR0 = (a_dutyCycle*255)/ 100;
    1182:	ec e5       	ldi	r30, 0x5C	; 92
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	8a 81       	ldd	r24, Y+2	; 0x02
    1188:	48 2f       	mov	r20, r24
    118a:	50 e0       	ldi	r21, 0x00	; 0
    118c:	ca 01       	movw	r24, r20
    118e:	9c 01       	movw	r18, r24
    1190:	22 0f       	add	r18, r18
    1192:	33 1f       	adc	r19, r19
    1194:	c9 01       	movw	r24, r18
    1196:	96 95       	lsr	r25
    1198:	98 2f       	mov	r25, r24
    119a:	88 27       	eor	r24, r24
    119c:	97 95       	ror	r25
    119e:	87 95       	ror	r24
    11a0:	82 1b       	sub	r24, r18
    11a2:	93 0b       	sbc	r25, r19
    11a4:	84 0f       	add	r24, r20
    11a6:	95 1f       	adc	r25, r21
    11a8:	24 e6       	ldi	r18, 0x64	; 100
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	b9 01       	movw	r22, r18
    11ae:	0e 94 c9 10 	call	0x2192	; 0x2192 <__divmodhi4>
    11b2:	cb 01       	movw	r24, r22
    11b4:	80 83       	st	Z, r24
	TCCR0 = (TCCR0 & 0xF8) | (g_clock & 0x07);	/*Start clock*/
    11b6:	a3 e5       	ldi	r26, 0x53	; 83
    11b8:	b0 e0       	ldi	r27, 0x00	; 0
    11ba:	e3 e5       	ldi	r30, 0x53	; 83
    11bc:	f0 e0       	ldi	r31, 0x00	; 0
    11be:	80 81       	ld	r24, Z
    11c0:	98 2f       	mov	r25, r24
    11c2:	98 7f       	andi	r25, 0xF8	; 248
    11c4:	80 91 74 00 	lds	r24, 0x0074
    11c8:	87 70       	andi	r24, 0x07	; 7
    11ca:	89 2b       	or	r24, r25
    11cc:	8c 93       	st	X, r24
}
    11ce:	0f 90       	pop	r0
    11d0:	0f 90       	pop	r0
    11d2:	cf 91       	pop	r28
    11d4:	df 91       	pop	r29
    11d6:	08 95       	ret

000011d8 <TIMER0_PWM_setDutyCycle>:
void TIMER0_PWM_setDutyCycle(const uint8 a_dutyCycle)
{
    11d8:	df 93       	push	r29
    11da:	cf 93       	push	r28
    11dc:	0f 92       	push	r0
    11de:	cd b7       	in	r28, 0x3d	; 61
    11e0:	de b7       	in	r29, 0x3e	; 62
    11e2:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = (a_dutyCycle*255) / 100;
    11e4:	ec e5       	ldi	r30, 0x5C	; 92
    11e6:	f0 e0       	ldi	r31, 0x00	; 0
    11e8:	89 81       	ldd	r24, Y+1	; 0x01
    11ea:	48 2f       	mov	r20, r24
    11ec:	50 e0       	ldi	r21, 0x00	; 0
    11ee:	ca 01       	movw	r24, r20
    11f0:	9c 01       	movw	r18, r24
    11f2:	22 0f       	add	r18, r18
    11f4:	33 1f       	adc	r19, r19
    11f6:	c9 01       	movw	r24, r18
    11f8:	96 95       	lsr	r25
    11fa:	98 2f       	mov	r25, r24
    11fc:	88 27       	eor	r24, r24
    11fe:	97 95       	ror	r25
    1200:	87 95       	ror	r24
    1202:	82 1b       	sub	r24, r18
    1204:	93 0b       	sbc	r25, r19
    1206:	84 0f       	add	r24, r20
    1208:	95 1f       	adc	r25, r21
    120a:	24 e6       	ldi	r18, 0x64	; 100
    120c:	30 e0       	ldi	r19, 0x00	; 0
    120e:	b9 01       	movw	r22, r18
    1210:	0e 94 c9 10 	call	0x2192	; 0x2192 <__divmodhi4>
    1214:	cb 01       	movw	r24, r22
    1216:	80 83       	st	Z, r24
}
    1218:	0f 90       	pop	r0
    121a:	cf 91       	pop	r28
    121c:	df 91       	pop	r29
    121e:	08 95       	ret

00001220 <TIMER0_OVF_init>:
static TIMER0_CLOCK g_clock = 0;
/*******************************************************************************
*                    			Functions Definitions
 *******************************************************************************/
void TIMER0_OVF_init(TIMER0_CLOCK a_clock)
{
    1220:	df 93       	push	r29
    1222:	cf 93       	push	r28
    1224:	0f 92       	push	r0
    1226:	cd b7       	in	r28, 0x3d	; 61
    1228:	de b7       	in	r29, 0x3e	; 62
    122a:	89 83       	std	Y+1, r24	; 0x01
	/*Disable Force compare output on OC0 pin*/
	CLEAR_BIT(TCCR0, FOC0);
    122c:	a3 e5       	ldi	r26, 0x53	; 83
    122e:	b0 e0       	ldi	r27, 0x00	; 0
    1230:	e3 e5       	ldi	r30, 0x53	; 83
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	80 81       	ld	r24, Z
    1236:	8f 77       	andi	r24, 0x7F	; 127
    1238:	8c 93       	st	X, r24
	/*Choosing Timer mode => Normal(overflow)*/
	CLEAR_BIT(TCCR0, WGM00);
    123a:	a3 e5       	ldi	r26, 0x53	; 83
    123c:	b0 e0       	ldi	r27, 0x00	; 0
    123e:	e3 e5       	ldi	r30, 0x53	; 83
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	80 81       	ld	r24, Z
    1244:	8f 7b       	andi	r24, 0xBF	; 191
    1246:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0, WGM01);
    1248:	a3 e5       	ldi	r26, 0x53	; 83
    124a:	b0 e0       	ldi	r27, 0x00	; 0
    124c:	e3 e5       	ldi	r30, 0x53	; 83
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	80 81       	ld	r24, Z
    1252:	87 7f       	andi	r24, 0xF7	; 247
    1254:	8c 93       	st	X, r24
	/*Disable (disconnect) OC0 pin => normal mode*/
	CLEAR_BIT(TCCR0, COM00);
    1256:	a3 e5       	ldi	r26, 0x53	; 83
    1258:	b0 e0       	ldi	r27, 0x00	; 0
    125a:	e3 e5       	ldi	r30, 0x53	; 83
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	80 81       	ld	r24, Z
    1260:	8f 7e       	andi	r24, 0xEF	; 239
    1262:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0, COM01);
    1264:	a3 e5       	ldi	r26, 0x53	; 83
    1266:	b0 e0       	ldi	r27, 0x00	; 0
    1268:	e3 e5       	ldi	r30, 0x53	; 83
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	80 81       	ld	r24, Z
    126e:	8f 7d       	andi	r24, 0xDF	; 223
    1270:	8c 93       	st	X, r24
	TCNT0 = 0;
    1272:	e2 e5       	ldi	r30, 0x52	; 82
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	10 82       	st	Z, r1
	g_clock = a_clock;
    1278:	89 81       	ldd	r24, Y+1	; 0x01
    127a:	80 93 77 00 	sts	0x0077, r24
}
    127e:	0f 90       	pop	r0
    1280:	cf 91       	pop	r28
    1282:	df 91       	pop	r29
    1284:	08 95       	ret

00001286 <TIMER0_OVF_deinit>:
void TIMER0_OVF_deinit(void)
{
    1286:	df 93       	push	r29
    1288:	cf 93       	push	r28
    128a:	cd b7       	in	r28, 0x3d	; 61
    128c:	de b7       	in	r29, 0x3e	; 62
	/*Disconnect clock and reinitialize TCCR0*/
	TCCR0 = 0;
    128e:	e3 e5       	ldi	r30, 0x53	; 83
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	10 82       	st	Z, r1
	TCNT0 = 0;
    1294:	e2 e5       	ldi	r30, 0x52	; 82
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	10 82       	st	Z, r1
	CLEAR_BIT(TIMSK, TOIE0); /*Disables interrupts*/
    129a:	a9 e5       	ldi	r26, 0x59	; 89
    129c:	b0 e0       	ldi	r27, 0x00	; 0
    129e:	e9 e5       	ldi	r30, 0x59	; 89
    12a0:	f0 e0       	ldi	r31, 0x00	; 0
    12a2:	80 81       	ld	r24, Z
    12a4:	8e 7f       	andi	r24, 0xFE	; 254
    12a6:	8c 93       	st	X, r24
	SET_BIT(TIFR, TOV0);
    12a8:	a8 e5       	ldi	r26, 0x58	; 88
    12aa:	b0 e0       	ldi	r27, 0x00	; 0
    12ac:	e8 e5       	ldi	r30, 0x58	; 88
    12ae:	f0 e0       	ldi	r31, 0x00	; 0
    12b0:	80 81       	ld	r24, Z
    12b2:	81 60       	ori	r24, 0x01	; 1
    12b4:	8c 93       	st	X, r24
	SET_BIT(TIFR, OCF0);
    12b6:	a8 e5       	ldi	r26, 0x58	; 88
    12b8:	b0 e0       	ldi	r27, 0x00	; 0
    12ba:	e8 e5       	ldi	r30, 0x58	; 88
    12bc:	f0 e0       	ldi	r31, 0x00	; 0
    12be:	80 81       	ld	r24, Z
    12c0:	82 60       	ori	r24, 0x02	; 2
    12c2:	8c 93       	st	X, r24
	g_fptr_callBackFunction = NULLPTR;
    12c4:	10 92 76 00 	sts	0x0076, r1
    12c8:	10 92 75 00 	sts	0x0075, r1
}
    12cc:	cf 91       	pop	r28
    12ce:	df 91       	pop	r29
    12d0:	08 95       	ret

000012d2 <TIMER0_OVF_stop>:
void TIMER0_OVF_stop(void)
{
    12d2:	df 93       	push	r29
    12d4:	cf 93       	push	r28
    12d6:	cd b7       	in	r28, 0x3d	; 61
    12d8:	de b7       	in	r29, 0x3e	; 62
	TCCR0 &= 0xF8;	/*Disconnect Clock*/
    12da:	a3 e5       	ldi	r26, 0x53	; 83
    12dc:	b0 e0       	ldi	r27, 0x00	; 0
    12de:	e3 e5       	ldi	r30, 0x53	; 83
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	80 81       	ld	r24, Z
    12e4:	88 7f       	andi	r24, 0xF8	; 248
    12e6:	8c 93       	st	X, r24
}
    12e8:	cf 91       	pop	r28
    12ea:	df 91       	pop	r29
    12ec:	08 95       	ret

000012ee <TIMER0_OVF_start>:
void TIMER0_OVF_start(const uint8 a_startValue)
{
    12ee:	df 93       	push	r29
    12f0:	cf 93       	push	r28
    12f2:	0f 92       	push	r0
    12f4:	cd b7       	in	r28, 0x3d	; 61
    12f6:	de b7       	in	r29, 0x3e	; 62
    12f8:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = a_startValue;
    12fa:	e2 e5       	ldi	r30, 0x52	; 82
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	89 81       	ldd	r24, Y+1	; 0x01
    1300:	80 83       	st	Z, r24
	TCCR0 = (TCCR0 & 0xF8) | (g_clock & 0x07);
    1302:	a3 e5       	ldi	r26, 0x53	; 83
    1304:	b0 e0       	ldi	r27, 0x00	; 0
    1306:	e3 e5       	ldi	r30, 0x53	; 83
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	80 81       	ld	r24, Z
    130c:	98 2f       	mov	r25, r24
    130e:	98 7f       	andi	r25, 0xF8	; 248
    1310:	80 91 77 00 	lds	r24, 0x0077
    1314:	87 70       	andi	r24, 0x07	; 7
    1316:	89 2b       	or	r24, r25
    1318:	8c 93       	st	X, r24
}
    131a:	0f 90       	pop	r0
    131c:	cf 91       	pop	r28
    131e:	df 91       	pop	r29
    1320:	08 95       	ret

00001322 <TIMER0_OVF_setStartValue>:
void TIMER0_OVF_setStartValue(const uint8 a_startValue)
{
    1322:	df 93       	push	r29
    1324:	cf 93       	push	r28
    1326:	0f 92       	push	r0
    1328:	cd b7       	in	r28, 0x3d	; 61
    132a:	de b7       	in	r29, 0x3e	; 62
    132c:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = a_startValue;
    132e:	e2 e5       	ldi	r30, 0x52	; 82
    1330:	f0 e0       	ldi	r31, 0x00	; 0
    1332:	89 81       	ldd	r24, Y+1	; 0x01
    1334:	80 83       	st	Z, r24
}
    1336:	0f 90       	pop	r0
    1338:	cf 91       	pop	r28
    133a:	df 91       	pop	r29
    133c:	08 95       	ret

0000133e <TIMER0_OVF_interruptEnable>:
void TIMER0_OVF_interruptEnable(void (*a_fptr_callBackFunction)())
{
    133e:	df 93       	push	r29
    1340:	cf 93       	push	r28
    1342:	00 d0       	rcall	.+0      	; 0x1344 <TIMER0_OVF_interruptEnable+0x6>
    1344:	cd b7       	in	r28, 0x3d	; 61
    1346:	de b7       	in	r29, 0x3e	; 62
    1348:	9a 83       	std	Y+2, r25	; 0x02
    134a:	89 83       	std	Y+1, r24	; 0x01
	if(a_fptr_callBackFunction != NULLPTR)
    134c:	89 81       	ldd	r24, Y+1	; 0x01
    134e:	9a 81       	ldd	r25, Y+2	; 0x02
    1350:	00 97       	sbiw	r24, 0x00	; 0
    1352:	69 f0       	breq	.+26     	; 0x136e <TIMER0_OVF_interruptEnable+0x30>
	{
		SET_BIT(TIMSK, TOIE0);								/*Enable interrupts*/
    1354:	a9 e5       	ldi	r26, 0x59	; 89
    1356:	b0 e0       	ldi	r27, 0x00	; 0
    1358:	e9 e5       	ldi	r30, 0x59	; 89
    135a:	f0 e0       	ldi	r31, 0x00	; 0
    135c:	80 81       	ld	r24, Z
    135e:	81 60       	ori	r24, 0x01	; 1
    1360:	8c 93       	st	X, r24
		g_fptr_callBackFunction = a_fptr_callBackFunction;	/*Sets call back function*/
    1362:	89 81       	ldd	r24, Y+1	; 0x01
    1364:	9a 81       	ldd	r25, Y+2	; 0x02
    1366:	90 93 76 00 	sts	0x0076, r25
    136a:	80 93 75 00 	sts	0x0075, r24
	}
}
    136e:	0f 90       	pop	r0
    1370:	0f 90       	pop	r0
    1372:	cf 91       	pop	r28
    1374:	df 91       	pop	r29
    1376:	08 95       	ret

00001378 <__vector_9>:
ISR(TIMER0_OVF_vect)
{
    1378:	1f 92       	push	r1
    137a:	0f 92       	push	r0
    137c:	0f b6       	in	r0, 0x3f	; 63
    137e:	0f 92       	push	r0
    1380:	11 24       	eor	r1, r1
    1382:	2f 93       	push	r18
    1384:	3f 93       	push	r19
    1386:	4f 93       	push	r20
    1388:	5f 93       	push	r21
    138a:	6f 93       	push	r22
    138c:	7f 93       	push	r23
    138e:	8f 93       	push	r24
    1390:	9f 93       	push	r25
    1392:	af 93       	push	r26
    1394:	bf 93       	push	r27
    1396:	ef 93       	push	r30
    1398:	ff 93       	push	r31
    139a:	df 93       	push	r29
    139c:	cf 93       	push	r28
    139e:	cd b7       	in	r28, 0x3d	; 61
    13a0:	de b7       	in	r29, 0x3e	; 62
	if(g_fptr_callBackFunction != NULLPTR)
    13a2:	80 91 75 00 	lds	r24, 0x0075
    13a6:	90 91 76 00 	lds	r25, 0x0076
    13aa:	00 97       	sbiw	r24, 0x00	; 0
    13ac:	29 f0       	breq	.+10     	; 0x13b8 <__vector_9+0x40>
	{
		(*g_fptr_callBackFunction)();
    13ae:	e0 91 75 00 	lds	r30, 0x0075
    13b2:	f0 91 76 00 	lds	r31, 0x0076
    13b6:	09 95       	icall
	}
	/*The interrupt flag is cleared automatically*/
}
    13b8:	cf 91       	pop	r28
    13ba:	df 91       	pop	r29
    13bc:	ff 91       	pop	r31
    13be:	ef 91       	pop	r30
    13c0:	bf 91       	pop	r27
    13c2:	af 91       	pop	r26
    13c4:	9f 91       	pop	r25
    13c6:	8f 91       	pop	r24
    13c8:	7f 91       	pop	r23
    13ca:	6f 91       	pop	r22
    13cc:	5f 91       	pop	r21
    13ce:	4f 91       	pop	r20
    13d0:	3f 91       	pop	r19
    13d2:	2f 91       	pop	r18
    13d4:	0f 90       	pop	r0
    13d6:	0f be       	out	0x3f, r0	; 63
    13d8:	0f 90       	pop	r0
    13da:	1f 90       	pop	r1
    13dc:	18 95       	reti

000013de <TWI_init>:
static void(*g_fptr_callBackFunction)(void) = NULLPTR;
/**************************************************************
 	 	 	 	 	 	 Functions defintions
 **************************************************************/
void TWI_init(TWI_config* a_pconfig)
{
    13de:	df 93       	push	r29
    13e0:	cf 93       	push	r28
    13e2:	00 d0       	rcall	.+0      	; 0x13e4 <TWI_init+0x6>
    13e4:	cd b7       	in	r28, 0x3d	; 61
    13e6:	de b7       	in	r29, 0x3e	; 62
    13e8:	9a 83       	std	Y+2, r25	; 0x02
    13ea:	89 83       	std	Y+1, r24	; 0x01


	/*This may be changed later to be configurable*/
	/*Working with SCL frequency = 400KHZ so the values of TWPS and TWBR are 1 and 0 respectively*/

	TWBR = 0x02;			/*TWBR = 2*/
    13ec:	e0 e2       	ldi	r30, 0x20	; 32
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	82 e0       	ldi	r24, 0x02	; 2
    13f2:	80 83       	st	Z, r24

	CLEAR_BIT(TWSR, TWPS0);	/*Prescalar value = 1*/
    13f4:	a1 e2       	ldi	r26, 0x21	; 33
    13f6:	b0 e0       	ldi	r27, 0x00	; 0
    13f8:	e1 e2       	ldi	r30, 0x21	; 33
    13fa:	f0 e0       	ldi	r31, 0x00	; 0
    13fc:	80 81       	ld	r24, Z
    13fe:	8e 7f       	andi	r24, 0xFE	; 254
    1400:	8c 93       	st	X, r24
	CLEAR_BIT(TWSR, TWPS1);
    1402:	a1 e2       	ldi	r26, 0x21	; 33
    1404:	b0 e0       	ldi	r27, 0x00	; 0
    1406:	e1 e2       	ldi	r30, 0x21	; 33
    1408:	f0 e0       	ldi	r31, 0x00	; 0
    140a:	80 81       	ld	r24, Z
    140c:	8d 7f       	andi	r24, 0xFD	; 253
    140e:	8c 93       	st	X, r24

	/*This may be changed later to be configurable*/

	TWAR = (a_pconfig->slaveAddress) << 1;			/*disables general call recognition and setting slave address*/
    1410:	a2 e2       	ldi	r26, 0x22	; 34
    1412:	b0 e0       	ldi	r27, 0x00	; 0
    1414:	e9 81       	ldd	r30, Y+1	; 0x01
    1416:	fa 81       	ldd	r31, Y+2	; 0x02
    1418:	80 81       	ld	r24, Z
    141a:	88 0f       	add	r24, r24
    141c:	8c 93       	st	X, r24

	SET_BIT(TWCR, TWEN);	/*Enables TWI*/
    141e:	a6 e5       	ldi	r26, 0x56	; 86
    1420:	b0 e0       	ldi	r27, 0x00	; 0
    1422:	e6 e5       	ldi	r30, 0x56	; 86
    1424:	f0 e0       	ldi	r31, 0x00	; 0
    1426:	80 81       	ld	r24, Z
    1428:	84 60       	ori	r24, 0x04	; 4
    142a:	8c 93       	st	X, r24

}
    142c:	0f 90       	pop	r0
    142e:	0f 90       	pop	r0
    1430:	cf 91       	pop	r28
    1432:	df 91       	pop	r29
    1434:	08 95       	ret

00001436 <TWI_deinit>:
void TWI_deinit(void)
{
    1436:	df 93       	push	r29
    1438:	cf 93       	push	r28
    143a:	cd b7       	in	r28, 0x3d	; 61
    143c:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TWCR, TWEN);	/*Disables TWI*/
    143e:	a6 e5       	ldi	r26, 0x56	; 86
    1440:	b0 e0       	ldi	r27, 0x00	; 0
    1442:	e6 e5       	ldi	r30, 0x56	; 86
    1444:	f0 e0       	ldi	r31, 0x00	; 0
    1446:	80 81       	ld	r24, Z
    1448:	8b 7f       	andi	r24, 0xFB	; 251
    144a:	8c 93       	st	X, r24
}
    144c:	cf 91       	pop	r28
    144e:	df 91       	pop	r29
    1450:	08 95       	ret

00001452 <TWI_setDeviceAddress>:
void TWI_setDeviceAddress(const uint8 a_address)
{
    1452:	df 93       	push	r29
    1454:	cf 93       	push	r28
    1456:	0f 92       	push	r0
    1458:	cd b7       	in	r28, 0x3d	; 61
    145a:	de b7       	in	r29, 0x3e	; 62
    145c:	89 83       	std	Y+1, r24	; 0x01
	TWAR = a_address;
    145e:	e2 e2       	ldi	r30, 0x22	; 34
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	89 81       	ldd	r24, Y+1	; 0x01
    1464:	80 83       	st	Z, r24
}
    1466:	0f 90       	pop	r0
    1468:	cf 91       	pop	r28
    146a:	df 91       	pop	r29
    146c:	08 95       	ret

0000146e <TWI_startBit>:
TWI_status TWI_startBit(void)
{
    146e:	df 93       	push	r29
    1470:	cf 93       	push	r28
    1472:	0f 92       	push	r0
    1474:	cd b7       	in	r28, 0x3d	; 61
    1476:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TWCR, TWSTA);
    1478:	a6 e5       	ldi	r26, 0x56	; 86
    147a:	b0 e0       	ldi	r27, 0x00	; 0
    147c:	e6 e5       	ldi	r30, 0x56	; 86
    147e:	f0 e0       	ldi	r31, 0x00	; 0
    1480:	80 81       	ld	r24, Z
    1482:	80 62       	ori	r24, 0x20	; 32
    1484:	8c 93       	st	X, r24
	SET_BIT(TWCR, TWINT);
    1486:	a6 e5       	ldi	r26, 0x56	; 86
    1488:	b0 e0       	ldi	r27, 0x00	; 0
    148a:	e6 e5       	ldi	r30, 0x56	; 86
    148c:	f0 e0       	ldi	r31, 0x00	; 0
    148e:	80 81       	ld	r24, Z
    1490:	80 68       	ori	r24, 0x80	; 128
    1492:	8c 93       	st	X, r24
	while(BIT_IS_CLEAR(TWCR, TWINT));
    1494:	e6 e5       	ldi	r30, 0x56	; 86
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	80 81       	ld	r24, Z
    149a:	88 23       	and	r24, r24
    149c:	dc f7       	brge	.-10     	; 0x1494 <TWI_startBit+0x26>
	if(TWI_getStatus() == MT_START || TWI_getStatus() == MT_REP_START)
    149e:	0e 94 1d 0b 	call	0x163a	; 0x163a <TWI_getStatus>
    14a2:	88 30       	cpi	r24, 0x08	; 8
    14a4:	21 f0       	breq	.+8      	; 0x14ae <TWI_startBit+0x40>
    14a6:	0e 94 1d 0b 	call	0x163a	; 0x163a <TWI_getStatus>
    14aa:	80 31       	cpi	r24, 0x10	; 16
    14ac:	19 f4       	brne	.+6      	; 0x14b4 <TWI_startBit+0x46>
	{
		return TWI_SUCCESS;
    14ae:	81 e0       	ldi	r24, 0x01	; 1
    14b0:	89 83       	std	Y+1, r24	; 0x01
    14b2:	01 c0       	rjmp	.+2      	; 0x14b6 <TWI_startBit+0x48>
	}
	else
	{
		return TWI_ERROR;
    14b4:	19 82       	std	Y+1, r1	; 0x01
    14b6:	89 81       	ldd	r24, Y+1	; 0x01
	}
}
    14b8:	0f 90       	pop	r0
    14ba:	cf 91       	pop	r28
    14bc:	df 91       	pop	r29
    14be:	08 95       	ret

000014c0 <TWI_stopBit>:
void TWI_stopBit(void)
{
    14c0:	df 93       	push	r29
    14c2:	cf 93       	push	r28
    14c4:	cd b7       	in	r28, 0x3d	; 61
    14c6:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TWCR, TWSTA);				/*Clears start bit*/
    14c8:	a6 e5       	ldi	r26, 0x56	; 86
    14ca:	b0 e0       	ldi	r27, 0x00	; 0
    14cc:	e6 e5       	ldi	r30, 0x56	; 86
    14ce:	f0 e0       	ldi	r31, 0x00	; 0
    14d0:	80 81       	ld	r24, Z
    14d2:	8f 7d       	andi	r24, 0xDF	; 223
    14d4:	8c 93       	st	X, r24
	SET_BIT(TWCR, TWSTO);				/*Sets stop bit*/
    14d6:	a6 e5       	ldi	r26, 0x56	; 86
    14d8:	b0 e0       	ldi	r27, 0x00	; 0
    14da:	e6 e5       	ldi	r30, 0x56	; 86
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	80 81       	ld	r24, Z
    14e0:	80 61       	ori	r24, 0x10	; 16
    14e2:	8c 93       	st	X, r24
	SET_BIT(TWCR, TWINT);				/*Clear interrupt flag*/
    14e4:	a6 e5       	ldi	r26, 0x56	; 86
    14e6:	b0 e0       	ldi	r27, 0x00	; 0
    14e8:	e6 e5       	ldi	r30, 0x56	; 86
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	80 81       	ld	r24, Z
    14ee:	80 68       	ori	r24, 0x80	; 128
    14f0:	8c 93       	st	X, r24
}
    14f2:	cf 91       	pop	r28
    14f4:	df 91       	pop	r29
    14f6:	08 95       	ret

000014f8 <TWI_sendData>:
TWI_status TWI_sendData(const uint8 a_data)
{
    14f8:	df 93       	push	r29
    14fa:	cf 93       	push	r28
    14fc:	00 d0       	rcall	.+0      	; 0x14fe <TWI_sendData+0x6>
    14fe:	cd b7       	in	r28, 0x3d	; 61
    1500:	de b7       	in	r29, 0x3e	; 62
    1502:	89 83       	std	Y+1, r24	; 0x01
	TWDR = a_data;						/*Sets data to be sent*/
    1504:	e3 e2       	ldi	r30, 0x23	; 35
    1506:	f0 e0       	ldi	r31, 0x00	; 0
    1508:	89 81       	ldd	r24, Y+1	; 0x01
    150a:	80 83       	st	Z, r24
	CLEAR_BIT(TWCR, TWSTA);				/*Clears start bit*/
    150c:	a6 e5       	ldi	r26, 0x56	; 86
    150e:	b0 e0       	ldi	r27, 0x00	; 0
    1510:	e6 e5       	ldi	r30, 0x56	; 86
    1512:	f0 e0       	ldi	r31, 0x00	; 0
    1514:	80 81       	ld	r24, Z
    1516:	8f 7d       	andi	r24, 0xDF	; 223
    1518:	8c 93       	st	X, r24
	SET_BIT(TWCR, TWINT);				/*Clear interrupt flag => starts sending data*/
    151a:	a6 e5       	ldi	r26, 0x56	; 86
    151c:	b0 e0       	ldi	r27, 0x00	; 0
    151e:	e6 e5       	ldi	r30, 0x56	; 86
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	80 81       	ld	r24, Z
    1524:	80 68       	ori	r24, 0x80	; 128
    1526:	8c 93       	st	X, r24
	while(BIT_IS_CLEAR(TWCR, TWINT));	/*Wait till data is sent and ACK is sent back*/
    1528:	e6 e5       	ldi	r30, 0x56	; 86
    152a:	f0 e0       	ldi	r31, 0x00	; 0
    152c:	80 81       	ld	r24, Z
    152e:	88 23       	and	r24, r24
    1530:	dc f7       	brge	.-10     	; 0x1528 <TWI_sendData+0x30>
	if(TWI_getStatus() == MT_SLA_W_ACK || TWI_getStatus() == MT_DATA_ACK || TWI_getStatus() == MR_SLA_R_ACK)	/*Check if the process is successful*/
    1532:	0e 94 1d 0b 	call	0x163a	; 0x163a <TWI_getStatus>
    1536:	88 31       	cpi	r24, 0x18	; 24
    1538:	41 f0       	breq	.+16     	; 0x154a <TWI_sendData+0x52>
    153a:	0e 94 1d 0b 	call	0x163a	; 0x163a <TWI_getStatus>
    153e:	88 32       	cpi	r24, 0x28	; 40
    1540:	21 f0       	breq	.+8      	; 0x154a <TWI_sendData+0x52>
    1542:	0e 94 1d 0b 	call	0x163a	; 0x163a <TWI_getStatus>
    1546:	80 34       	cpi	r24, 0x40	; 64
    1548:	19 f4       	brne	.+6      	; 0x1550 <TWI_sendData+0x58>
	{
		return TWI_SUCCESS;
    154a:	81 e0       	ldi	r24, 0x01	; 1
    154c:	8a 83       	std	Y+2, r24	; 0x02
    154e:	01 c0       	rjmp	.+2      	; 0x1552 <TWI_sendData+0x5a>
	}
	else
	{
		return TWI_ERROR;
    1550:	1a 82       	std	Y+2, r1	; 0x02
    1552:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
    1554:	0f 90       	pop	r0
    1556:	0f 90       	pop	r0
    1558:	cf 91       	pop	r28
    155a:	df 91       	pop	r29
    155c:	08 95       	ret

0000155e <TWI_readDataAck>:
TWI_status TWI_readDataAck(uint8* a_pdata)
{
    155e:	df 93       	push	r29
    1560:	cf 93       	push	r28
    1562:	00 d0       	rcall	.+0      	; 0x1564 <TWI_readDataAck+0x6>
    1564:	0f 92       	push	r0
    1566:	cd b7       	in	r28, 0x3d	; 61
    1568:	de b7       	in	r29, 0x3e	; 62
    156a:	9a 83       	std	Y+2, r25	; 0x02
    156c:	89 83       	std	Y+1, r24	; 0x01
	CLEAR_BIT(TWCR, TWSTA);				/*Clears start bit*/
    156e:	a6 e5       	ldi	r26, 0x56	; 86
    1570:	b0 e0       	ldi	r27, 0x00	; 0
    1572:	e6 e5       	ldi	r30, 0x56	; 86
    1574:	f0 e0       	ldi	r31, 0x00	; 0
    1576:	80 81       	ld	r24, Z
    1578:	8f 7d       	andi	r24, 0xDF	; 223
    157a:	8c 93       	st	X, r24
	SET_BIT(TWCR, TWEA);				/*Sets ACK enable bit to send ACK after reception*/
    157c:	a6 e5       	ldi	r26, 0x56	; 86
    157e:	b0 e0       	ldi	r27, 0x00	; 0
    1580:	e6 e5       	ldi	r30, 0x56	; 86
    1582:	f0 e0       	ldi	r31, 0x00	; 0
    1584:	80 81       	ld	r24, Z
    1586:	80 64       	ori	r24, 0x40	; 64
    1588:	8c 93       	st	X, r24
	SET_BIT(TWCR, TWINT);				/*Clear interrupt flag => starts receiving data*/
    158a:	a6 e5       	ldi	r26, 0x56	; 86
    158c:	b0 e0       	ldi	r27, 0x00	; 0
    158e:	e6 e5       	ldi	r30, 0x56	; 86
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	80 81       	ld	r24, Z
    1594:	80 68       	ori	r24, 0x80	; 128
    1596:	8c 93       	st	X, r24
	while(BIT_IS_CLEAR(TWCR, TWINT));	/*Wait till data is received*/
    1598:	e6 e5       	ldi	r30, 0x56	; 86
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	80 81       	ld	r24, Z
    159e:	88 23       	and	r24, r24
    15a0:	dc f7       	brge	.-10     	; 0x1598 <TWI_readDataAck+0x3a>
	if(TWI_getStatus() == MR_DATA_ACK)	/*Check if the process is successful*/
    15a2:	0e 94 1d 0b 	call	0x163a	; 0x163a <TWI_getStatus>
    15a6:	80 35       	cpi	r24, 0x50	; 80
    15a8:	49 f4       	brne	.+18     	; 0x15bc <TWI_readDataAck+0x5e>
	{
		*a_pdata = TWDR;
    15aa:	e3 e2       	ldi	r30, 0x23	; 35
    15ac:	f0 e0       	ldi	r31, 0x00	; 0
    15ae:	80 81       	ld	r24, Z
    15b0:	e9 81       	ldd	r30, Y+1	; 0x01
    15b2:	fa 81       	ldd	r31, Y+2	; 0x02
    15b4:	80 83       	st	Z, r24
		return TWI_SUCCESS;
    15b6:	81 e0       	ldi	r24, 0x01	; 1
    15b8:	8b 83       	std	Y+3, r24	; 0x03
    15ba:	01 c0       	rjmp	.+2      	; 0x15be <TWI_readDataAck+0x60>
	}
	else
	{
		return TWI_ERROR;
    15bc:	1b 82       	std	Y+3, r1	; 0x03
    15be:	8b 81       	ldd	r24, Y+3	; 0x03
	}

}
    15c0:	0f 90       	pop	r0
    15c2:	0f 90       	pop	r0
    15c4:	0f 90       	pop	r0
    15c6:	cf 91       	pop	r28
    15c8:	df 91       	pop	r29
    15ca:	08 95       	ret

000015cc <TWI_readDataNack>:
TWI_status TWI_readDataNack(uint8* a_pdata)
{
    15cc:	df 93       	push	r29
    15ce:	cf 93       	push	r28
    15d0:	00 d0       	rcall	.+0      	; 0x15d2 <TWI_readDataNack+0x6>
    15d2:	0f 92       	push	r0
    15d4:	cd b7       	in	r28, 0x3d	; 61
    15d6:	de b7       	in	r29, 0x3e	; 62
    15d8:	9a 83       	std	Y+2, r25	; 0x02
    15da:	89 83       	std	Y+1, r24	; 0x01
	CLEAR_BIT(TWCR, TWSTA);				/*Clears start bit*/
    15dc:	a6 e5       	ldi	r26, 0x56	; 86
    15de:	b0 e0       	ldi	r27, 0x00	; 0
    15e0:	e6 e5       	ldi	r30, 0x56	; 86
    15e2:	f0 e0       	ldi	r31, 0x00	; 0
    15e4:	80 81       	ld	r24, Z
    15e6:	8f 7d       	andi	r24, 0xDF	; 223
    15e8:	8c 93       	st	X, r24
	CLEAR_BIT(TWCR, TWEA);				/*Clears ACK enable bit to send NACK after reception*/
    15ea:	a6 e5       	ldi	r26, 0x56	; 86
    15ec:	b0 e0       	ldi	r27, 0x00	; 0
    15ee:	e6 e5       	ldi	r30, 0x56	; 86
    15f0:	f0 e0       	ldi	r31, 0x00	; 0
    15f2:	80 81       	ld	r24, Z
    15f4:	8f 7b       	andi	r24, 0xBF	; 191
    15f6:	8c 93       	st	X, r24
	SET_BIT(TWCR, TWINT);				/*Clear interrupt flag => starts receiving data*/
    15f8:	a6 e5       	ldi	r26, 0x56	; 86
    15fa:	b0 e0       	ldi	r27, 0x00	; 0
    15fc:	e6 e5       	ldi	r30, 0x56	; 86
    15fe:	f0 e0       	ldi	r31, 0x00	; 0
    1600:	80 81       	ld	r24, Z
    1602:	80 68       	ori	r24, 0x80	; 128
    1604:	8c 93       	st	X, r24
	while(BIT_IS_CLEAR(TWCR, TWINT));	/*Wait till data is received*/
    1606:	e6 e5       	ldi	r30, 0x56	; 86
    1608:	f0 e0       	ldi	r31, 0x00	; 0
    160a:	80 81       	ld	r24, Z
    160c:	88 23       	and	r24, r24
    160e:	dc f7       	brge	.-10     	; 0x1606 <TWI_readDataNack+0x3a>
	if(TWI_getStatus() == MR_DATA_NACK)	/*Check if the process is successful*/
    1610:	0e 94 1d 0b 	call	0x163a	; 0x163a <TWI_getStatus>
    1614:	88 35       	cpi	r24, 0x58	; 88
    1616:	49 f4       	brne	.+18     	; 0x162a <TWI_readDataNack+0x5e>
	{
		*a_pdata = TWDR;
    1618:	e3 e2       	ldi	r30, 0x23	; 35
    161a:	f0 e0       	ldi	r31, 0x00	; 0
    161c:	80 81       	ld	r24, Z
    161e:	e9 81       	ldd	r30, Y+1	; 0x01
    1620:	fa 81       	ldd	r31, Y+2	; 0x02
    1622:	80 83       	st	Z, r24
		return TWI_SUCCESS;
    1624:	81 e0       	ldi	r24, 0x01	; 1
    1626:	8b 83       	std	Y+3, r24	; 0x03
    1628:	01 c0       	rjmp	.+2      	; 0x162c <TWI_readDataNack+0x60>
	}
	else
	{
		return TWI_ERROR;
    162a:	1b 82       	std	Y+3, r1	; 0x03
    162c:	8b 81       	ldd	r24, Y+3	; 0x03
	}

}
    162e:	0f 90       	pop	r0
    1630:	0f 90       	pop	r0
    1632:	0f 90       	pop	r0
    1634:	cf 91       	pop	r28
    1636:	df 91       	pop	r29
    1638:	08 95       	ret

0000163a <TWI_getStatus>:
uint8 TWI_getStatus(void)
{
    163a:	df 93       	push	r29
    163c:	cf 93       	push	r28
    163e:	cd b7       	in	r28, 0x3d	; 61
    1640:	de b7       	in	r29, 0x3e	; 62
	return (TWSR & 0xF8);	/*Returns Status register with the first 3 bits unmasked*/
    1642:	e1 e2       	ldi	r30, 0x21	; 33
    1644:	f0 e0       	ldi	r31, 0x00	; 0
    1646:	80 81       	ld	r24, Z
    1648:	88 7f       	andi	r24, 0xF8	; 248
}
    164a:	cf 91       	pop	r28
    164c:	df 91       	pop	r29
    164e:	08 95       	ret

00001650 <TWI_interruptEnable>:
void TWI_interruptEnable(void(*a_fptr_callBackFunction)(void))
{
    1650:	df 93       	push	r29
    1652:	cf 93       	push	r28
    1654:	00 d0       	rcall	.+0      	; 0x1656 <TWI_interruptEnable+0x6>
    1656:	cd b7       	in	r28, 0x3d	; 61
    1658:	de b7       	in	r29, 0x3e	; 62
    165a:	9a 83       	std	Y+2, r25	; 0x02
    165c:	89 83       	std	Y+1, r24	; 0x01

	if(a_fptr_callBackFunction != NULLPTR)
    165e:	89 81       	ldd	r24, Y+1	; 0x01
    1660:	9a 81       	ldd	r25, Y+2	; 0x02
    1662:	00 97       	sbiw	r24, 0x00	; 0
    1664:	69 f0       	breq	.+26     	; 0x1680 <TWI_interruptEnable+0x30>
	{
		g_fptr_callBackFunction = a_fptr_callBackFunction;
    1666:	89 81       	ldd	r24, Y+1	; 0x01
    1668:	9a 81       	ldd	r25, Y+2	; 0x02
    166a:	90 93 79 00 	sts	0x0079, r25
    166e:	80 93 78 00 	sts	0x0078, r24
		SET_BIT(TWCR, TWIE);
    1672:	a6 e5       	ldi	r26, 0x56	; 86
    1674:	b0 e0       	ldi	r27, 0x00	; 0
    1676:	e6 e5       	ldi	r30, 0x56	; 86
    1678:	f0 e0       	ldi	r31, 0x00	; 0
    167a:	80 81       	ld	r24, Z
    167c:	81 60       	ori	r24, 0x01	; 1
    167e:	8c 93       	st	X, r24
	}
}
    1680:	0f 90       	pop	r0
    1682:	0f 90       	pop	r0
    1684:	cf 91       	pop	r28
    1686:	df 91       	pop	r29
    1688:	08 95       	ret

0000168a <__vector_17>:
ISR(TWI_vect)
{
    168a:	1f 92       	push	r1
    168c:	0f 92       	push	r0
    168e:	0f b6       	in	r0, 0x3f	; 63
    1690:	0f 92       	push	r0
    1692:	11 24       	eor	r1, r1
    1694:	2f 93       	push	r18
    1696:	3f 93       	push	r19
    1698:	4f 93       	push	r20
    169a:	5f 93       	push	r21
    169c:	6f 93       	push	r22
    169e:	7f 93       	push	r23
    16a0:	8f 93       	push	r24
    16a2:	9f 93       	push	r25
    16a4:	af 93       	push	r26
    16a6:	bf 93       	push	r27
    16a8:	ef 93       	push	r30
    16aa:	ff 93       	push	r31
    16ac:	df 93       	push	r29
    16ae:	cf 93       	push	r28
    16b0:	cd b7       	in	r28, 0x3d	; 61
    16b2:	de b7       	in	r29, 0x3e	; 62
	(*g_fptr_callBackFunction)(); 	/*Callback function*/
    16b4:	e0 91 78 00 	lds	r30, 0x0078
    16b8:	f0 91 79 00 	lds	r31, 0x0079
    16bc:	09 95       	icall
	SET_BIT(TWCR, TWINT);			/*Clears interrupt flag because it is not cleared automatically*/
    16be:	a6 e5       	ldi	r26, 0x56	; 86
    16c0:	b0 e0       	ldi	r27, 0x00	; 0
    16c2:	e6 e5       	ldi	r30, 0x56	; 86
    16c4:	f0 e0       	ldi	r31, 0x00	; 0
    16c6:	80 81       	ld	r24, Z
    16c8:	80 68       	ori	r24, 0x80	; 128
    16ca:	8c 93       	st	X, r24
}
    16cc:	cf 91       	pop	r28
    16ce:	df 91       	pop	r29
    16d0:	ff 91       	pop	r31
    16d2:	ef 91       	pop	r30
    16d4:	bf 91       	pop	r27
    16d6:	af 91       	pop	r26
    16d8:	9f 91       	pop	r25
    16da:	8f 91       	pop	r24
    16dc:	7f 91       	pop	r23
    16de:	6f 91       	pop	r22
    16e0:	5f 91       	pop	r21
    16e2:	4f 91       	pop	r20
    16e4:	3f 91       	pop	r19
    16e6:	2f 91       	pop	r18
    16e8:	0f 90       	pop	r0
    16ea:	0f be       	out	0x3f, r0	; 63
    16ec:	0f 90       	pop	r0
    16ee:	1f 90       	pop	r1
    16f0:	18 95       	reti

000016f2 <EEPROM_init>:

/**************************************************************
					   Functions definitions
***************************************************************/
void EEPROM_init(void)
{
    16f2:	df 93       	push	r29
    16f4:	cf 93       	push	r28
    16f6:	0f 92       	push	r0
    16f8:	cd b7       	in	r28, 0x3d	; 61
    16fa:	de b7       	in	r29, 0x3e	; 62
	TWI_config twi_config_struct = {0x01};	/*Setting the slave address of the MCU by any value*/
    16fc:	81 e0       	ldi	r24, 0x01	; 1
    16fe:	89 83       	std	Y+1, r24	; 0x01
	TWI_init(&twi_config_struct);	/*Enables communication with EEPROM using TWI protocol*/
    1700:	ce 01       	movw	r24, r28
    1702:	01 96       	adiw	r24, 0x01	; 1
    1704:	0e 94 ef 09 	call	0x13de	; 0x13de <TWI_init>
}
    1708:	0f 90       	pop	r0
    170a:	cf 91       	pop	r28
    170c:	df 91       	pop	r29
    170e:	08 95       	ret

00001710 <EEPROM_deinit>:
void EEPROM_deinit(void)
{
    1710:	df 93       	push	r29
    1712:	cf 93       	push	r28
    1714:	cd b7       	in	r28, 0x3d	; 61
    1716:	de b7       	in	r29, 0x3e	; 62
	TWI_deinit();	/*Disables communication with EEPROM*/
    1718:	0e 94 1b 0a 	call	0x1436	; 0x1436 <TWI_deinit>
}
    171c:	cf 91       	pop	r28
    171e:	df 91       	pop	r29
    1720:	08 95       	ret

00001722 <EEPROM_writeByte>:
EEPROM_status EEPROM_writeByte(const uint16 a_address, const uint8 a_data)
{
    1722:	df 93       	push	r29
    1724:	cf 93       	push	r28
    1726:	00 d0       	rcall	.+0      	; 0x1728 <EEPROM_writeByte+0x6>
    1728:	00 d0       	rcall	.+0      	; 0x172a <EEPROM_writeByte+0x8>
    172a:	0f 92       	push	r0
    172c:	cd b7       	in	r28, 0x3d	; 61
    172e:	de b7       	in	r29, 0x3e	; 62
    1730:	9b 83       	std	Y+3, r25	; 0x03
    1732:	8a 83       	std	Y+2, r24	; 0x02
    1734:	6c 83       	std	Y+4, r22	; 0x04
	uint8 SLA = 0xA0;
    1736:	80 ea       	ldi	r24, 0xA0	; 160
    1738:	89 83       	std	Y+1, r24	; 0x01
	if(TWI_startBit() != TWI_SUCCESS)
    173a:	0e 94 37 0a 	call	0x146e	; 0x146e <TWI_startBit>
    173e:	81 30       	cpi	r24, 0x01	; 1
    1740:	11 f0       	breq	.+4      	; 0x1746 <EEPROM_writeByte+0x24>
	{
		return EEPROM_ERROR;
    1742:	1d 82       	std	Y+5, r1	; 0x05
    1744:	23 c0       	rjmp	.+70     	; 0x178c <EEPROM_writeByte+0x6a>
	}
	if(TWI_sendData(SLA | ((a_address >> 7) & 0x0E)) != TWI_SUCCESS)
    1746:	8a 81       	ldd	r24, Y+2	; 0x02
    1748:	9b 81       	ldd	r25, Y+3	; 0x03
    174a:	88 0f       	add	r24, r24
    174c:	89 2f       	mov	r24, r25
    174e:	88 1f       	adc	r24, r24
    1750:	99 0b       	sbc	r25, r25
    1752:	91 95       	neg	r25
    1754:	98 2f       	mov	r25, r24
    1756:	9e 70       	andi	r25, 0x0E	; 14
    1758:	89 81       	ldd	r24, Y+1	; 0x01
    175a:	89 2b       	or	r24, r25
    175c:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <TWI_sendData>
    1760:	81 30       	cpi	r24, 0x01	; 1
    1762:	11 f0       	breq	.+4      	; 0x1768 <EEPROM_writeByte+0x46>
	{
		return EEPROM_ERROR;
    1764:	1d 82       	std	Y+5, r1	; 0x05
    1766:	12 c0       	rjmp	.+36     	; 0x178c <EEPROM_writeByte+0x6a>
	}
	if(TWI_sendData(a_address) != TWI_SUCCESS)
    1768:	8a 81       	ldd	r24, Y+2	; 0x02
    176a:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <TWI_sendData>
    176e:	81 30       	cpi	r24, 0x01	; 1
    1770:	11 f0       	breq	.+4      	; 0x1776 <EEPROM_writeByte+0x54>
	{
		return EEPROM_ERROR;
    1772:	1d 82       	std	Y+5, r1	; 0x05
    1774:	0b c0       	rjmp	.+22     	; 0x178c <EEPROM_writeByte+0x6a>
	}
	if(TWI_sendData(a_data) != TWI_SUCCESS)
    1776:	8c 81       	ldd	r24, Y+4	; 0x04
    1778:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <TWI_sendData>
    177c:	81 30       	cpi	r24, 0x01	; 1
    177e:	11 f0       	breq	.+4      	; 0x1784 <EEPROM_writeByte+0x62>
	{
		return EEPROM_ERROR;
    1780:	1d 82       	std	Y+5, r1	; 0x05
    1782:	04 c0       	rjmp	.+8      	; 0x178c <EEPROM_writeByte+0x6a>
	}
	TWI_stopBit();
    1784:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <TWI_stopBit>
	return EEPROM_SUCCESS;
    1788:	81 e0       	ldi	r24, 0x01	; 1
    178a:	8d 83       	std	Y+5, r24	; 0x05
    178c:	8d 81       	ldd	r24, Y+5	; 0x05
}
    178e:	0f 90       	pop	r0
    1790:	0f 90       	pop	r0
    1792:	0f 90       	pop	r0
    1794:	0f 90       	pop	r0
    1796:	0f 90       	pop	r0
    1798:	cf 91       	pop	r28
    179a:	df 91       	pop	r29
    179c:	08 95       	ret

0000179e <EEPROM_readByte>:
EEPROM_status EEPROM_readByte(const uint16 a_address, uint8 *a_pdata)
{
    179e:	df 93       	push	r29
    17a0:	cf 93       	push	r28
    17a2:	00 d0       	rcall	.+0      	; 0x17a4 <EEPROM_readByte+0x6>
    17a4:	00 d0       	rcall	.+0      	; 0x17a6 <EEPROM_readByte+0x8>
    17a6:	00 d0       	rcall	.+0      	; 0x17a8 <EEPROM_readByte+0xa>
    17a8:	cd b7       	in	r28, 0x3d	; 61
    17aa:	de b7       	in	r29, 0x3e	; 62
    17ac:	9b 83       	std	Y+3, r25	; 0x03
    17ae:	8a 83       	std	Y+2, r24	; 0x02
    17b0:	7d 83       	std	Y+5, r23	; 0x05
    17b2:	6c 83       	std	Y+4, r22	; 0x04
	uint8 SLA = 0xA0;
    17b4:	80 ea       	ldi	r24, 0xA0	; 160
    17b6:	89 83       	std	Y+1, r24	; 0x01
	if(TWI_startBit() != TWI_SUCCESS)
    17b8:	0e 94 37 0a 	call	0x146e	; 0x146e <TWI_startBit>
    17bc:	81 30       	cpi	r24, 0x01	; 1
    17be:	11 f0       	breq	.+4      	; 0x17c4 <EEPROM_readByte+0x26>
	{
		return EEPROM_ERROR;
    17c0:	1e 82       	std	Y+6, r1	; 0x06
    17c2:	3c c0       	rjmp	.+120    	; 0x183c <EEPROM_readByte+0x9e>
	}
	if(TWI_sendData(SLA | ((a_address >> 7) & 0x0E)) != TWI_SUCCESS)
    17c4:	8a 81       	ldd	r24, Y+2	; 0x02
    17c6:	9b 81       	ldd	r25, Y+3	; 0x03
    17c8:	88 0f       	add	r24, r24
    17ca:	89 2f       	mov	r24, r25
    17cc:	88 1f       	adc	r24, r24
    17ce:	99 0b       	sbc	r25, r25
    17d0:	91 95       	neg	r25
    17d2:	98 2f       	mov	r25, r24
    17d4:	9e 70       	andi	r25, 0x0E	; 14
    17d6:	89 81       	ldd	r24, Y+1	; 0x01
    17d8:	89 2b       	or	r24, r25
    17da:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <TWI_sendData>
    17de:	81 30       	cpi	r24, 0x01	; 1
    17e0:	11 f0       	breq	.+4      	; 0x17e6 <EEPROM_readByte+0x48>
	{
		return EEPROM_ERROR;
    17e2:	1e 82       	std	Y+6, r1	; 0x06
    17e4:	2b c0       	rjmp	.+86     	; 0x183c <EEPROM_readByte+0x9e>
	}
	if(TWI_sendData(a_address) != TWI_SUCCESS)
    17e6:	8a 81       	ldd	r24, Y+2	; 0x02
    17e8:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <TWI_sendData>
    17ec:	81 30       	cpi	r24, 0x01	; 1
    17ee:	11 f0       	breq	.+4      	; 0x17f4 <EEPROM_readByte+0x56>
	{
		return EEPROM_ERROR;
    17f0:	1e 82       	std	Y+6, r1	; 0x06
    17f2:	24 c0       	rjmp	.+72     	; 0x183c <EEPROM_readByte+0x9e>
	}
	if(TWI_startBit() != TWI_SUCCESS)
    17f4:	0e 94 37 0a 	call	0x146e	; 0x146e <TWI_startBit>
    17f8:	81 30       	cpi	r24, 0x01	; 1
    17fa:	11 f0       	breq	.+4      	; 0x1800 <EEPROM_readByte+0x62>
	{
		return EEPROM_ERROR;
    17fc:	1e 82       	std	Y+6, r1	; 0x06
    17fe:	1e c0       	rjmp	.+60     	; 0x183c <EEPROM_readByte+0x9e>
	}
	if(TWI_sendData(SLA | ((a_address >> 7) & 0x0E) | 0x01) != TWI_SUCCESS)
    1800:	8a 81       	ldd	r24, Y+2	; 0x02
    1802:	9b 81       	ldd	r25, Y+3	; 0x03
    1804:	88 0f       	add	r24, r24
    1806:	89 2f       	mov	r24, r25
    1808:	88 1f       	adc	r24, r24
    180a:	99 0b       	sbc	r25, r25
    180c:	91 95       	neg	r25
    180e:	98 2f       	mov	r25, r24
    1810:	9e 70       	andi	r25, 0x0E	; 14
    1812:	89 81       	ldd	r24, Y+1	; 0x01
    1814:	89 2b       	or	r24, r25
    1816:	81 60       	ori	r24, 0x01	; 1
    1818:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <TWI_sendData>
    181c:	81 30       	cpi	r24, 0x01	; 1
    181e:	11 f0       	breq	.+4      	; 0x1824 <EEPROM_readByte+0x86>
	{
		return EEPROM_ERROR;
    1820:	1e 82       	std	Y+6, r1	; 0x06
    1822:	0c c0       	rjmp	.+24     	; 0x183c <EEPROM_readByte+0x9e>
	}
	if(TWI_readDataNack(a_pdata) != TWI_SUCCESS)
    1824:	8c 81       	ldd	r24, Y+4	; 0x04
    1826:	9d 81       	ldd	r25, Y+5	; 0x05
    1828:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <TWI_readDataNack>
    182c:	81 30       	cpi	r24, 0x01	; 1
    182e:	11 f0       	breq	.+4      	; 0x1834 <EEPROM_readByte+0x96>
	{
		return EEPROM_ERROR;
    1830:	1e 82       	std	Y+6, r1	; 0x06
    1832:	04 c0       	rjmp	.+8      	; 0x183c <EEPROM_readByte+0x9e>
	}
	TWI_stopBit();
    1834:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <TWI_stopBit>
	return EEPROM_SUCCESS;
    1838:	81 e0       	ldi	r24, 0x01	; 1
    183a:	8e 83       	std	Y+6, r24	; 0x06
    183c:	8e 81       	ldd	r24, Y+6	; 0x06
}
    183e:	26 96       	adiw	r28, 0x06	; 6
    1840:	0f b6       	in	r0, 0x3f	; 63
    1842:	f8 94       	cli
    1844:	de bf       	out	0x3e, r29	; 62
    1846:	0f be       	out	0x3f, r0	; 63
    1848:	cd bf       	out	0x3d, r28	; 61
    184a:	cf 91       	pop	r28
    184c:	df 91       	pop	r29
    184e:	08 95       	ret

00001850 <DC_MOTOR_init>:
#include "dc_motor.h"
/*********************************************************************
						 Functions definitions
********************************************************************/
void DC_MOTOR_init(void)
{
    1850:	df 93       	push	r29
    1852:	cf 93       	push	r28
    1854:	cd b7       	in	r28, 0x3d	; 61
    1856:	de b7       	in	r29, 0x3e	; 62
	/*Set output pins*/
	SET_BIT(DC_MOTOR_IN_PORT_DIR, DC_MOTOR_IN1);
    1858:	a1 e3       	ldi	r26, 0x31	; 49
    185a:	b0 e0       	ldi	r27, 0x00	; 0
    185c:	e1 e3       	ldi	r30, 0x31	; 49
    185e:	f0 e0       	ldi	r31, 0x00	; 0
    1860:	80 81       	ld	r24, Z
    1862:	80 62       	ori	r24, 0x20	; 32
    1864:	8c 93       	st	X, r24
	SET_BIT(DC_MOTOR_IN_PORT_DIR, DC_MOTOR_IN2);
    1866:	a1 e3       	ldi	r26, 0x31	; 49
    1868:	b0 e0       	ldi	r27, 0x00	; 0
    186a:	e1 e3       	ldi	r30, 0x31	; 49
    186c:	f0 e0       	ldi	r31, 0x00	; 0
    186e:	80 81       	ld	r24, Z
    1870:	80 64       	ori	r24, 0x40	; 64
    1872:	8c 93       	st	X, r24
	DC_MOTOR_stop();
    1874:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <DC_MOTOR_stop>
	//TIMER0_PWM_init(F_CPU_64);	/*To work on frequency = 500HZ*//*Comment out if you will not use speed control and you need TIMER0*/
}
    1878:	cf 91       	pop	r28
    187a:	df 91       	pop	r29
    187c:	08 95       	ret

0000187e <DC_MOTOR_deinit>:
void DC_MOTOR_deinit(void)
{
    187e:	df 93       	push	r29
    1880:	cf 93       	push	r28
    1882:	cd b7       	in	r28, 0x3d	; 61
    1884:	de b7       	in	r29, 0x3e	; 62
	DC_MOTOR_stop();
    1886:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <DC_MOTOR_stop>
	TIMER0_PWM_deinit();
    188a:	0e 94 68 08 	call	0x10d0	; 0x10d0 <TIMER0_PWM_deinit>
}
    188e:	cf 91       	pop	r28
    1890:	df 91       	pop	r29
    1892:	08 95       	ret

00001894 <DC_MOTOR_rotateCW>:
void DC_MOTOR_rotateCW(void)
{
    1894:	df 93       	push	r29
    1896:	cf 93       	push	r28
    1898:	cd b7       	in	r28, 0x3d	; 61
    189a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(DC_MOTOR_IN_PORT, DC_MOTOR_IN1);
    189c:	a2 e3       	ldi	r26, 0x32	; 50
    189e:	b0 e0       	ldi	r27, 0x00	; 0
    18a0:	e2 e3       	ldi	r30, 0x32	; 50
    18a2:	f0 e0       	ldi	r31, 0x00	; 0
    18a4:	80 81       	ld	r24, Z
    18a6:	80 62       	ori	r24, 0x20	; 32
    18a8:	8c 93       	st	X, r24
	CLEAR_BIT(DC_MOTOR_IN_PORT, DC_MOTOR_IN2);
    18aa:	a2 e3       	ldi	r26, 0x32	; 50
    18ac:	b0 e0       	ldi	r27, 0x00	; 0
    18ae:	e2 e3       	ldi	r30, 0x32	; 50
    18b0:	f0 e0       	ldi	r31, 0x00	; 0
    18b2:	80 81       	ld	r24, Z
    18b4:	8f 7b       	andi	r24, 0xBF	; 191
    18b6:	8c 93       	st	X, r24
}
    18b8:	cf 91       	pop	r28
    18ba:	df 91       	pop	r29
    18bc:	08 95       	ret

000018be <DC_MOTOR_rotateCCW>:
void DC_MOTOR_rotateCCW(void)
{
    18be:	df 93       	push	r29
    18c0:	cf 93       	push	r28
    18c2:	cd b7       	in	r28, 0x3d	; 61
    18c4:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(DC_MOTOR_IN_PORT, DC_MOTOR_IN1);
    18c6:	a2 e3       	ldi	r26, 0x32	; 50
    18c8:	b0 e0       	ldi	r27, 0x00	; 0
    18ca:	e2 e3       	ldi	r30, 0x32	; 50
    18cc:	f0 e0       	ldi	r31, 0x00	; 0
    18ce:	80 81       	ld	r24, Z
    18d0:	8f 7d       	andi	r24, 0xDF	; 223
    18d2:	8c 93       	st	X, r24
	SET_BIT(DC_MOTOR_IN_PORT, DC_MOTOR_IN2);
    18d4:	a2 e3       	ldi	r26, 0x32	; 50
    18d6:	b0 e0       	ldi	r27, 0x00	; 0
    18d8:	e2 e3       	ldi	r30, 0x32	; 50
    18da:	f0 e0       	ldi	r31, 0x00	; 0
    18dc:	80 81       	ld	r24, Z
    18de:	80 64       	ori	r24, 0x40	; 64
    18e0:	8c 93       	st	X, r24
}
    18e2:	cf 91       	pop	r28
    18e4:	df 91       	pop	r29
    18e6:	08 95       	ret

000018e8 <DC_MOTOR_stop>:
void DC_MOTOR_stop(void)
{
    18e8:	df 93       	push	r29
    18ea:	cf 93       	push	r28
    18ec:	cd b7       	in	r28, 0x3d	; 61
    18ee:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(DC_MOTOR_IN_PORT, DC_MOTOR_IN1);
    18f0:	a2 e3       	ldi	r26, 0x32	; 50
    18f2:	b0 e0       	ldi	r27, 0x00	; 0
    18f4:	e2 e3       	ldi	r30, 0x32	; 50
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	80 81       	ld	r24, Z
    18fa:	8f 7d       	andi	r24, 0xDF	; 223
    18fc:	8c 93       	st	X, r24
	CLEAR_BIT(DC_MOTOR_IN_PORT, DC_MOTOR_IN2);
    18fe:	a2 e3       	ldi	r26, 0x32	; 50
    1900:	b0 e0       	ldi	r27, 0x00	; 0
    1902:	e2 e3       	ldi	r30, 0x32	; 50
    1904:	f0 e0       	ldi	r31, 0x00	; 0
    1906:	80 81       	ld	r24, Z
    1908:	8f 7b       	andi	r24, 0xBF	; 191
    190a:	8c 93       	st	X, r24
}
    190c:	cf 91       	pop	r28
    190e:	df 91       	pop	r29
    1910:	08 95       	ret

00001912 <DC_MOTOR_setSpeed>:
void DC_MOTOR_setSpeed(uint8 dutyCycle)
{
    1912:	df 93       	push	r29
    1914:	cf 93       	push	r28
    1916:	0f 92       	push	r0
    1918:	cd b7       	in	r28, 0x3d	; 61
    191a:	de b7       	in	r29, 0x3e	; 62
    191c:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_PWM_start(NON_INVERTING, dutyCycle);
    191e:	80 e0       	ldi	r24, 0x00	; 0
    1920:	69 81       	ldd	r22, Y+1	; 0x01
    1922:	0e 94 94 08 	call	0x1128	; 0x1128 <TIMER0_PWM_start>
}
    1926:	0f 90       	pop	r0
    1928:	cf 91       	pop	r28
    192a:	df 91       	pop	r29
    192c:	08 95       	ret

0000192e <main>:
	/*********************************************************************
		 	 	 	 	 	Start main function
	 ********************************************************************/

int main(void)
{
    192e:	df 93       	push	r29
    1930:	cf 93       	push	r28
    1932:	cd b7       	in	r28, 0x3d	; 61
    1934:	de b7       	in	r29, 0x3e	; 62
    1936:	cd 56       	subi	r28, 0x6D	; 109
    1938:	d0 40       	sbci	r29, 0x00	; 0
    193a:	0f b6       	in	r0, 0x3f	; 63
    193c:	f8 94       	cli
    193e:	de bf       	out	0x3e, r29	; 62
    1940:	0f be       	out	0x3f, r0	; 63
    1942:	cd bf       	out	0x3d, r28	; 61
	uint8 wrongPasswordCount, action, wrongPassword;

	/*********************************************************************
							 Initialize Pins
	 ********************************************************************/
	SET_BIT(DDRA, PA4);	/*For Buzzer*/
    1944:	aa e3       	ldi	r26, 0x3A	; 58
    1946:	b0 e0       	ldi	r27, 0x00	; 0
    1948:	ea e3       	ldi	r30, 0x3A	; 58
    194a:	f0 e0       	ldi	r31, 0x00	; 0
    194c:	80 81       	ld	r24, Z
    194e:	80 61       	ori	r24, 0x10	; 16
    1950:	8c 93       	st	X, r24
	SET_BIT(PORTA,PA4);
    1952:	ab e3       	ldi	r26, 0x3B	; 59
    1954:	b0 e0       	ldi	r27, 0x00	; 0
    1956:	eb e3       	ldi	r30, 0x3B	; 59
    1958:	f0 e0       	ldi	r31, 0x00	; 0
    195a:	80 81       	ld	r24, Z
    195c:	80 61       	ori	r24, 0x10	; 16
    195e:	8c 93       	st	X, r24

	/*********************************************************************
							Enable global interrupts
	 ********************************************************************/
	GLOBAL_INTERRUPT_ENABLE;
    1960:	af e5       	ldi	r26, 0x5F	; 95
    1962:	b0 e0       	ldi	r27, 0x00	; 0
    1964:	ef e5       	ldi	r30, 0x5F	; 95
    1966:	f0 e0       	ldi	r31, 0x00	; 0
    1968:	80 81       	ld	r24, Z
    196a:	80 68       	ori	r24, 0x80	; 128
    196c:	8c 93       	st	X, r24

	/*********************************************************************
							 Initialize drivers
	 ********************************************************************/

	UART_config uart_config = {TR, BAUD_RATE_9600, EVEN, STOP_BIT_1};
    196e:	ce 01       	movw	r24, r28
    1970:	8e 59       	subi	r24, 0x9E	; 158
    1972:	9f 4f       	sbci	r25, 0xFF	; 255
    1974:	ab 96       	adiw	r28, 0x2b	; 43
    1976:	9f af       	std	Y+63, r25	; 0x3f
    1978:	8e af       	std	Y+62, r24	; 0x3e
    197a:	ab 97       	sbiw	r28, 0x2b	; 43
    197c:	28 e6       	ldi	r18, 0x68	; 104
    197e:	30 e0       	ldi	r19, 0x00	; 0
    1980:	ad 96       	adiw	r28, 0x2d	; 45
    1982:	3f af       	std	Y+63, r19	; 0x3f
    1984:	2e af       	std	Y+62, r18	; 0x3e
    1986:	ad 97       	sbiw	r28, 0x2d	; 45
    1988:	35 e0       	ldi	r19, 0x05	; 5
    198a:	ae 96       	adiw	r28, 0x2e	; 46
    198c:	3f af       	std	Y+63, r19	; 0x3f
    198e:	ae 97       	sbiw	r28, 0x2e	; 46
    1990:	ad 96       	adiw	r28, 0x2d	; 45
    1992:	ee ad       	ldd	r30, Y+62	; 0x3e
    1994:	ff ad       	ldd	r31, Y+63	; 0x3f
    1996:	ad 97       	sbiw	r28, 0x2d	; 45
    1998:	00 80       	ld	r0, Z
    199a:	ad 96       	adiw	r28, 0x2d	; 45
    199c:	2e ad       	ldd	r18, Y+62	; 0x3e
    199e:	3f ad       	ldd	r19, Y+63	; 0x3f
    19a0:	ad 97       	sbiw	r28, 0x2d	; 45
    19a2:	2f 5f       	subi	r18, 0xFF	; 255
    19a4:	3f 4f       	sbci	r19, 0xFF	; 255
    19a6:	ad 96       	adiw	r28, 0x2d	; 45
    19a8:	3f af       	std	Y+63, r19	; 0x3f
    19aa:	2e af       	std	Y+62, r18	; 0x3e
    19ac:	ad 97       	sbiw	r28, 0x2d	; 45
    19ae:	ab 96       	adiw	r28, 0x2b	; 43
    19b0:	ee ad       	ldd	r30, Y+62	; 0x3e
    19b2:	ff ad       	ldd	r31, Y+63	; 0x3f
    19b4:	ab 97       	sbiw	r28, 0x2b	; 43
    19b6:	00 82       	st	Z, r0
    19b8:	ab 96       	adiw	r28, 0x2b	; 43
    19ba:	2e ad       	ldd	r18, Y+62	; 0x3e
    19bc:	3f ad       	ldd	r19, Y+63	; 0x3f
    19be:	ab 97       	sbiw	r28, 0x2b	; 43
    19c0:	2f 5f       	subi	r18, 0xFF	; 255
    19c2:	3f 4f       	sbci	r19, 0xFF	; 255
    19c4:	ab 96       	adiw	r28, 0x2b	; 43
    19c6:	3f af       	std	Y+63, r19	; 0x3f
    19c8:	2e af       	std	Y+62, r18	; 0x3e
    19ca:	ab 97       	sbiw	r28, 0x2b	; 43
    19cc:	ae 96       	adiw	r28, 0x2e	; 46
    19ce:	3f ad       	ldd	r19, Y+63	; 0x3f
    19d0:	ae 97       	sbiw	r28, 0x2e	; 46
    19d2:	31 50       	subi	r19, 0x01	; 1
    19d4:	ae 96       	adiw	r28, 0x2e	; 46
    19d6:	3f af       	std	Y+63, r19	; 0x3f
    19d8:	ae 97       	sbiw	r28, 0x2e	; 46
    19da:	ae 96       	adiw	r28, 0x2e	; 46
    19dc:	8f ad       	ldd	r24, Y+63	; 0x3f
    19de:	ae 97       	sbiw	r28, 0x2e	; 46
    19e0:	88 23       	and	r24, r24
    19e2:	b1 f6       	brne	.-84     	; 0x1990 <main+0x62>
	UART_init(&uart_config);/*Initialize UART*/
    19e4:	ce 01       	movw	r24, r28
    19e6:	8e 59       	subi	r24, 0x9E	; 158
    19e8:	9f 4f       	sbci	r25, 0xFF	; 255
    19ea:	0e 94 a3 05 	call	0xb46	; 0xb46 <UART_init>

	EEPROM_init();	/*Initialize EEPROM*/
    19ee:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <EEPROM_init>

	DC_MOTOR_init(); /*Initialize DC Motor*/
    19f2:	0e 94 28 0c 	call	0x1850	; 0x1850 <DC_MOTOR_init>

	TIMER0_OVF_init(F_CPU_1024);	/*Initialize timer0 overflow mode*/
    19f6:	85 e0       	ldi	r24, 0x05	; 5
    19f8:	0e 94 10 09 	call	0x1220	; 0x1220 <TIMER0_OVF_init>

	/*********************************************************************
							 Initialize Variables
	 ********************************************************************/
	programState  = wrongPasswordCount = action = wrongPassword = passwordLength1 = passwordLength2 = 0;
    19fc:	fe 01       	movw	r30, r28
    19fe:	e0 5a       	subi	r30, 0xA0	; 160
    1a00:	ff 4f       	sbci	r31, 0xFF	; 255
    1a02:	10 82       	st	Z, r1
    1a04:	fe 01       	movw	r30, r28
    1a06:	e0 5a       	subi	r30, 0xA0	; 160
    1a08:	ff 4f       	sbci	r31, 0xFF	; 255
    1a0a:	80 81       	ld	r24, Z
    1a0c:	fe 01       	movw	r30, r28
    1a0e:	e1 5a       	subi	r30, 0xA1	; 161
    1a10:	ff 4f       	sbci	r31, 0xFF	; 255
    1a12:	80 83       	st	Z, r24
    1a14:	fe 01       	movw	r30, r28
    1a16:	e1 5a       	subi	r30, 0xA1	; 161
    1a18:	ff 4f       	sbci	r31, 0xFF	; 255
    1a1a:	80 81       	ld	r24, Z
    1a1c:	8d af       	std	Y+61, r24	; 0x3d
    1a1e:	fe 01       	movw	r30, r28
    1a20:	ef 59       	subi	r30, 0x9F	; 159
    1a22:	ff 4f       	sbci	r31, 0xFF	; 255
    1a24:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a26:	80 83       	st	Z, r24
    1a28:	fe 01       	movw	r30, r28
    1a2a:	ef 59       	subi	r30, 0x9F	; 159
    1a2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a2e:	80 81       	ld	r24, Z
    1a30:	8e af       	std	Y+62, r24	; 0x3e
    1a32:	8e ad       	ldd	r24, Y+62	; 0x3e
    1a34:	80 93 7c 00 	sts	0x007C, r24



	while(1)
	{
		switch(programState)
    1a38:	80 91 7c 00 	lds	r24, 0x007C
    1a3c:	e8 2f       	mov	r30, r24
    1a3e:	f0 e0       	ldi	r31, 0x00	; 0
    1a40:	a9 96       	adiw	r28, 0x29	; 41
    1a42:	ff af       	std	Y+63, r31	; 0x3f
    1a44:	ee af       	std	Y+62, r30	; 0x3e
    1a46:	a9 97       	sbiw	r28, 0x29	; 41
    1a48:	a9 96       	adiw	r28, 0x29	; 41
    1a4a:	2e ad       	ldd	r18, Y+62	; 0x3e
    1a4c:	3f ad       	ldd	r19, Y+63	; 0x3f
    1a4e:	a9 97       	sbiw	r28, 0x29	; 41
    1a50:	21 30       	cpi	r18, 0x01	; 1
    1a52:	31 05       	cpc	r19, r1
    1a54:	09 f4       	brne	.+2      	; 0x1a58 <main+0x12a>
    1a56:	9d c1       	rjmp	.+826    	; 0x1d92 <main+0x464>
    1a58:	a9 96       	adiw	r28, 0x29	; 41
    1a5a:	8e ad       	ldd	r24, Y+62	; 0x3e
    1a5c:	9f ad       	ldd	r25, Y+63	; 0x3f
    1a5e:	a9 97       	sbiw	r28, 0x29	; 41
    1a60:	82 30       	cpi	r24, 0x02	; 2
    1a62:	91 05       	cpc	r25, r1
    1a64:	49 f3       	breq	.-46     	; 0x1a38 <main+0x10a>
		{
		default:
		case 0:
			{
				wrongPasswordCount = action = wrongPassword = passwordLength1 = passwordLength2 = 0;
    1a66:	fe 01       	movw	r30, r28
    1a68:	e0 5a       	subi	r30, 0xA0	; 160
    1a6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a6c:	10 82       	st	Z, r1
    1a6e:	fe 01       	movw	r30, r28
    1a70:	e0 5a       	subi	r30, 0xA0	; 160
    1a72:	ff 4f       	sbci	r31, 0xFF	; 255
    1a74:	80 81       	ld	r24, Z
    1a76:	fe 01       	movw	r30, r28
    1a78:	e1 5a       	subi	r30, 0xA1	; 161
    1a7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a7c:	80 83       	st	Z, r24
    1a7e:	fe 01       	movw	r30, r28
    1a80:	e1 5a       	subi	r30, 0xA1	; 161
    1a82:	ff 4f       	sbci	r31, 0xFF	; 255
    1a84:	80 81       	ld	r24, Z
    1a86:	8d af       	std	Y+61, r24	; 0x3d
    1a88:	fe 01       	movw	r30, r28
    1a8a:	ef 59       	subi	r30, 0x9F	; 159
    1a8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a8e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a90:	80 83       	st	Z, r24
    1a92:	fe 01       	movw	r30, r28
    1a94:	ef 59       	subi	r30, 0x9F	; 159
    1a96:	ff 4f       	sbci	r31, 0xFF	; 255
    1a98:	80 81       	ld	r24, Z
    1a9a:	8e af       	std	Y+62, r24	; 0x3e

				UART_receiveByte(&passwordLength1);
    1a9c:	ce 01       	movw	r24, r28
    1a9e:	81 5a       	subi	r24, 0xA1	; 161
    1aa0:	9f 4f       	sbci	r25, 0xFF	; 255
    1aa2:	0e 94 da 06 	call	0xdb4	; 0xdb4 <UART_receiveByte>
				passwordLength1-=48;		/*Because sending data added 48 to facilitate debugging*/
    1aa6:	fe 01       	movw	r30, r28
    1aa8:	e1 5a       	subi	r30, 0xA1	; 161
    1aaa:	ff 4f       	sbci	r31, 0xFF	; 255
    1aac:	80 81       	ld	r24, Z
    1aae:	80 53       	subi	r24, 0x30	; 48
    1ab0:	fe 01       	movw	r30, r28
    1ab2:	e1 5a       	subi	r30, 0xA1	; 161
    1ab4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab6:	80 83       	st	Z, r24
				UART_sendByte('#');	/*Send ACK to sync communication*/
    1ab8:	83 e2       	ldi	r24, 0x23	; 35
    1aba:	0e 94 c3 06 	call	0xd86	; 0xd86 <UART_sendByte>
				UART_receiveString(password1);
    1abe:	ce 01       	movw	r24, r28
    1ac0:	cf 96       	adiw	r24, 0x3f	; 63
    1ac2:	0e 94 26 07 	call	0xe4c	; 0xe4c <UART_receiveString>
				UART_receiveByte(&passwordLength2);
    1ac6:	ce 01       	movw	r24, r28
    1ac8:	80 5a       	subi	r24, 0xA0	; 160
    1aca:	9f 4f       	sbci	r25, 0xFF	; 255
    1acc:	0e 94 da 06 	call	0xdb4	; 0xdb4 <UART_receiveByte>
				passwordLength2-=48;		/*Because sending data added 48 to facilitate debugging*/
    1ad0:	fe 01       	movw	r30, r28
    1ad2:	e0 5a       	subi	r30, 0xA0	; 160
    1ad4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad6:	80 81       	ld	r24, Z
    1ad8:	80 53       	subi	r24, 0x30	; 48
    1ada:	fe 01       	movw	r30, r28
    1adc:	e0 5a       	subi	r30, 0xA0	; 160
    1ade:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae0:	80 83       	st	Z, r24
				UART_sendByte('#');	/*Send ACK to sync communication*/
    1ae2:	83 e2       	ldi	r24, 0x23	; 35
    1ae4:	0e 94 c3 06 	call	0xd86	; 0xd86 <UART_sendByte>
				UART_receiveString(password2);
    1ae8:	ce 01       	movw	r24, r28
    1aea:	81 5b       	subi	r24, 0xB1	; 177
    1aec:	9f 4f       	sbci	r25, 0xFF	; 255
    1aee:	0e 94 26 07 	call	0xe4c	; 0xe4c <UART_receiveString>

				/************Password validation**************/

				/*Check if both passwords have the same length*/
				if(passwordLength1 == passwordLength2)
    1af2:	fe 01       	movw	r30, r28
    1af4:	e1 5a       	subi	r30, 0xA1	; 161
    1af6:	ff 4f       	sbci	r31, 0xFF	; 255
    1af8:	90 81       	ld	r25, Z
    1afa:	fe 01       	movw	r30, r28
    1afc:	e0 5a       	subi	r30, 0xA0	; 160
    1afe:	ff 4f       	sbci	r31, 0xFF	; 255
    1b00:	80 81       	ld	r24, Z
    1b02:	98 17       	cp	r25, r24
    1b04:	09 f0       	breq	.+2      	; 0x1b08 <main+0x1da>
    1b06:	40 c1       	rjmp	.+640    	; 0x1d88 <main+0x45a>
				{
					for(uint8 i = 0; i < passwordLength1; ++i)
    1b08:	1c ae       	std	Y+60, r1	; 0x3c
    1b0a:	1e c0       	rjmp	.+60     	; 0x1b48 <main+0x21a>
					{
						if(password1[i] != password2[i])
    1b0c:	8c ad       	ldd	r24, Y+60	; 0x3c
    1b0e:	28 2f       	mov	r18, r24
    1b10:	30 e0       	ldi	r19, 0x00	; 0
    1b12:	ce 01       	movw	r24, r28
    1b14:	cf 96       	adiw	r24, 0x3f	; 63
    1b16:	fc 01       	movw	r30, r24
    1b18:	e2 0f       	add	r30, r18
    1b1a:	f3 1f       	adc	r31, r19
    1b1c:	40 81       	ld	r20, Z
    1b1e:	8c ad       	ldd	r24, Y+60	; 0x3c
    1b20:	28 2f       	mov	r18, r24
    1b22:	30 e0       	ldi	r19, 0x00	; 0
    1b24:	ce 01       	movw	r24, r28
    1b26:	81 5b       	subi	r24, 0xB1	; 177
    1b28:	9f 4f       	sbci	r25, 0xFF	; 255
    1b2a:	fc 01       	movw	r30, r24
    1b2c:	e2 0f       	add	r30, r18
    1b2e:	f3 1f       	adc	r31, r19
    1b30:	80 81       	ld	r24, Z
    1b32:	48 17       	cp	r20, r24
    1b34:	31 f0       	breq	.+12     	; 0x1b42 <main+0x214>
						{
							wrongPassword = 1;
    1b36:	81 e0       	ldi	r24, 0x01	; 1
    1b38:	8d af       	std	Y+61, r24	; 0x3d
							UART_sendByte('F');	/*Send Fail status because passwords are not identical*/
    1b3a:	86 e4       	ldi	r24, 0x46	; 70
    1b3c:	0e 94 c3 06 	call	0xd86	; 0xd86 <UART_sendByte>
    1b40:	0a c0       	rjmp	.+20     	; 0x1b56 <main+0x228>
				/************Password validation**************/

				/*Check if both passwords have the same length*/
				if(passwordLength1 == passwordLength2)
				{
					for(uint8 i = 0; i < passwordLength1; ++i)
    1b42:	8c ad       	ldd	r24, Y+60	; 0x3c
    1b44:	8f 5f       	subi	r24, 0xFF	; 255
    1b46:	8c af       	std	Y+60, r24	; 0x3c
    1b48:	fe 01       	movw	r30, r28
    1b4a:	e1 5a       	subi	r30, 0xA1	; 161
    1b4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b4e:	90 81       	ld	r25, Z
    1b50:	8c ad       	ldd	r24, Y+60	; 0x3c
    1b52:	89 17       	cp	r24, r25
    1b54:	d8 f2       	brcs	.-74     	; 0x1b0c <main+0x1de>
							wrongPassword = 1;
							UART_sendByte('F');	/*Send Fail status because passwords are not identical*/
							break;
						}
					}
					if(!wrongPassword)
    1b56:	8d ad       	ldd	r24, Y+61	; 0x3d
    1b58:	88 23       	and	r24, r24
    1b5a:	09 f0       	breq	.+2      	; 0x1b5e <main+0x230>
    1b5c:	18 c1       	rjmp	.+560    	; 0x1d8e <main+0x460>
					{
						/*Save password in EEPROM*/
						EEPROM_writeByte(PASSWORD_LENGTH_ADDRESS, passwordLength1);
    1b5e:	fe 01       	movw	r30, r28
    1b60:	e1 5a       	subi	r30, 0xA1	; 161
    1b62:	ff 4f       	sbci	r31, 0xFF	; 255
    1b64:	20 81       	ld	r18, Z
    1b66:	89 e0       	ldi	r24, 0x09	; 9
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    1b6a:	62 2f       	mov	r22, r18
    1b6c:	0e 94 91 0b 	call	0x1722	; 0x1722 <EEPROM_writeByte>
    1b70:	80 e0       	ldi	r24, 0x00	; 0
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	a0 e2       	ldi	r26, 0x20	; 32
    1b76:	b1 e4       	ldi	r27, 0x41	; 65
    1b78:	8d ab       	std	Y+53, r24	; 0x35
    1b7a:	9e ab       	std	Y+54, r25	; 0x36
    1b7c:	af ab       	std	Y+55, r26	; 0x37
    1b7e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b80:	6d a9       	ldd	r22, Y+53	; 0x35
    1b82:	7e a9       	ldd	r23, Y+54	; 0x36
    1b84:	8f a9       	ldd	r24, Y+55	; 0x37
    1b86:	98 ad       	ldd	r25, Y+56	; 0x38
    1b88:	20 e0       	ldi	r18, 0x00	; 0
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	4a ef       	ldi	r20, 0xFA	; 250
    1b8e:	54 e4       	ldi	r21, 0x44	; 68
    1b90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b94:	dc 01       	movw	r26, r24
    1b96:	cb 01       	movw	r24, r22
    1b98:	89 ab       	std	Y+49, r24	; 0x31
    1b9a:	9a ab       	std	Y+50, r25	; 0x32
    1b9c:	ab ab       	std	Y+51, r26	; 0x33
    1b9e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ba0:	69 a9       	ldd	r22, Y+49	; 0x31
    1ba2:	7a a9       	ldd	r23, Y+50	; 0x32
    1ba4:	8b a9       	ldd	r24, Y+51	; 0x33
    1ba6:	9c a9       	ldd	r25, Y+52	; 0x34
    1ba8:	20 e0       	ldi	r18, 0x00	; 0
    1baa:	30 e0       	ldi	r19, 0x00	; 0
    1bac:	40 e8       	ldi	r20, 0x80	; 128
    1bae:	5f e3       	ldi	r21, 0x3F	; 63
    1bb0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bb4:	88 23       	and	r24, r24
    1bb6:	2c f4       	brge	.+10     	; 0x1bc2 <main+0x294>
		__ticks = 1;
    1bb8:	81 e0       	ldi	r24, 0x01	; 1
    1bba:	90 e0       	ldi	r25, 0x00	; 0
    1bbc:	98 ab       	std	Y+48, r25	; 0x30
    1bbe:	8f a7       	std	Y+47, r24	; 0x2f
    1bc0:	3f c0       	rjmp	.+126    	; 0x1c40 <main+0x312>
	else if (__tmp > 65535)
    1bc2:	69 a9       	ldd	r22, Y+49	; 0x31
    1bc4:	7a a9       	ldd	r23, Y+50	; 0x32
    1bc6:	8b a9       	ldd	r24, Y+51	; 0x33
    1bc8:	9c a9       	ldd	r25, Y+52	; 0x34
    1bca:	20 e0       	ldi	r18, 0x00	; 0
    1bcc:	3f ef       	ldi	r19, 0xFF	; 255
    1bce:	4f e7       	ldi	r20, 0x7F	; 127
    1bd0:	57 e4       	ldi	r21, 0x47	; 71
    1bd2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bd6:	18 16       	cp	r1, r24
    1bd8:	4c f5       	brge	.+82     	; 0x1c2c <main+0x2fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bda:	6d a9       	ldd	r22, Y+53	; 0x35
    1bdc:	7e a9       	ldd	r23, Y+54	; 0x36
    1bde:	8f a9       	ldd	r24, Y+55	; 0x37
    1be0:	98 ad       	ldd	r25, Y+56	; 0x38
    1be2:	20 e0       	ldi	r18, 0x00	; 0
    1be4:	30 e0       	ldi	r19, 0x00	; 0
    1be6:	40 e2       	ldi	r20, 0x20	; 32
    1be8:	51 e4       	ldi	r21, 0x41	; 65
    1bea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bee:	dc 01       	movw	r26, r24
    1bf0:	cb 01       	movw	r24, r22
    1bf2:	bc 01       	movw	r22, r24
    1bf4:	cd 01       	movw	r24, r26
    1bf6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bfa:	dc 01       	movw	r26, r24
    1bfc:	cb 01       	movw	r24, r22
    1bfe:	98 ab       	std	Y+48, r25	; 0x30
    1c00:	8f a7       	std	Y+47, r24	; 0x2f
    1c02:	0f c0       	rjmp	.+30     	; 0x1c22 <main+0x2f4>
    1c04:	88 ec       	ldi	r24, 0xC8	; 200
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	9e a7       	std	Y+46, r25	; 0x2e
    1c0a:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c0c:	8d a5       	ldd	r24, Y+45	; 0x2d
    1c0e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1c10:	01 97       	sbiw	r24, 0x01	; 1
    1c12:	f1 f7       	brne	.-4      	; 0x1c10 <main+0x2e2>
    1c14:	9e a7       	std	Y+46, r25	; 0x2e
    1c16:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c18:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c1a:	98 a9       	ldd	r25, Y+48	; 0x30
    1c1c:	01 97       	sbiw	r24, 0x01	; 1
    1c1e:	98 ab       	std	Y+48, r25	; 0x30
    1c20:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c22:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c24:	98 a9       	ldd	r25, Y+48	; 0x30
    1c26:	00 97       	sbiw	r24, 0x00	; 0
    1c28:	69 f7       	brne	.-38     	; 0x1c04 <main+0x2d6>
    1c2a:	14 c0       	rjmp	.+40     	; 0x1c54 <main+0x326>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c2c:	69 a9       	ldd	r22, Y+49	; 0x31
    1c2e:	7a a9       	ldd	r23, Y+50	; 0x32
    1c30:	8b a9       	ldd	r24, Y+51	; 0x33
    1c32:	9c a9       	ldd	r25, Y+52	; 0x34
    1c34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c38:	dc 01       	movw	r26, r24
    1c3a:	cb 01       	movw	r24, r22
    1c3c:	98 ab       	std	Y+48, r25	; 0x30
    1c3e:	8f a7       	std	Y+47, r24	; 0x2f
    1c40:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c42:	98 a9       	ldd	r25, Y+48	; 0x30
    1c44:	9c a7       	std	Y+44, r25	; 0x2c
    1c46:	8b a7       	std	Y+43, r24	; 0x2b
    1c48:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c4a:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c4c:	01 97       	sbiw	r24, 0x01	; 1
    1c4e:	f1 f7       	brne	.-4      	; 0x1c4c <main+0x31e>
    1c50:	9c a7       	std	Y+44, r25	; 0x2c
    1c52:	8b a7       	std	Y+43, r24	; 0x2b
						_delay_ms(10);
						for(uint8 i = 0; i < passwordLength1; ++i)
    1c54:	1b ae       	std	Y+59, r1	; 0x3b
    1c56:	87 c0       	rjmp	.+270    	; 0x1d66 <main+0x438>
						{
							EEPROM_writeByte(START_ADDRESS_OF_PASSWORD+i, password1[i]);
    1c58:	8b ad       	ldd	r24, Y+59	; 0x3b
    1c5a:	88 2f       	mov	r24, r24
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	0a 96       	adiw	r24, 0x0a	; 10
    1c60:	ac 01       	movw	r20, r24
    1c62:	8b ad       	ldd	r24, Y+59	; 0x3b
    1c64:	28 2f       	mov	r18, r24
    1c66:	30 e0       	ldi	r19, 0x00	; 0
    1c68:	ce 01       	movw	r24, r28
    1c6a:	cf 96       	adiw	r24, 0x3f	; 63
    1c6c:	fc 01       	movw	r30, r24
    1c6e:	e2 0f       	add	r30, r18
    1c70:	f3 1f       	adc	r31, r19
    1c72:	20 81       	ld	r18, Z
    1c74:	ca 01       	movw	r24, r20
    1c76:	62 2f       	mov	r22, r18
    1c78:	0e 94 91 0b 	call	0x1722	; 0x1722 <EEPROM_writeByte>
    1c7c:	80 e0       	ldi	r24, 0x00	; 0
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	a0 e2       	ldi	r26, 0x20	; 32
    1c82:	b1 e4       	ldi	r27, 0x41	; 65
    1c84:	8f a3       	std	Y+39, r24	; 0x27
    1c86:	98 a7       	std	Y+40, r25	; 0x28
    1c88:	a9 a7       	std	Y+41, r26	; 0x29
    1c8a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c8c:	6f a1       	ldd	r22, Y+39	; 0x27
    1c8e:	78 a5       	ldd	r23, Y+40	; 0x28
    1c90:	89 a5       	ldd	r24, Y+41	; 0x29
    1c92:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c94:	20 e0       	ldi	r18, 0x00	; 0
    1c96:	30 e0       	ldi	r19, 0x00	; 0
    1c98:	4a ef       	ldi	r20, 0xFA	; 250
    1c9a:	54 e4       	ldi	r21, 0x44	; 68
    1c9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ca0:	dc 01       	movw	r26, r24
    1ca2:	cb 01       	movw	r24, r22
    1ca4:	8b a3       	std	Y+35, r24	; 0x23
    1ca6:	9c a3       	std	Y+36, r25	; 0x24
    1ca8:	ad a3       	std	Y+37, r26	; 0x25
    1caa:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1cac:	6b a1       	ldd	r22, Y+35	; 0x23
    1cae:	7c a1       	ldd	r23, Y+36	; 0x24
    1cb0:	8d a1       	ldd	r24, Y+37	; 0x25
    1cb2:	9e a1       	ldd	r25, Y+38	; 0x26
    1cb4:	20 e0       	ldi	r18, 0x00	; 0
    1cb6:	30 e0       	ldi	r19, 0x00	; 0
    1cb8:	40 e8       	ldi	r20, 0x80	; 128
    1cba:	5f e3       	ldi	r21, 0x3F	; 63
    1cbc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cc0:	88 23       	and	r24, r24
    1cc2:	2c f4       	brge	.+10     	; 0x1cce <main+0x3a0>
		__ticks = 1;
    1cc4:	81 e0       	ldi	r24, 0x01	; 1
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	9a a3       	std	Y+34, r25	; 0x22
    1cca:	89 a3       	std	Y+33, r24	; 0x21
    1ccc:	3f c0       	rjmp	.+126    	; 0x1d4c <main+0x41e>
	else if (__tmp > 65535)
    1cce:	6b a1       	ldd	r22, Y+35	; 0x23
    1cd0:	7c a1       	ldd	r23, Y+36	; 0x24
    1cd2:	8d a1       	ldd	r24, Y+37	; 0x25
    1cd4:	9e a1       	ldd	r25, Y+38	; 0x26
    1cd6:	20 e0       	ldi	r18, 0x00	; 0
    1cd8:	3f ef       	ldi	r19, 0xFF	; 255
    1cda:	4f e7       	ldi	r20, 0x7F	; 127
    1cdc:	57 e4       	ldi	r21, 0x47	; 71
    1cde:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ce2:	18 16       	cp	r1, r24
    1ce4:	4c f5       	brge	.+82     	; 0x1d38 <main+0x40a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ce6:	6f a1       	ldd	r22, Y+39	; 0x27
    1ce8:	78 a5       	ldd	r23, Y+40	; 0x28
    1cea:	89 a5       	ldd	r24, Y+41	; 0x29
    1cec:	9a a5       	ldd	r25, Y+42	; 0x2a
    1cee:	20 e0       	ldi	r18, 0x00	; 0
    1cf0:	30 e0       	ldi	r19, 0x00	; 0
    1cf2:	40 e2       	ldi	r20, 0x20	; 32
    1cf4:	51 e4       	ldi	r21, 0x41	; 65
    1cf6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cfa:	dc 01       	movw	r26, r24
    1cfc:	cb 01       	movw	r24, r22
    1cfe:	bc 01       	movw	r22, r24
    1d00:	cd 01       	movw	r24, r26
    1d02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d06:	dc 01       	movw	r26, r24
    1d08:	cb 01       	movw	r24, r22
    1d0a:	9a a3       	std	Y+34, r25	; 0x22
    1d0c:	89 a3       	std	Y+33, r24	; 0x21
    1d0e:	0f c0       	rjmp	.+30     	; 0x1d2e <main+0x400>
    1d10:	88 ec       	ldi	r24, 0xC8	; 200
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	98 a3       	std	Y+32, r25	; 0x20
    1d16:	8f 8f       	std	Y+31, r24	; 0x1f
    1d18:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d1a:	98 a1       	ldd	r25, Y+32	; 0x20
    1d1c:	01 97       	sbiw	r24, 0x01	; 1
    1d1e:	f1 f7       	brne	.-4      	; 0x1d1c <main+0x3ee>
    1d20:	98 a3       	std	Y+32, r25	; 0x20
    1d22:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d24:	89 a1       	ldd	r24, Y+33	; 0x21
    1d26:	9a a1       	ldd	r25, Y+34	; 0x22
    1d28:	01 97       	sbiw	r24, 0x01	; 1
    1d2a:	9a a3       	std	Y+34, r25	; 0x22
    1d2c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d2e:	89 a1       	ldd	r24, Y+33	; 0x21
    1d30:	9a a1       	ldd	r25, Y+34	; 0x22
    1d32:	00 97       	sbiw	r24, 0x00	; 0
    1d34:	69 f7       	brne	.-38     	; 0x1d10 <main+0x3e2>
    1d36:	14 c0       	rjmp	.+40     	; 0x1d60 <main+0x432>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d38:	6b a1       	ldd	r22, Y+35	; 0x23
    1d3a:	7c a1       	ldd	r23, Y+36	; 0x24
    1d3c:	8d a1       	ldd	r24, Y+37	; 0x25
    1d3e:	9e a1       	ldd	r25, Y+38	; 0x26
    1d40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d44:	dc 01       	movw	r26, r24
    1d46:	cb 01       	movw	r24, r22
    1d48:	9a a3       	std	Y+34, r25	; 0x22
    1d4a:	89 a3       	std	Y+33, r24	; 0x21
    1d4c:	89 a1       	ldd	r24, Y+33	; 0x21
    1d4e:	9a a1       	ldd	r25, Y+34	; 0x22
    1d50:	9e 8f       	std	Y+30, r25	; 0x1e
    1d52:	8d 8f       	std	Y+29, r24	; 0x1d
    1d54:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d56:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d58:	01 97       	sbiw	r24, 0x01	; 1
    1d5a:	f1 f7       	brne	.-4      	; 0x1d58 <main+0x42a>
    1d5c:	9e 8f       	std	Y+30, r25	; 0x1e
    1d5e:	8d 8f       	std	Y+29, r24	; 0x1d
					if(!wrongPassword)
					{
						/*Save password in EEPROM*/
						EEPROM_writeByte(PASSWORD_LENGTH_ADDRESS, passwordLength1);
						_delay_ms(10);
						for(uint8 i = 0; i < passwordLength1; ++i)
    1d60:	8b ad       	ldd	r24, Y+59	; 0x3b
    1d62:	8f 5f       	subi	r24, 0xFF	; 255
    1d64:	8b af       	std	Y+59, r24	; 0x3b
    1d66:	fe 01       	movw	r30, r28
    1d68:	e1 5a       	subi	r30, 0xA1	; 161
    1d6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d6c:	90 81       	ld	r25, Z
    1d6e:	8b ad       	ldd	r24, Y+59	; 0x3b
    1d70:	89 17       	cp	r24, r25
    1d72:	08 f4       	brcc	.+2      	; 0x1d76 <main+0x448>
    1d74:	71 cf       	rjmp	.-286    	; 0x1c58 <main+0x32a>
						{
							EEPROM_writeByte(START_ADDRESS_OF_PASSWORD+i, password1[i]);
							_delay_ms(10);
						}

						UART_sendByte('S'); /*Send Success status because passwords are identical*/
    1d76:	83 e5       	ldi	r24, 0x53	; 83
    1d78:	0e 94 c3 06 	call	0xd86	; 0xd86 <UART_sendByte>
						programState++;		/*Move to state 1*/
    1d7c:	80 91 7c 00 	lds	r24, 0x007C
    1d80:	8f 5f       	subi	r24, 0xFF	; 255
    1d82:	80 93 7c 00 	sts	0x007C, r24
    1d86:	03 c0       	rjmp	.+6      	; 0x1d8e <main+0x460>
					}

				}
				else
				{
					UART_sendByte('F');	/*Send Fail status because passwords are not identical*/
    1d88:	86 e4       	ldi	r24, 0x46	; 70
    1d8a:	0e 94 c3 06 	call	0xd86	; 0xd86 <UART_sendByte>
					/*Stay in the same state to receive passwords again*/
				}
				wrongPassword = 0;
    1d8e:	1d ae       	std	Y+61, r1	; 0x3d
    1d90:	53 ce       	rjmp	.-858    	; 0x1a38 <main+0x10a>

		case 1:
			{

				/*Receive the entered password from user and its length*/
				UART_receiveByte(&passwordLength2);
    1d92:	ce 01       	movw	r24, r28
    1d94:	80 5a       	subi	r24, 0xA0	; 160
    1d96:	9f 4f       	sbci	r25, 0xFF	; 255
    1d98:	0e 94 da 06 	call	0xdb4	; 0xdb4 <UART_receiveByte>
				passwordLength2-=48;		/*Because sending data added 48 to facilitate debugging*/
    1d9c:	fe 01       	movw	r30, r28
    1d9e:	e0 5a       	subi	r30, 0xA0	; 160
    1da0:	ff 4f       	sbci	r31, 0xFF	; 255
    1da2:	80 81       	ld	r24, Z
    1da4:	80 53       	subi	r24, 0x30	; 48
    1da6:	fe 01       	movw	r30, r28
    1da8:	e0 5a       	subi	r30, 0xA0	; 160
    1daa:	ff 4f       	sbci	r31, 0xFF	; 255
    1dac:	80 83       	st	Z, r24
				UART_sendByte('#');						/*Send ACK to sync communication*/
    1dae:	83 e2       	ldi	r24, 0x23	; 35
    1db0:	0e 94 c3 06 	call	0xd86	; 0xd86 <UART_sendByte>
				UART_receiveString(password2);
    1db4:	ce 01       	movw	r24, r28
    1db6:	81 5b       	subi	r24, 0xB1	; 177
    1db8:	9f 4f       	sbci	r25, 0xFF	; 255
    1dba:	0e 94 26 07 	call	0xe4c	; 0xe4c <UART_receiveString>


				/*Retrieve password form EEPROM*/
				EEPROM_readByte(PASSWORD_LENGTH_ADDRESS, &passwordLength1);
    1dbe:	9e 01       	movw	r18, r28
    1dc0:	21 5a       	subi	r18, 0xA1	; 161
    1dc2:	3f 4f       	sbci	r19, 0xFF	; 255
    1dc4:	89 e0       	ldi	r24, 0x09	; 9
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	b9 01       	movw	r22, r18
    1dca:	0e 94 cf 0b 	call	0x179e	; 0x179e <EEPROM_readByte>
				for(uint8 i = 0; i < passwordLength1; ++i)
    1dce:	1a ae       	std	Y+58, r1	; 0x3a
    1dd0:	14 c0       	rjmp	.+40     	; 0x1dfa <main+0x4cc>
				{
					EEPROM_readByte(START_ADDRESS_OF_PASSWORD+i, &password1[i]);
    1dd2:	8a ad       	ldd	r24, Y+58	; 0x3a
    1dd4:	88 2f       	mov	r24, r24
    1dd6:	90 e0       	ldi	r25, 0x00	; 0
    1dd8:	0a 96       	adiw	r24, 0x0a	; 10
    1dda:	ac 01       	movw	r20, r24
    1ddc:	8a ad       	ldd	r24, Y+58	; 0x3a
    1dde:	88 2f       	mov	r24, r24
    1de0:	90 e0       	ldi	r25, 0x00	; 0
    1de2:	9e 01       	movw	r18, r28
    1de4:	21 5c       	subi	r18, 0xC1	; 193
    1de6:	3f 4f       	sbci	r19, 0xFF	; 255
    1de8:	28 0f       	add	r18, r24
    1dea:	39 1f       	adc	r19, r25
    1dec:	ca 01       	movw	r24, r20
    1dee:	b9 01       	movw	r22, r18
    1df0:	0e 94 cf 0b 	call	0x179e	; 0x179e <EEPROM_readByte>
				UART_receiveString(password2);


				/*Retrieve password form EEPROM*/
				EEPROM_readByte(PASSWORD_LENGTH_ADDRESS, &passwordLength1);
				for(uint8 i = 0; i < passwordLength1; ++i)
    1df4:	8a ad       	ldd	r24, Y+58	; 0x3a
    1df6:	8f 5f       	subi	r24, 0xFF	; 255
    1df8:	8a af       	std	Y+58, r24	; 0x3a
    1dfa:	fe 01       	movw	r30, r28
    1dfc:	e1 5a       	subi	r30, 0xA1	; 161
    1dfe:	ff 4f       	sbci	r31, 0xFF	; 255
    1e00:	90 81       	ld	r25, Z
    1e02:	8a ad       	ldd	r24, Y+58	; 0x3a
    1e04:	89 17       	cp	r24, r25
    1e06:	28 f3       	brcs	.-54     	; 0x1dd2 <main+0x4a4>
					EEPROM_readByte(START_ADDRESS_OF_PASSWORD+i, &password1[i]);
				}


				/*Verify the entered password*/
				if(passwordLength1 == passwordLength2)
    1e08:	fe 01       	movw	r30, r28
    1e0a:	e1 5a       	subi	r30, 0xA1	; 161
    1e0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0e:	90 81       	ld	r25, Z
    1e10:	fe 01       	movw	r30, r28
    1e12:	e0 5a       	subi	r30, 0xA0	; 160
    1e14:	ff 4f       	sbci	r31, 0xFF	; 255
    1e16:	80 81       	ld	r24, Z
    1e18:	98 17       	cp	r25, r24
    1e1a:	09 f0       	breq	.+2      	; 0x1e1e <main+0x4f0>
    1e1c:	51 c1       	rjmp	.+674    	; 0x20c0 <main+0x792>
				{
					wrongPassword = 0;
    1e1e:	1d ae       	std	Y+61, r1	; 0x3d
					for(uint8 i = 0; i < passwordLength1; ++i)
    1e20:	19 ae       	std	Y+57, r1	; 0x39
    1e22:	33 c0       	rjmp	.+102    	; 0x1e8a <main+0x55c>
					{
						if(password1[i] != password2[i])
    1e24:	89 ad       	ldd	r24, Y+57	; 0x39
    1e26:	28 2f       	mov	r18, r24
    1e28:	30 e0       	ldi	r19, 0x00	; 0
    1e2a:	ce 01       	movw	r24, r28
    1e2c:	cf 96       	adiw	r24, 0x3f	; 63
    1e2e:	fc 01       	movw	r30, r24
    1e30:	e2 0f       	add	r30, r18
    1e32:	f3 1f       	adc	r31, r19
    1e34:	40 81       	ld	r20, Z
    1e36:	89 ad       	ldd	r24, Y+57	; 0x39
    1e38:	28 2f       	mov	r18, r24
    1e3a:	30 e0       	ldi	r19, 0x00	; 0
    1e3c:	ce 01       	movw	r24, r28
    1e3e:	81 5b       	subi	r24, 0xB1	; 177
    1e40:	9f 4f       	sbci	r25, 0xFF	; 255
    1e42:	fc 01       	movw	r30, r24
    1e44:	e2 0f       	add	r30, r18
    1e46:	f3 1f       	adc	r31, r19
    1e48:	80 81       	ld	r24, Z
    1e4a:	48 17       	cp	r20, r24
    1e4c:	d9 f0       	breq	.+54     	; 0x1e84 <main+0x556>
						{
							wrongPassword = 1;
    1e4e:	81 e0       	ldi	r24, 0x01	; 1
    1e50:	8d af       	std	Y+61, r24	; 0x3d
							wrongPasswordCount++;
    1e52:	8e ad       	ldd	r24, Y+62	; 0x3e
    1e54:	8f 5f       	subi	r24, 0xFF	; 255
    1e56:	8e af       	std	Y+62, r24	; 0x3e
							if(wrongPasswordCount == 3)
    1e58:	8e ad       	ldd	r24, Y+62	; 0x3e
    1e5a:	83 30       	cpi	r24, 0x03	; 3
    1e5c:	79 f4       	brne	.+30     	; 0x1e7c <main+0x54e>
							{
								//SET_BIT(PORTA, PC4);
								UART_sendByte('!'); /*Send Alarm status because the user entered 3 consecutive wrong passwords*/
    1e5e:	81 e2       	ldi	r24, 0x21	; 33
    1e60:	0e 94 c3 06 	call	0xd86	; 0xd86 <UART_sendByte>
								programState = 2;	/*Move to state 2(Empty state) till the lockdown time is out*/
    1e64:	82 e0       	ldi	r24, 0x02	; 2
    1e66:	80 93 7c 00 	sts	0x007C, r24
								TIMER0_OVF_interruptEnable(TIMER0_OVF_ISR); /*Carrys out the delay logic and toggles the buzzer*/
    1e6a:	89 e7       	ldi	r24, 0x79	; 121
    1e6c:	90 e1       	ldi	r25, 0x10	; 16
    1e6e:	0e 94 9f 09 	call	0x133e	; 0x133e <TIMER0_OVF_interruptEnable>
								TIMER0_OVF_start(0); /*Start timer*/
    1e72:	80 e0       	ldi	r24, 0x00	; 0
    1e74:	0e 94 77 09 	call	0x12ee	; 0x12ee <TIMER0_OVF_start>

								wrongPasswordCount = 0;
    1e78:	1e ae       	std	Y+62, r1	; 0x3e
    1e7a:	0e c0       	rjmp	.+28     	; 0x1e98 <main+0x56a>
								/*Stay in state 1*/
							}
							else
							{
								UART_sendByte('X');	/*Send Wrong password status Entered password is wrong*/
    1e7c:	88 e5       	ldi	r24, 0x58	; 88
    1e7e:	0e 94 c3 06 	call	0xd86	; 0xd86 <UART_sendByte>
    1e82:	0a c0       	rjmp	.+20     	; 0x1e98 <main+0x56a>

				/*Verify the entered password*/
				if(passwordLength1 == passwordLength2)
				{
					wrongPassword = 0;
					for(uint8 i = 0; i < passwordLength1; ++i)
    1e84:	89 ad       	ldd	r24, Y+57	; 0x39
    1e86:	8f 5f       	subi	r24, 0xFF	; 255
    1e88:	89 af       	std	Y+57, r24	; 0x39
    1e8a:	fe 01       	movw	r30, r28
    1e8c:	e1 5a       	subi	r30, 0xA1	; 161
    1e8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e90:	90 81       	ld	r25, Z
    1e92:	89 ad       	ldd	r24, Y+57	; 0x39
    1e94:	89 17       	cp	r24, r25
    1e96:	30 f2       	brcs	.-116    	; 0x1e24 <main+0x4f6>

							}
							break;
						}
					}
					if(!wrongPassword)
    1e98:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e9a:	88 23       	and	r24, r24
    1e9c:	09 f0       	breq	.+2      	; 0x1ea0 <main+0x572>
    1e9e:	cc cd       	rjmp	.-1128   	; 0x1a38 <main+0x10a>
					{
						UART_sendByte('P'); /*Send Pass status because passwords are identical*/
    1ea0:	80 e5       	ldi	r24, 0x50	; 80
    1ea2:	0e 94 c3 06 	call	0xd86	; 0xd86 <UART_sendByte>

						UART_receiveByte(&action); 	/*Get user action (+)=> open door (-)=> change password*/
    1ea6:	ce 01       	movw	r24, r28
    1ea8:	8f 59       	subi	r24, 0x9F	; 159
    1eaa:	9f 4f       	sbci	r25, 0xFF	; 255
    1eac:	0e 94 da 06 	call	0xdb4	; 0xdb4 <UART_receiveByte>
						if(action == '+')
    1eb0:	fe 01       	movw	r30, r28
    1eb2:	ef 59       	subi	r30, 0x9F	; 159
    1eb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb6:	80 81       	ld	r24, Z
    1eb8:	8b 32       	cpi	r24, 0x2B	; 43
    1eba:	09 f0       	breq	.+2      	; 0x1ebe <main+0x590>
    1ebc:	f7 c0       	rjmp	.+494    	; 0x20ac <main+0x77e>
						{
							/****************Open Door***************/
							DC_MOTOR_rotateCW();
    1ebe:	0e 94 4a 0c 	call	0x1894	; 0x1894 <DC_MOTOR_rotateCW>
							SET_BIT(PORTC, PC4);	/*Produce some sound*/
    1ec2:	a5 e3       	ldi	r26, 0x35	; 53
    1ec4:	b0 e0       	ldi	r27, 0x00	; 0
    1ec6:	e5 e3       	ldi	r30, 0x35	; 53
    1ec8:	f0 e0       	ldi	r31, 0x00	; 0
    1eca:	80 81       	ld	r24, Z
    1ecc:	80 61       	ori	r24, 0x10	; 16
    1ece:	8c 93       	st	X, r24
    1ed0:	80 e0       	ldi	r24, 0x00	; 0
    1ed2:	90 e0       	ldi	r25, 0x00	; 0
    1ed4:	aa ef       	ldi	r26, 0xFA	; 250
    1ed6:	b4 e4       	ldi	r27, 0x44	; 68
    1ed8:	89 8f       	std	Y+25, r24	; 0x19
    1eda:	9a 8f       	std	Y+26, r25	; 0x1a
    1edc:	ab 8f       	std	Y+27, r26	; 0x1b
    1ede:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ee0:	69 8d       	ldd	r22, Y+25	; 0x19
    1ee2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ee4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ee6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ee8:	20 e0       	ldi	r18, 0x00	; 0
    1eea:	30 e0       	ldi	r19, 0x00	; 0
    1eec:	4a ef       	ldi	r20, 0xFA	; 250
    1eee:	54 e4       	ldi	r21, 0x44	; 68
    1ef0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ef4:	dc 01       	movw	r26, r24
    1ef6:	cb 01       	movw	r24, r22
    1ef8:	8d 8b       	std	Y+21, r24	; 0x15
    1efa:	9e 8b       	std	Y+22, r25	; 0x16
    1efc:	af 8b       	std	Y+23, r26	; 0x17
    1efe:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f00:	6d 89       	ldd	r22, Y+21	; 0x15
    1f02:	7e 89       	ldd	r23, Y+22	; 0x16
    1f04:	8f 89       	ldd	r24, Y+23	; 0x17
    1f06:	98 8d       	ldd	r25, Y+24	; 0x18
    1f08:	20 e0       	ldi	r18, 0x00	; 0
    1f0a:	30 e0       	ldi	r19, 0x00	; 0
    1f0c:	40 e8       	ldi	r20, 0x80	; 128
    1f0e:	5f e3       	ldi	r21, 0x3F	; 63
    1f10:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f14:	88 23       	and	r24, r24
    1f16:	2c f4       	brge	.+10     	; 0x1f22 <main+0x5f4>
		__ticks = 1;
    1f18:	81 e0       	ldi	r24, 0x01	; 1
    1f1a:	90 e0       	ldi	r25, 0x00	; 0
    1f1c:	9c 8b       	std	Y+20, r25	; 0x14
    1f1e:	8b 8b       	std	Y+19, r24	; 0x13
    1f20:	3f c0       	rjmp	.+126    	; 0x1fa0 <main+0x672>
	else if (__tmp > 65535)
    1f22:	6d 89       	ldd	r22, Y+21	; 0x15
    1f24:	7e 89       	ldd	r23, Y+22	; 0x16
    1f26:	8f 89       	ldd	r24, Y+23	; 0x17
    1f28:	98 8d       	ldd	r25, Y+24	; 0x18
    1f2a:	20 e0       	ldi	r18, 0x00	; 0
    1f2c:	3f ef       	ldi	r19, 0xFF	; 255
    1f2e:	4f e7       	ldi	r20, 0x7F	; 127
    1f30:	57 e4       	ldi	r21, 0x47	; 71
    1f32:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f36:	18 16       	cp	r1, r24
    1f38:	4c f5       	brge	.+82     	; 0x1f8c <main+0x65e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f3a:	69 8d       	ldd	r22, Y+25	; 0x19
    1f3c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f3e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f40:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f42:	20 e0       	ldi	r18, 0x00	; 0
    1f44:	30 e0       	ldi	r19, 0x00	; 0
    1f46:	40 e2       	ldi	r20, 0x20	; 32
    1f48:	51 e4       	ldi	r21, 0x41	; 65
    1f4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f4e:	dc 01       	movw	r26, r24
    1f50:	cb 01       	movw	r24, r22
    1f52:	bc 01       	movw	r22, r24
    1f54:	cd 01       	movw	r24, r26
    1f56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f5a:	dc 01       	movw	r26, r24
    1f5c:	cb 01       	movw	r24, r22
    1f5e:	9c 8b       	std	Y+20, r25	; 0x14
    1f60:	8b 8b       	std	Y+19, r24	; 0x13
    1f62:	0f c0       	rjmp	.+30     	; 0x1f82 <main+0x654>
    1f64:	88 ec       	ldi	r24, 0xC8	; 200
    1f66:	90 e0       	ldi	r25, 0x00	; 0
    1f68:	9a 8b       	std	Y+18, r25	; 0x12
    1f6a:	89 8b       	std	Y+17, r24	; 0x11
    1f6c:	89 89       	ldd	r24, Y+17	; 0x11
    1f6e:	9a 89       	ldd	r25, Y+18	; 0x12
    1f70:	01 97       	sbiw	r24, 0x01	; 1
    1f72:	f1 f7       	brne	.-4      	; 0x1f70 <main+0x642>
    1f74:	9a 8b       	std	Y+18, r25	; 0x12
    1f76:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f78:	8b 89       	ldd	r24, Y+19	; 0x13
    1f7a:	9c 89       	ldd	r25, Y+20	; 0x14
    1f7c:	01 97       	sbiw	r24, 0x01	; 1
    1f7e:	9c 8b       	std	Y+20, r25	; 0x14
    1f80:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f82:	8b 89       	ldd	r24, Y+19	; 0x13
    1f84:	9c 89       	ldd	r25, Y+20	; 0x14
    1f86:	00 97       	sbiw	r24, 0x00	; 0
    1f88:	69 f7       	brne	.-38     	; 0x1f64 <main+0x636>
    1f8a:	14 c0       	rjmp	.+40     	; 0x1fb4 <main+0x686>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f8c:	6d 89       	ldd	r22, Y+21	; 0x15
    1f8e:	7e 89       	ldd	r23, Y+22	; 0x16
    1f90:	8f 89       	ldd	r24, Y+23	; 0x17
    1f92:	98 8d       	ldd	r25, Y+24	; 0x18
    1f94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f98:	dc 01       	movw	r26, r24
    1f9a:	cb 01       	movw	r24, r22
    1f9c:	9c 8b       	std	Y+20, r25	; 0x14
    1f9e:	8b 8b       	std	Y+19, r24	; 0x13
    1fa0:	8b 89       	ldd	r24, Y+19	; 0x13
    1fa2:	9c 89       	ldd	r25, Y+20	; 0x14
    1fa4:	98 8b       	std	Y+16, r25	; 0x10
    1fa6:	8f 87       	std	Y+15, r24	; 0x0f
    1fa8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1faa:	98 89       	ldd	r25, Y+16	; 0x10
    1fac:	01 97       	sbiw	r24, 0x01	; 1
    1fae:	f1 f7       	brne	.-4      	; 0x1fac <main+0x67e>
    1fb0:	98 8b       	std	Y+16, r25	; 0x10
    1fb2:	8f 87       	std	Y+15, r24	; 0x0f
							_delay_ms(2000);
							CLEAR_BIT(PORTC, PC4);
    1fb4:	a5 e3       	ldi	r26, 0x35	; 53
    1fb6:	b0 e0       	ldi	r27, 0x00	; 0
    1fb8:	e5 e3       	ldi	r30, 0x35	; 53
    1fba:	f0 e0       	ldi	r31, 0x00	; 0
    1fbc:	80 81       	ld	r24, Z
    1fbe:	8f 7e       	andi	r24, 0xEF	; 239
    1fc0:	8c 93       	st	X, r24
    1fc2:	80 e0       	ldi	r24, 0x00	; 0
    1fc4:	90 e0       	ldi	r25, 0x00	; 0
    1fc6:	aa e7       	ldi	r26, 0x7A	; 122
    1fc8:	b5 e4       	ldi	r27, 0x45	; 69
    1fca:	8b 87       	std	Y+11, r24	; 0x0b
    1fcc:	9c 87       	std	Y+12, r25	; 0x0c
    1fce:	ad 87       	std	Y+13, r26	; 0x0d
    1fd0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fd2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fd4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fd6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fd8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fda:	20 e0       	ldi	r18, 0x00	; 0
    1fdc:	30 e0       	ldi	r19, 0x00	; 0
    1fde:	4a ef       	ldi	r20, 0xFA	; 250
    1fe0:	54 e4       	ldi	r21, 0x44	; 68
    1fe2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fe6:	dc 01       	movw	r26, r24
    1fe8:	cb 01       	movw	r24, r22
    1fea:	8f 83       	std	Y+7, r24	; 0x07
    1fec:	98 87       	std	Y+8, r25	; 0x08
    1fee:	a9 87       	std	Y+9, r26	; 0x09
    1ff0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ff2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ff4:	78 85       	ldd	r23, Y+8	; 0x08
    1ff6:	89 85       	ldd	r24, Y+9	; 0x09
    1ff8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ffa:	20 e0       	ldi	r18, 0x00	; 0
    1ffc:	30 e0       	ldi	r19, 0x00	; 0
    1ffe:	40 e8       	ldi	r20, 0x80	; 128
    2000:	5f e3       	ldi	r21, 0x3F	; 63
    2002:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2006:	88 23       	and	r24, r24
    2008:	2c f4       	brge	.+10     	; 0x2014 <main+0x6e6>
		__ticks = 1;
    200a:	81 e0       	ldi	r24, 0x01	; 1
    200c:	90 e0       	ldi	r25, 0x00	; 0
    200e:	9e 83       	std	Y+6, r25	; 0x06
    2010:	8d 83       	std	Y+5, r24	; 0x05
    2012:	3f c0       	rjmp	.+126    	; 0x2092 <main+0x764>
	else if (__tmp > 65535)
    2014:	6f 81       	ldd	r22, Y+7	; 0x07
    2016:	78 85       	ldd	r23, Y+8	; 0x08
    2018:	89 85       	ldd	r24, Y+9	; 0x09
    201a:	9a 85       	ldd	r25, Y+10	; 0x0a
    201c:	20 e0       	ldi	r18, 0x00	; 0
    201e:	3f ef       	ldi	r19, 0xFF	; 255
    2020:	4f e7       	ldi	r20, 0x7F	; 127
    2022:	57 e4       	ldi	r21, 0x47	; 71
    2024:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2028:	18 16       	cp	r1, r24
    202a:	4c f5       	brge	.+82     	; 0x207e <main+0x750>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    202c:	6b 85       	ldd	r22, Y+11	; 0x0b
    202e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2030:	8d 85       	ldd	r24, Y+13	; 0x0d
    2032:	9e 85       	ldd	r25, Y+14	; 0x0e
    2034:	20 e0       	ldi	r18, 0x00	; 0
    2036:	30 e0       	ldi	r19, 0x00	; 0
    2038:	40 e2       	ldi	r20, 0x20	; 32
    203a:	51 e4       	ldi	r21, 0x41	; 65
    203c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2040:	dc 01       	movw	r26, r24
    2042:	cb 01       	movw	r24, r22
    2044:	bc 01       	movw	r22, r24
    2046:	cd 01       	movw	r24, r26
    2048:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    204c:	dc 01       	movw	r26, r24
    204e:	cb 01       	movw	r24, r22
    2050:	9e 83       	std	Y+6, r25	; 0x06
    2052:	8d 83       	std	Y+5, r24	; 0x05
    2054:	0f c0       	rjmp	.+30     	; 0x2074 <main+0x746>
    2056:	88 ec       	ldi	r24, 0xC8	; 200
    2058:	90 e0       	ldi	r25, 0x00	; 0
    205a:	9c 83       	std	Y+4, r25	; 0x04
    205c:	8b 83       	std	Y+3, r24	; 0x03
    205e:	8b 81       	ldd	r24, Y+3	; 0x03
    2060:	9c 81       	ldd	r25, Y+4	; 0x04
    2062:	01 97       	sbiw	r24, 0x01	; 1
    2064:	f1 f7       	brne	.-4      	; 0x2062 <main+0x734>
    2066:	9c 83       	std	Y+4, r25	; 0x04
    2068:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    206a:	8d 81       	ldd	r24, Y+5	; 0x05
    206c:	9e 81       	ldd	r25, Y+6	; 0x06
    206e:	01 97       	sbiw	r24, 0x01	; 1
    2070:	9e 83       	std	Y+6, r25	; 0x06
    2072:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2074:	8d 81       	ldd	r24, Y+5	; 0x05
    2076:	9e 81       	ldd	r25, Y+6	; 0x06
    2078:	00 97       	sbiw	r24, 0x00	; 0
    207a:	69 f7       	brne	.-38     	; 0x2056 <main+0x728>
    207c:	14 c0       	rjmp	.+40     	; 0x20a6 <main+0x778>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    207e:	6f 81       	ldd	r22, Y+7	; 0x07
    2080:	78 85       	ldd	r23, Y+8	; 0x08
    2082:	89 85       	ldd	r24, Y+9	; 0x09
    2084:	9a 85       	ldd	r25, Y+10	; 0x0a
    2086:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    208a:	dc 01       	movw	r26, r24
    208c:	cb 01       	movw	r24, r22
    208e:	9e 83       	std	Y+6, r25	; 0x06
    2090:	8d 83       	std	Y+5, r24	; 0x05
    2092:	8d 81       	ldd	r24, Y+5	; 0x05
    2094:	9e 81       	ldd	r25, Y+6	; 0x06
    2096:	9a 83       	std	Y+2, r25	; 0x02
    2098:	89 83       	std	Y+1, r24	; 0x01
    209a:	89 81       	ldd	r24, Y+1	; 0x01
    209c:	9a 81       	ldd	r25, Y+2	; 0x02
    209e:	01 97       	sbiw	r24, 0x01	; 1
    20a0:	f1 f7       	brne	.-4      	; 0x209e <main+0x770>
    20a2:	9a 83       	std	Y+2, r25	; 0x02
    20a4:	89 83       	std	Y+1, r24	; 0x01
							_delay_ms(4000);
							DC_MOTOR_stop();
    20a6:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <DC_MOTOR_stop>
    20aa:	08 c0       	rjmp	.+16     	; 0x20bc <main+0x78e>
						}
						else if(action == '-')
    20ac:	fe 01       	movw	r30, r28
    20ae:	ef 59       	subi	r30, 0x9F	; 159
    20b0:	ff 4f       	sbci	r31, 0xFF	; 255
    20b2:	80 81       	ld	r24, Z
    20b4:	8d 32       	cpi	r24, 0x2D	; 45
    20b6:	11 f4       	brne	.+4      	; 0x20bc <main+0x78e>
						{
							/*************Change password************/
							/*Move to state 0 which does the same logic*/

							programState = 0;
    20b8:	10 92 7c 00 	sts	0x007C, r1
						}

						wrongPasswordCount = 0; /*Clear wrong passwords count*/
    20bc:	1e ae       	std	Y+62, r1	; 0x3e
    20be:	bc cc       	rjmp	.-1672   	; 0x1a38 <main+0x10a>
					}

				}
				else
				{
					wrongPasswordCount++;
    20c0:	8e ad       	ldd	r24, Y+62	; 0x3e
    20c2:	8f 5f       	subi	r24, 0xFF	; 255
    20c4:	8e af       	std	Y+62, r24	; 0x3e
					if(wrongPasswordCount == 3)
    20c6:	8e ad       	ldd	r24, Y+62	; 0x3e
    20c8:	83 30       	cpi	r24, 0x03	; 3
    20ca:	79 f4       	brne	.+30     	; 0x20ea <main+0x7bc>
					{
						UART_sendByte('!'); /*Send Alarm status because the user entered 3 consecutive wrong passwords*/
    20cc:	81 e2       	ldi	r24, 0x21	; 33
    20ce:	0e 94 c3 06 	call	0xd86	; 0xd86 <UART_sendByte>
						programState = 2;	/*Move to state 2(Empty state) till the lockdown time is out*/
    20d2:	82 e0       	ldi	r24, 0x02	; 2
    20d4:	80 93 7c 00 	sts	0x007C, r24
						TIMER0_OVF_interruptEnable(TIMER0_OVF_ISR); /*Carrys out the delay logic and toggles the buzzer*/
    20d8:	89 e7       	ldi	r24, 0x79	; 121
    20da:	90 e1       	ldi	r25, 0x10	; 16
    20dc:	0e 94 9f 09 	call	0x133e	; 0x133e <TIMER0_OVF_interruptEnable>
						TIMER0_OVF_start(0); /*Start timer*/
    20e0:	80 e0       	ldi	r24, 0x00	; 0
    20e2:	0e 94 77 09 	call	0x12ee	; 0x12ee <TIMER0_OVF_start>

						wrongPasswordCount = 0;
    20e6:	1e ae       	std	Y+62, r1	; 0x3e
    20e8:	a7 cc       	rjmp	.-1714   	; 0x1a38 <main+0x10a>
						/*Stay in state 1*/
					}
					else
					{
						UART_sendByte('X');	/*Send Wrong password status Entered password is wrong*/
    20ea:	88 e5       	ldi	r24, 0x58	; 88
    20ec:	0e 94 c3 06 	call	0xd86	; 0xd86 <UART_sendByte>
    20f0:	a3 cc       	rjmp	.-1722   	; 0x1a38 <main+0x10a>

000020f2 <TIMER0_OVF_ISR>:

	/*********************************************************************
							 Functions definitions
	 ********************************************************************/
	void TIMER0_OVF_ISR(void)
	{
    20f2:	df 93       	push	r29
    20f4:	cf 93       	push	r28
    20f6:	cd b7       	in	r28, 0x3d	; 61
    20f8:	de b7       	in	r29, 0x3e	; 62
		if(tick == 1000)
    20fa:	80 91 7a 00 	lds	r24, 0x007A
    20fe:	90 91 7b 00 	lds	r25, 0x007B
    2102:	23 e0       	ldi	r18, 0x03	; 3
    2104:	88 3e       	cpi	r24, 0xE8	; 232
    2106:	92 07       	cpc	r25, r18
    2108:	89 f4       	brne	.+34     	; 0x212c <TIMER0_OVF_ISR+0x3a>
		{
			TIMER0_OVF_stop();		/*Stop timer*/
    210a:	0e 94 69 09 	call	0x12d2	; 0x12d2 <TIMER0_OVF_stop>
			SET_BIT(PORTA, PA4);	/*Stop buzzer*/
    210e:	ab e3       	ldi	r26, 0x3B	; 59
    2110:	b0 e0       	ldi	r27, 0x00	; 0
    2112:	eb e3       	ldi	r30, 0x3B	; 59
    2114:	f0 e0       	ldi	r31, 0x00	; 0
    2116:	80 81       	ld	r24, Z
    2118:	80 61       	ori	r24, 0x10	; 16
    211a:	8c 93       	st	X, r24
			programState = 1;		/*Back to program*/
    211c:	81 e0       	ldi	r24, 0x01	; 1
    211e:	80 93 7c 00 	sts	0x007C, r24
			tick = 0;				/*re-initialize tick variable*/
    2122:	10 92 7b 00 	sts	0x007B, r1
    2126:	10 92 7a 00 	sts	0x007A, r1
    212a:	1c c0       	rjmp	.+56     	; 0x2164 <TIMER0_OVF_ISR+0x72>
		}
		else
		{
			if(tick % 10 == 0)
    212c:	80 91 7a 00 	lds	r24, 0x007A
    2130:	90 91 7b 00 	lds	r25, 0x007B
    2134:	2a e0       	ldi	r18, 0x0A	; 10
    2136:	30 e0       	ldi	r19, 0x00	; 0
    2138:	b9 01       	movw	r22, r18
    213a:	0e 94 b5 10 	call	0x216a	; 0x216a <__udivmodhi4>
    213e:	00 97       	sbiw	r24, 0x00	; 0
    2140:	41 f4       	brne	.+16     	; 0x2152 <TIMER0_OVF_ISR+0x60>
				TOGGLE_BIT(PORTA, PA4); 	/*Toggle buzzer*/
    2142:	ab e3       	ldi	r26, 0x3B	; 59
    2144:	b0 e0       	ldi	r27, 0x00	; 0
    2146:	eb e3       	ldi	r30, 0x3B	; 59
    2148:	f0 e0       	ldi	r31, 0x00	; 0
    214a:	90 81       	ld	r25, Z
    214c:	80 e1       	ldi	r24, 0x10	; 16
    214e:	89 27       	eor	r24, r25
    2150:	8c 93       	st	X, r24
			tick++;
    2152:	80 91 7a 00 	lds	r24, 0x007A
    2156:	90 91 7b 00 	lds	r25, 0x007B
    215a:	01 96       	adiw	r24, 0x01	; 1
    215c:	90 93 7b 00 	sts	0x007B, r25
    2160:	80 93 7a 00 	sts	0x007A, r24
		}
	}
    2164:	cf 91       	pop	r28
    2166:	df 91       	pop	r29
    2168:	08 95       	ret

0000216a <__udivmodhi4>:
    216a:	aa 1b       	sub	r26, r26
    216c:	bb 1b       	sub	r27, r27
    216e:	51 e1       	ldi	r21, 0x11	; 17
    2170:	07 c0       	rjmp	.+14     	; 0x2180 <__udivmodhi4_ep>

00002172 <__udivmodhi4_loop>:
    2172:	aa 1f       	adc	r26, r26
    2174:	bb 1f       	adc	r27, r27
    2176:	a6 17       	cp	r26, r22
    2178:	b7 07       	cpc	r27, r23
    217a:	10 f0       	brcs	.+4      	; 0x2180 <__udivmodhi4_ep>
    217c:	a6 1b       	sub	r26, r22
    217e:	b7 0b       	sbc	r27, r23

00002180 <__udivmodhi4_ep>:
    2180:	88 1f       	adc	r24, r24
    2182:	99 1f       	adc	r25, r25
    2184:	5a 95       	dec	r21
    2186:	a9 f7       	brne	.-22     	; 0x2172 <__udivmodhi4_loop>
    2188:	80 95       	com	r24
    218a:	90 95       	com	r25
    218c:	bc 01       	movw	r22, r24
    218e:	cd 01       	movw	r24, r26
    2190:	08 95       	ret

00002192 <__divmodhi4>:
    2192:	97 fb       	bst	r25, 7
    2194:	09 2e       	mov	r0, r25
    2196:	07 26       	eor	r0, r23
    2198:	0a d0       	rcall	.+20     	; 0x21ae <__divmodhi4_neg1>
    219a:	77 fd       	sbrc	r23, 7
    219c:	04 d0       	rcall	.+8      	; 0x21a6 <__divmodhi4_neg2>
    219e:	e5 df       	rcall	.-54     	; 0x216a <__udivmodhi4>
    21a0:	06 d0       	rcall	.+12     	; 0x21ae <__divmodhi4_neg1>
    21a2:	00 20       	and	r0, r0
    21a4:	1a f4       	brpl	.+6      	; 0x21ac <__divmodhi4_exit>

000021a6 <__divmodhi4_neg2>:
    21a6:	70 95       	com	r23
    21a8:	61 95       	neg	r22
    21aa:	7f 4f       	sbci	r23, 0xFF	; 255

000021ac <__divmodhi4_exit>:
    21ac:	08 95       	ret

000021ae <__divmodhi4_neg1>:
    21ae:	f6 f7       	brtc	.-4      	; 0x21ac <__divmodhi4_exit>
    21b0:	90 95       	com	r25
    21b2:	81 95       	neg	r24
    21b4:	9f 4f       	sbci	r25, 0xFF	; 255
    21b6:	08 95       	ret

000021b8 <__udivmodsi4>:
    21b8:	a1 e2       	ldi	r26, 0x21	; 33
    21ba:	1a 2e       	mov	r1, r26
    21bc:	aa 1b       	sub	r26, r26
    21be:	bb 1b       	sub	r27, r27
    21c0:	fd 01       	movw	r30, r26
    21c2:	0d c0       	rjmp	.+26     	; 0x21de <__udivmodsi4_ep>

000021c4 <__udivmodsi4_loop>:
    21c4:	aa 1f       	adc	r26, r26
    21c6:	bb 1f       	adc	r27, r27
    21c8:	ee 1f       	adc	r30, r30
    21ca:	ff 1f       	adc	r31, r31
    21cc:	a2 17       	cp	r26, r18
    21ce:	b3 07       	cpc	r27, r19
    21d0:	e4 07       	cpc	r30, r20
    21d2:	f5 07       	cpc	r31, r21
    21d4:	20 f0       	brcs	.+8      	; 0x21de <__udivmodsi4_ep>
    21d6:	a2 1b       	sub	r26, r18
    21d8:	b3 0b       	sbc	r27, r19
    21da:	e4 0b       	sbc	r30, r20
    21dc:	f5 0b       	sbc	r31, r21

000021de <__udivmodsi4_ep>:
    21de:	66 1f       	adc	r22, r22
    21e0:	77 1f       	adc	r23, r23
    21e2:	88 1f       	adc	r24, r24
    21e4:	99 1f       	adc	r25, r25
    21e6:	1a 94       	dec	r1
    21e8:	69 f7       	brne	.-38     	; 0x21c4 <__udivmodsi4_loop>
    21ea:	60 95       	com	r22
    21ec:	70 95       	com	r23
    21ee:	80 95       	com	r24
    21f0:	90 95       	com	r25
    21f2:	9b 01       	movw	r18, r22
    21f4:	ac 01       	movw	r20, r24
    21f6:	bd 01       	movw	r22, r26
    21f8:	cf 01       	movw	r24, r30
    21fa:	08 95       	ret

000021fc <__prologue_saves__>:
    21fc:	2f 92       	push	r2
    21fe:	3f 92       	push	r3
    2200:	4f 92       	push	r4
    2202:	5f 92       	push	r5
    2204:	6f 92       	push	r6
    2206:	7f 92       	push	r7
    2208:	8f 92       	push	r8
    220a:	9f 92       	push	r9
    220c:	af 92       	push	r10
    220e:	bf 92       	push	r11
    2210:	cf 92       	push	r12
    2212:	df 92       	push	r13
    2214:	ef 92       	push	r14
    2216:	ff 92       	push	r15
    2218:	0f 93       	push	r16
    221a:	1f 93       	push	r17
    221c:	cf 93       	push	r28
    221e:	df 93       	push	r29
    2220:	cd b7       	in	r28, 0x3d	; 61
    2222:	de b7       	in	r29, 0x3e	; 62
    2224:	ca 1b       	sub	r28, r26
    2226:	db 0b       	sbc	r29, r27
    2228:	0f b6       	in	r0, 0x3f	; 63
    222a:	f8 94       	cli
    222c:	de bf       	out	0x3e, r29	; 62
    222e:	0f be       	out	0x3f, r0	; 63
    2230:	cd bf       	out	0x3d, r28	; 61
    2232:	09 94       	ijmp

00002234 <__epilogue_restores__>:
    2234:	2a 88       	ldd	r2, Y+18	; 0x12
    2236:	39 88       	ldd	r3, Y+17	; 0x11
    2238:	48 88       	ldd	r4, Y+16	; 0x10
    223a:	5f 84       	ldd	r5, Y+15	; 0x0f
    223c:	6e 84       	ldd	r6, Y+14	; 0x0e
    223e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2240:	8c 84       	ldd	r8, Y+12	; 0x0c
    2242:	9b 84       	ldd	r9, Y+11	; 0x0b
    2244:	aa 84       	ldd	r10, Y+10	; 0x0a
    2246:	b9 84       	ldd	r11, Y+9	; 0x09
    2248:	c8 84       	ldd	r12, Y+8	; 0x08
    224a:	df 80       	ldd	r13, Y+7	; 0x07
    224c:	ee 80       	ldd	r14, Y+6	; 0x06
    224e:	fd 80       	ldd	r15, Y+5	; 0x05
    2250:	0c 81       	ldd	r16, Y+4	; 0x04
    2252:	1b 81       	ldd	r17, Y+3	; 0x03
    2254:	aa 81       	ldd	r26, Y+2	; 0x02
    2256:	b9 81       	ldd	r27, Y+1	; 0x01
    2258:	ce 0f       	add	r28, r30
    225a:	d1 1d       	adc	r29, r1
    225c:	0f b6       	in	r0, 0x3f	; 63
    225e:	f8 94       	cli
    2260:	de bf       	out	0x3e, r29	; 62
    2262:	0f be       	out	0x3f, r0	; 63
    2264:	cd bf       	out	0x3d, r28	; 61
    2266:	ed 01       	movw	r28, r26
    2268:	08 95       	ret

0000226a <_exit>:
    226a:	f8 94       	cli

0000226c <__stop_program>:
    226c:	ff cf       	rjmp	.-2      	; 0x226c <__stop_program>
