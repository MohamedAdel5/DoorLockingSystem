
hmi_ecu.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002a42  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000130  00800060  00002a42  00002ad6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  00800190  00800190  00002c06  2**0
                  ALLOC
  3 .stab         00002a84  00000000  00000000  00002c08  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000133b  00000000  00000000  0000568c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000069c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006b07  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006c77  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000088c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000097ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a558  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a6b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a945  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b113  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 e8 08 	jmp	0x11d0	; 0x11d0 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 a3 07 	jmp	0xf46	; 0xf46 <__vector_11>
      30:	0c 94 09 08 	jmp	0x1012	; 0x1012 <__vector_12>
      34:	0c 94 d6 07 	jmp	0xfac	; 0xfac <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e4       	ldi	r30, 0x42	; 66
      68:	fa e2       	ldi	r31, 0x2A	; 42
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 39       	cpi	r26, 0x90	; 144
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e9       	ldi	r26, 0x90	; 144
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 39       	cpi	r26, 0x99	; 153
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <main>
      8a:	0c 94 1f 15 	jmp	0x2a3e	; 0x2a3e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 a3 14 	jmp	0x2946	; 0x2946 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 e8       	ldi	r26, 0x82	; 130
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 bf 14 	jmp	0x297e	; 0x297e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 af 14 	jmp	0x295e	; 0x295e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 cb 14 	jmp	0x2996	; 0x2996 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 af 14 	jmp	0x295e	; 0x295e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 cb 14 	jmp	0x2996	; 0x2996 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 a3 14 	jmp	0x2946	; 0x2946 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	82 e8       	ldi	r24, 0x82	; 130
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 bf 14 	jmp	0x297e	; 0x297e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 af 14 	jmp	0x295e	; 0x295e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 cb 14 	jmp	0x2996	; 0x2996 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 af 14 	jmp	0x295e	; 0x295e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 cb 14 	jmp	0x2996	; 0x2996 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 af 14 	jmp	0x295e	; 0x295e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 cb 14 	jmp	0x2996	; 0x2996 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 b3 14 	jmp	0x2966	; 0x2966 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 cf 14 	jmp	0x299e	; 0x299e <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <UART_init>:
static  void(*g_fptrCallBack_transmit_empty)(void) = NULLPTR;
/***************************************************************
 	 	 	 	 	 	Functions definitions
 ***************************************************************/
void UART_init(UART_config *config)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	28 97       	sbiw	r28, 0x08	; 8
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	9c 83       	std	Y+4, r25	; 0x04
     b5c:	8b 83       	std	Y+3, r24	; 0x03
	 * Transmit flag is CLEARED as an initial value
	 * UART data register Empty flag is SET as an initial value
	 *the error flags are CLEARED for future compatibility
	 * Double UART transmission speed is ENABLED
	 * Multiprocessor communication mode is DISABLED*/
	UCSRA = 0x22;
     b5e:	eb e2       	ldi	r30, 0x2B	; 43
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	82 e2       	ldi	r24, 0x22	; 34
     b64:	80 83       	st	Z, r24


	/*For 8-bit character size configuration*/

	CLEAR_BIT(UCSRB, UCSZ2);
     b66:	aa e2       	ldi	r26, 0x2A	; 42
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	ea e2       	ldi	r30, 0x2A	; 42
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	80 81       	ld	r24, Z
     b70:	8b 7f       	andi	r24, 0xFB	; 251
     b72:	8c 93       	st	X, r24

	SET_BIT(UCSRC, URSEL);		/*enable editing UCSRC*/
     b74:	a0 e4       	ldi	r26, 0x40	; 64
     b76:	b0 e0       	ldi	r27, 0x00	; 0
     b78:	e0 e4       	ldi	r30, 0x40	; 64
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	80 81       	ld	r24, Z
     b7e:	80 68       	ori	r24, 0x80	; 128
     b80:	8c 93       	st	X, r24

	SET_BIT(UCSRC, UCSZ0);
     b82:	a0 e4       	ldi	r26, 0x40	; 64
     b84:	b0 e0       	ldi	r27, 0x00	; 0
     b86:	e0 e4       	ldi	r30, 0x40	; 64
     b88:	f0 e0       	ldi	r31, 0x00	; 0
     b8a:	80 81       	ld	r24, Z
     b8c:	82 60       	ori	r24, 0x02	; 2
     b8e:	8c 93       	st	X, r24
	SET_BIT(UCSRC, UCSZ1);
     b90:	a0 e4       	ldi	r26, 0x40	; 64
     b92:	b0 e0       	ldi	r27, 0x00	; 0
     b94:	e0 e4       	ldi	r30, 0x40	; 64
     b96:	f0 e0       	ldi	r31, 0x00	; 0
     b98:	80 81       	ld	r24, Z
     b9a:	84 60       	ori	r24, 0x04	; 4
     b9c:	8c 93       	st	X, r24

	CLEAR_BIT(UCSRC, UMSEL);		/*ASYNC Operation*/
     b9e:	a0 e4       	ldi	r26, 0x40	; 64
     ba0:	b0 e0       	ldi	r27, 0x00	; 0
     ba2:	e0 e4       	ldi	r30, 0x40	; 64
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	80 81       	ld	r24, Z
     ba8:	8f 7b       	andi	r24, 0xBF	; 191
     baa:	8c 93       	st	X, r24
	CLEAR_BIT(UCSRC, UCPOL);		/*Clock polarity disabled because the Operation is ASYNC*/
     bac:	a0 e4       	ldi	r26, 0x40	; 64
     bae:	b0 e0       	ldi	r27, 0x00	; 0
     bb0:	e0 e4       	ldi	r30, 0x40	; 64
     bb2:	f0 e0       	ldi	r31, 0x00	; 0
     bb4:	80 81       	ld	r24, Z
     bb6:	8e 7f       	andi	r24, 0xFE	; 254
     bb8:	8c 93       	st	X, r24

	switch(config->parity)
     bba:	eb 81       	ldd	r30, Y+3	; 0x03
     bbc:	fc 81       	ldd	r31, Y+4	; 0x04
     bbe:	83 81       	ldd	r24, Z+3	; 0x03
     bc0:	28 2f       	mov	r18, r24
     bc2:	30 e0       	ldi	r19, 0x00	; 0
     bc4:	38 87       	std	Y+8, r19	; 0x08
     bc6:	2f 83       	std	Y+7, r18	; 0x07
     bc8:	8f 81       	ldd	r24, Y+7	; 0x07
     bca:	98 85       	ldd	r25, Y+8	; 0x08
     bcc:	82 30       	cpi	r24, 0x02	; 2
     bce:	91 05       	cpc	r25, r1
     bd0:	a1 f0       	breq	.+40     	; 0xbfa <UART_init+0xb4>
     bd2:	2f 81       	ldd	r18, Y+7	; 0x07
     bd4:	38 85       	ldd	r19, Y+8	; 0x08
     bd6:	23 30       	cpi	r18, 0x03	; 3
     bd8:	31 05       	cpc	r19, r1
     bda:	f1 f0       	breq	.+60     	; 0xc18 <UART_init+0xd2>
	{
	default:
	case DISABLED:
		CLEAR_BIT(UCSRC, UPM0);
     bdc:	a0 e4       	ldi	r26, 0x40	; 64
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	e0 e4       	ldi	r30, 0x40	; 64
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	8f 7e       	andi	r24, 0xEF	; 239
     be8:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRC, UPM1);
     bea:	a0 e4       	ldi	r26, 0x40	; 64
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	e0 e4       	ldi	r30, 0x40	; 64
     bf0:	f0 e0       	ldi	r31, 0x00	; 0
     bf2:	80 81       	ld	r24, Z
     bf4:	8f 7d       	andi	r24, 0xDF	; 223
     bf6:	8c 93       	st	X, r24
     bf8:	1d c0       	rjmp	.+58     	; 0xc34 <UART_init+0xee>
		break;
	case EVEN:
		CLEAR_BIT(UCSRC, UPM0);
     bfa:	a0 e4       	ldi	r26, 0x40	; 64
     bfc:	b0 e0       	ldi	r27, 0x00	; 0
     bfe:	e0 e4       	ldi	r30, 0x40	; 64
     c00:	f0 e0       	ldi	r31, 0x00	; 0
     c02:	80 81       	ld	r24, Z
     c04:	8f 7e       	andi	r24, 0xEF	; 239
     c06:	8c 93       	st	X, r24
		SET_BIT(UCSRC, UPM1);
     c08:	a0 e4       	ldi	r26, 0x40	; 64
     c0a:	b0 e0       	ldi	r27, 0x00	; 0
     c0c:	e0 e4       	ldi	r30, 0x40	; 64
     c0e:	f0 e0       	ldi	r31, 0x00	; 0
     c10:	80 81       	ld	r24, Z
     c12:	80 62       	ori	r24, 0x20	; 32
     c14:	8c 93       	st	X, r24
     c16:	0e c0       	rjmp	.+28     	; 0xc34 <UART_init+0xee>
		break;
	case ODD:
		SET_BIT(UCSRC, UPM0);
     c18:	a0 e4       	ldi	r26, 0x40	; 64
     c1a:	b0 e0       	ldi	r27, 0x00	; 0
     c1c:	e0 e4       	ldi	r30, 0x40	; 64
     c1e:	f0 e0       	ldi	r31, 0x00	; 0
     c20:	80 81       	ld	r24, Z
     c22:	80 61       	ori	r24, 0x10	; 16
     c24:	8c 93       	st	X, r24
		SET_BIT(UCSRC, UPM1);
     c26:	a0 e4       	ldi	r26, 0x40	; 64
     c28:	b0 e0       	ldi	r27, 0x00	; 0
     c2a:	e0 e4       	ldi	r30, 0x40	; 64
     c2c:	f0 e0       	ldi	r31, 0x00	; 0
     c2e:	80 81       	ld	r24, Z
     c30:	80 62       	ori	r24, 0x20	; 32
     c32:	8c 93       	st	X, r24
		break;
	}
	switch(config->stopBit)
     c34:	eb 81       	ldd	r30, Y+3	; 0x03
     c36:	fc 81       	ldd	r31, Y+4	; 0x04
     c38:	84 81       	ldd	r24, Z+4	; 0x04
     c3a:	88 2f       	mov	r24, r24
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	81 30       	cpi	r24, 0x01	; 1
     c40:	91 05       	cpc	r25, r1
     c42:	41 f0       	breq	.+16     	; 0xc54 <UART_init+0x10e>
	{
	default:
	case STOP_BIT_1:
		CLEAR_BIT(UCSRC, USBS);
     c44:	a0 e4       	ldi	r26, 0x40	; 64
     c46:	b0 e0       	ldi	r27, 0x00	; 0
     c48:	e0 e4       	ldi	r30, 0x40	; 64
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	80 81       	ld	r24, Z
     c4e:	87 7f       	andi	r24, 0xF7	; 247
     c50:	8c 93       	st	X, r24
     c52:	07 c0       	rjmp	.+14     	; 0xc62 <UART_init+0x11c>
		break;
	case STOP_BIT_2:
		SET_BIT(UCSRC, USBS);
     c54:	a0 e4       	ldi	r26, 0x40	; 64
     c56:	b0 e0       	ldi	r27, 0x00	; 0
     c58:	e0 e4       	ldi	r30, 0x40	; 64
     c5a:	f0 e0       	ldi	r31, 0x00	; 0
     c5c:	80 81       	ld	r24, Z
     c5e:	88 60       	ori	r24, 0x08	; 8
     c60:	8c 93       	st	X, r24
		break;
	}
	uint16 baud = (F_CPU/(8UL * config->baudRate))-1; /*UBBR equation for enabled Double UART transmission speed*/
     c62:	eb 81       	ldd	r30, Y+3	; 0x03
     c64:	fc 81       	ldd	r31, Y+4	; 0x04
     c66:	81 81       	ldd	r24, Z+1	; 0x01
     c68:	92 81       	ldd	r25, Z+2	; 0x02
     c6a:	cc 01       	movw	r24, r24
     c6c:	a0 e0       	ldi	r26, 0x00	; 0
     c6e:	b0 e0       	ldi	r27, 0x00	; 0
     c70:	88 0f       	add	r24, r24
     c72:	99 1f       	adc	r25, r25
     c74:	aa 1f       	adc	r26, r26
     c76:	bb 1f       	adc	r27, r27
     c78:	88 0f       	add	r24, r24
     c7a:	99 1f       	adc	r25, r25
     c7c:	aa 1f       	adc	r26, r26
     c7e:	bb 1f       	adc	r27, r27
     c80:	88 0f       	add	r24, r24
     c82:	99 1f       	adc	r25, r25
     c84:	aa 1f       	adc	r26, r26
     c86:	bb 1f       	adc	r27, r27
     c88:	9c 01       	movw	r18, r24
     c8a:	ad 01       	movw	r20, r26
     c8c:	80 e0       	ldi	r24, 0x00	; 0
     c8e:	92 e1       	ldi	r25, 0x12	; 18
     c90:	aa e7       	ldi	r26, 0x7A	; 122
     c92:	b0 e0       	ldi	r27, 0x00	; 0
     c94:	bc 01       	movw	r22, r24
     c96:	cd 01       	movw	r24, r26
     c98:	0e 94 81 14 	call	0x2902	; 0x2902 <__udivmodsi4>
     c9c:	da 01       	movw	r26, r20
     c9e:	c9 01       	movw	r24, r18
     ca0:	01 97       	sbiw	r24, 0x01	; 1
     ca2:	9a 83       	std	Y+2, r25	; 0x02
     ca4:	89 83       	std	Y+1, r24	; 0x01

	CLEAR_BIT(UCSRC, URSEL);		/*enable editing UBRRH*/
     ca6:	a0 e4       	ldi	r26, 0x40	; 64
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	e0 e4       	ldi	r30, 0x40	; 64
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	8f 77       	andi	r24, 0x7F	; 127
     cb2:	8c 93       	st	X, r24

	UBRRH = (baud >> 8);
     cb4:	e0 e4       	ldi	r30, 0x40	; 64
     cb6:	f0 e0       	ldi	r31, 0x00	; 0
     cb8:	89 81       	ldd	r24, Y+1	; 0x01
     cba:	9a 81       	ldd	r25, Y+2	; 0x02
     cbc:	89 2f       	mov	r24, r25
     cbe:	99 27       	eor	r25, r25
     cc0:	80 83       	st	Z, r24
	UBRRL = baud;
     cc2:	e9 e2       	ldi	r30, 0x29	; 41
     cc4:	f0 e0       	ldi	r31, 0x00	; 0
     cc6:	89 81       	ldd	r24, Y+1	; 0x01
     cc8:	80 83       	st	Z, r24


	/*Finally Enable the UART*/
	switch(config->mode)
     cca:	eb 81       	ldd	r30, Y+3	; 0x03
     ccc:	fc 81       	ldd	r31, Y+4	; 0x04
     cce:	80 81       	ld	r24, Z
     cd0:	28 2f       	mov	r18, r24
     cd2:	30 e0       	ldi	r19, 0x00	; 0
     cd4:	3e 83       	std	Y+6, r19	; 0x06
     cd6:	2d 83       	std	Y+5, r18	; 0x05
     cd8:	8d 81       	ldd	r24, Y+5	; 0x05
     cda:	9e 81       	ldd	r25, Y+6	; 0x06
     cdc:	00 97       	sbiw	r24, 0x00	; 0
     cde:	31 f0       	breq	.+12     	; 0xcec <UART_init+0x1a6>
     ce0:	2d 81       	ldd	r18, Y+5	; 0x05
     ce2:	3e 81       	ldd	r19, Y+6	; 0x06
     ce4:	21 30       	cpi	r18, 0x01	; 1
     ce6:	31 05       	cpc	r19, r1
     ce8:	81 f0       	breq	.+32     	; 0xd0a <UART_init+0x1c4>
     cea:	1e c0       	rjmp	.+60     	; 0xd28 <UART_init+0x1e2>
	{
	case T:
		SET_BIT(PORTD, PD1);	/*Sets TX pin as output pin(redundant because the UART overrides the i/o port functionality)*/
     cec:	a2 e3       	ldi	r26, 0x32	; 50
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	e2 e3       	ldi	r30, 0x32	; 50
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	82 60       	ori	r24, 0x02	; 2
     cf8:	8c 93       	st	X, r24
		SET_BIT(UCSRB, TXEN);	/*Enable Transmitting*/
     cfa:	aa e2       	ldi	r26, 0x2A	; 42
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	ea e2       	ldi	r30, 0x2A	; 42
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	88 60       	ori	r24, 0x08	; 8
     d06:	8c 93       	st	X, r24
     d08:	2b c0       	rjmp	.+86     	; 0xd60 <UART_init+0x21a>
		break;
	case R:
		CLEAR_BIT(PORTD, PD0);	/*Sets RX pin as input pin(redundant because the UART overrides the i/o port functionality)*/
     d0a:	a2 e3       	ldi	r26, 0x32	; 50
     d0c:	b0 e0       	ldi	r27, 0x00	; 0
     d0e:	e2 e3       	ldi	r30, 0x32	; 50
     d10:	f0 e0       	ldi	r31, 0x00	; 0
     d12:	80 81       	ld	r24, Z
     d14:	8e 7f       	andi	r24, 0xFE	; 254
     d16:	8c 93       	st	X, r24
		SET_BIT(UCSRB, RXEN);	/*Enable Receiving*/
     d18:	aa e2       	ldi	r26, 0x2A	; 42
     d1a:	b0 e0       	ldi	r27, 0x00	; 0
     d1c:	ea e2       	ldi	r30, 0x2A	; 42
     d1e:	f0 e0       	ldi	r31, 0x00	; 0
     d20:	80 81       	ld	r24, Z
     d22:	80 61       	ori	r24, 0x10	; 16
     d24:	8c 93       	st	X, r24
     d26:	1c c0       	rjmp	.+56     	; 0xd60 <UART_init+0x21a>
		break;

	default: /*The default value is Transmit and receive*/
	case TR:
		SET_BIT(PORTD, PD1);
     d28:	a2 e3       	ldi	r26, 0x32	; 50
     d2a:	b0 e0       	ldi	r27, 0x00	; 0
     d2c:	e2 e3       	ldi	r30, 0x32	; 50
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	80 81       	ld	r24, Z
     d32:	82 60       	ori	r24, 0x02	; 2
     d34:	8c 93       	st	X, r24
		CLEAR_BIT(PORTD, PD0);
     d36:	a2 e3       	ldi	r26, 0x32	; 50
     d38:	b0 e0       	ldi	r27, 0x00	; 0
     d3a:	e2 e3       	ldi	r30, 0x32	; 50
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	80 81       	ld	r24, Z
     d40:	8e 7f       	andi	r24, 0xFE	; 254
     d42:	8c 93       	st	X, r24
		SET_BIT(UCSRB, TXEN);
     d44:	aa e2       	ldi	r26, 0x2A	; 42
     d46:	b0 e0       	ldi	r27, 0x00	; 0
     d48:	ea e2       	ldi	r30, 0x2A	; 42
     d4a:	f0 e0       	ldi	r31, 0x00	; 0
     d4c:	80 81       	ld	r24, Z
     d4e:	88 60       	ori	r24, 0x08	; 8
     d50:	8c 93       	st	X, r24
		SET_BIT(UCSRB, RXEN);
     d52:	aa e2       	ldi	r26, 0x2A	; 42
     d54:	b0 e0       	ldi	r27, 0x00	; 0
     d56:	ea e2       	ldi	r30, 0x2A	; 42
     d58:	f0 e0       	ldi	r31, 0x00	; 0
     d5a:	80 81       	ld	r24, Z
     d5c:	80 61       	ori	r24, 0x10	; 16
     d5e:	8c 93       	st	X, r24
		break;
	}

}
     d60:	28 96       	adiw	r28, 0x08	; 8
     d62:	0f b6       	in	r0, 0x3f	; 63
     d64:	f8 94       	cli
     d66:	de bf       	out	0x3e, r29	; 62
     d68:	0f be       	out	0x3f, r0	; 63
     d6a:	cd bf       	out	0x3d, r28	; 61
     d6c:	cf 91       	pop	r28
     d6e:	df 91       	pop	r29
     d70:	08 95       	ret

00000d72 <UART_deinit>:
void UART_deinit(void)
{
     d72:	df 93       	push	r29
     d74:	cf 93       	push	r28
     d76:	cd b7       	in	r28, 0x3d	; 61
     d78:	de b7       	in	r29, 0x3e	; 62
	UCSRB = 0;	/*disable receive and transmit*/
     d7a:	ea e2       	ldi	r30, 0x2A	; 42
     d7c:	f0 e0       	ldi	r31, 0x00	; 0
     d7e:	10 82       	st	Z, r1
}
     d80:	cf 91       	pop	r28
     d82:	df 91       	pop	r29
     d84:	08 95       	ret

00000d86 <UART_sendByte>:

void UART_sendByte(const uint8 data)
{
     d86:	df 93       	push	r29
     d88:	cf 93       	push	r28
     d8a:	0f 92       	push	r0
     d8c:	cd b7       	in	r28, 0x3d	; 61
     d8e:	de b7       	in	r29, 0x3e	; 62
     d90:	89 83       	std	Y+1, r24	; 0x01



	while(BIT_IS_CLEAR(UCSRA, UDRE));
     d92:	eb e2       	ldi	r30, 0x2B	; 43
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	80 81       	ld	r24, Z
     d98:	88 2f       	mov	r24, r24
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	80 72       	andi	r24, 0x20	; 32
     d9e:	90 70       	andi	r25, 0x00	; 0
     da0:	00 97       	sbiw	r24, 0x00	; 0
     da2:	b9 f3       	breq	.-18     	; 0xd92 <UART_sendByte+0xc>
	UDR = data;
     da4:	ec e2       	ldi	r30, 0x2C	; 44
     da6:	f0 e0       	ldi	r31, 0x00	; 0
     da8:	89 81       	ldd	r24, Y+1	; 0x01
     daa:	80 83       	st	Z, r24
	 *
	 * UDR = data;
	 * while(BIT_IS_CLEAR(UCSRA, TXC)); //this line can not be written before the "UDR = data" statement because it may cause an infinite loop
	 * SET_BIT(UCSRA, TXC);
	 */
}
     dac:	0f 90       	pop	r0
     dae:	cf 91       	pop	r28
     db0:	df 91       	pop	r29
     db2:	08 95       	ret

00000db4 <UART_receiveByte>:
UART_status UART_receiveByte(uint8 * const data)
{
     db4:	df 93       	push	r29
     db6:	cf 93       	push	r28
     db8:	00 d0       	rcall	.+0      	; 0xdba <UART_receiveByte+0x6>
     dba:	0f 92       	push	r0
     dbc:	cd b7       	in	r28, 0x3d	; 61
     dbe:	de b7       	in	r29, 0x3e	; 62
     dc0:	9a 83       	std	Y+2, r25	; 0x02
     dc2:	89 83       	std	Y+1, r24	; 0x01
	while(BIT_IS_CLEAR(UCSRA, RXC));	/*Polling for RXC*/
     dc4:	eb e2       	ldi	r30, 0x2B	; 43
     dc6:	f0 e0       	ldi	r31, 0x00	; 0
     dc8:	80 81       	ld	r24, Z
     dca:	88 23       	and	r24, r24
     dcc:	dc f7       	brge	.-10     	; 0xdc4 <UART_receiveByte+0x10>

	if(BIT_IS_SET(UCSRA, FE) || BIT_IS_SET(UCSRA, PE))
     dce:	eb e2       	ldi	r30, 0x2B	; 43
     dd0:	f0 e0       	ldi	r31, 0x00	; 0
     dd2:	80 81       	ld	r24, Z
     dd4:	88 2f       	mov	r24, r24
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	80 71       	andi	r24, 0x10	; 16
     dda:	90 70       	andi	r25, 0x00	; 0
     ddc:	00 97       	sbiw	r24, 0x00	; 0
     dde:	49 f4       	brne	.+18     	; 0xdf2 <UART_receiveByte+0x3e>
     de0:	eb e2       	ldi	r30, 0x2B	; 43
     de2:	f0 e0       	ldi	r31, 0x00	; 0
     de4:	80 81       	ld	r24, Z
     de6:	88 2f       	mov	r24, r24
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	84 70       	andi	r24, 0x04	; 4
     dec:	90 70       	andi	r25, 0x00	; 0
     dee:	00 97       	sbiw	r24, 0x00	; 0
     df0:	11 f0       	breq	.+4      	; 0xdf6 <UART_receiveByte+0x42>
	{
		return ERROR;
     df2:	1b 82       	std	Y+3, r1	; 0x03
     df4:	08 c0       	rjmp	.+16     	; 0xe06 <UART_receiveByte+0x52>
	}
	else
	{
		*data = UDR;		/*RXC is cleared on reading the UDR register*/
     df6:	ec e2       	ldi	r30, 0x2C	; 44
     df8:	f0 e0       	ldi	r31, 0x00	; 0
     dfa:	80 81       	ld	r24, Z
     dfc:	e9 81       	ldd	r30, Y+1	; 0x01
     dfe:	fa 81       	ldd	r31, Y+2	; 0x02
     e00:	80 83       	st	Z, r24
		return SUCCESS;
     e02:	81 e0       	ldi	r24, 0x01	; 1
     e04:	8b 83       	std	Y+3, r24	; 0x03
     e06:	8b 81       	ldd	r24, Y+3	; 0x03
	}
}
     e08:	0f 90       	pop	r0
     e0a:	0f 90       	pop	r0
     e0c:	0f 90       	pop	r0
     e0e:	cf 91       	pop	r28
     e10:	df 91       	pop	r29
     e12:	08 95       	ret

00000e14 <UART_sendString>:

void UART_sendString(const uint8* str)
{
     e14:	df 93       	push	r29
     e16:	cf 93       	push	r28
     e18:	00 d0       	rcall	.+0      	; 0xe1a <UART_sendString+0x6>
     e1a:	cd b7       	in	r28, 0x3d	; 61
     e1c:	de b7       	in	r29, 0x3e	; 62
     e1e:	9a 83       	std	Y+2, r25	; 0x02
     e20:	89 83       	std	Y+1, r24	; 0x01
     e22:	0a c0       	rjmp	.+20     	; 0xe38 <UART_sendString+0x24>
	while(*str != '\0')
	{
		UART_sendByte(*str);
     e24:	e9 81       	ldd	r30, Y+1	; 0x01
     e26:	fa 81       	ldd	r31, Y+2	; 0x02
     e28:	80 81       	ld	r24, Z
     e2a:	0e 94 c3 06 	call	0xd86	; 0xd86 <UART_sendByte>
		str++;
     e2e:	89 81       	ldd	r24, Y+1	; 0x01
     e30:	9a 81       	ldd	r25, Y+2	; 0x02
     e32:	01 96       	adiw	r24, 0x01	; 1
     e34:	9a 83       	std	Y+2, r25	; 0x02
     e36:	89 83       	std	Y+1, r24	; 0x01
	}
}

void UART_sendString(const uint8* str)
{
	while(*str != '\0')
     e38:	e9 81       	ldd	r30, Y+1	; 0x01
     e3a:	fa 81       	ldd	r31, Y+2	; 0x02
     e3c:	80 81       	ld	r24, Z
     e3e:	88 23       	and	r24, r24
     e40:	89 f7       	brne	.-30     	; 0xe24 <UART_sendString+0x10>
	{
		UART_sendByte(*str);
		str++;
	}
}
     e42:	0f 90       	pop	r0
     e44:	0f 90       	pop	r0
     e46:	cf 91       	pop	r28
     e48:	df 91       	pop	r29
     e4a:	08 95       	ret

00000e4c <UART_receiveString>:
void UART_receiveString(uint8* str)
{
     e4c:	df 93       	push	r29
     e4e:	cf 93       	push	r28
     e50:	00 d0       	rcall	.+0      	; 0xe52 <UART_receiveString+0x6>
     e52:	0f 92       	push	r0
     e54:	cd b7       	in	r28, 0x3d	; 61
     e56:	de b7       	in	r29, 0x3e	; 62
     e58:	9b 83       	std	Y+3, r25	; 0x03
     e5a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 receivedByte;
	UART_receiveByte(&receivedByte);
     e5c:	ce 01       	movw	r24, r28
     e5e:	01 96       	adiw	r24, 0x01	; 1
     e60:	0e 94 da 06 	call	0xdb4	; 0xdb4 <UART_receiveByte>
     e64:	0d c0       	rjmp	.+26     	; 0xe80 <UART_receiveString+0x34>
	while(receivedByte != UART_TERMINATING_CHARACTER) 	//till the user enters the terminating character
	{
		*str = receivedByte;
     e66:	89 81       	ldd	r24, Y+1	; 0x01
     e68:	ea 81       	ldd	r30, Y+2	; 0x02
     e6a:	fb 81       	ldd	r31, Y+3	; 0x03
     e6c:	80 83       	st	Z, r24
		str++;
     e6e:	8a 81       	ldd	r24, Y+2	; 0x02
     e70:	9b 81       	ldd	r25, Y+3	; 0x03
     e72:	01 96       	adiw	r24, 0x01	; 1
     e74:	9b 83       	std	Y+3, r25	; 0x03
     e76:	8a 83       	std	Y+2, r24	; 0x02
		UART_receiveByte(&receivedByte);
     e78:	ce 01       	movw	r24, r28
     e7a:	01 96       	adiw	r24, 0x01	; 1
     e7c:	0e 94 da 06 	call	0xdb4	; 0xdb4 <UART_receiveByte>
}
void UART_receiveString(uint8* str)
{
	uint8 receivedByte;
	UART_receiveByte(&receivedByte);
	while(receivedByte != UART_TERMINATING_CHARACTER) 	//till the user enters the terminating character
     e80:	89 81       	ldd	r24, Y+1	; 0x01
     e82:	83 32       	cpi	r24, 0x23	; 35
     e84:	81 f7       	brne	.-32     	; 0xe66 <UART_receiveString+0x1a>
	{
		*str = receivedByte;
		str++;
		UART_receiveByte(&receivedByte);
	}
	*str = '\0';
     e86:	ea 81       	ldd	r30, Y+2	; 0x02
     e88:	fb 81       	ldd	r31, Y+3	; 0x03
     e8a:	10 82       	st	Z, r1
}
     e8c:	0f 90       	pop	r0
     e8e:	0f 90       	pop	r0
     e90:	0f 90       	pop	r0
     e92:	cf 91       	pop	r28
     e94:	df 91       	pop	r29
     e96:	08 95       	ret

00000e98 <UART_interrupt_receive>:
void UART_interrupt_receive(void(*a_fptrCallBack_receive)())
{
     e98:	df 93       	push	r29
     e9a:	cf 93       	push	r28
     e9c:	00 d0       	rcall	.+0      	; 0xe9e <UART_interrupt_receive+0x6>
     e9e:	cd b7       	in	r28, 0x3d	; 61
     ea0:	de b7       	in	r29, 0x3e	; 62
     ea2:	9a 83       	std	Y+2, r25	; 0x02
     ea4:	89 83       	std	Y+1, r24	; 0x01
	if(a_fptrCallBack_receive != NULLPTR)
     ea6:	89 81       	ldd	r24, Y+1	; 0x01
     ea8:	9a 81       	ldd	r25, Y+2	; 0x02
     eaa:	00 97       	sbiw	r24, 0x00	; 0
     eac:	69 f0       	breq	.+26     	; 0xec8 <UART_interrupt_receive+0x30>
	{
		SET_BIT(UCSRB, RXCIE);		/*Enable interrupt RXC*/
     eae:	aa e2       	ldi	r26, 0x2A	; 42
     eb0:	b0 e0       	ldi	r27, 0x00	; 0
     eb2:	ea e2       	ldi	r30, 0x2A	; 42
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	80 81       	ld	r24, Z
     eb8:	80 68       	ori	r24, 0x80	; 128
     eba:	8c 93       	st	X, r24
		g_fptrCallBack_receive = a_fptrCallBack_receive;
     ebc:	89 81       	ldd	r24, Y+1	; 0x01
     ebe:	9a 81       	ldd	r25, Y+2	; 0x02
     ec0:	90 93 91 01 	sts	0x0191, r25
     ec4:	80 93 90 01 	sts	0x0190, r24
	}
}
     ec8:	0f 90       	pop	r0
     eca:	0f 90       	pop	r0
     ecc:	cf 91       	pop	r28
     ece:	df 91       	pop	r29
     ed0:	08 95       	ret

00000ed2 <UART_interrupt_transmit_complete>:
void UART_interrupt_transmit_complete(void(*a_fptrCallBack_transmit_complete)())
{
     ed2:	df 93       	push	r29
     ed4:	cf 93       	push	r28
     ed6:	00 d0       	rcall	.+0      	; 0xed8 <UART_interrupt_transmit_complete+0x6>
     ed8:	cd b7       	in	r28, 0x3d	; 61
     eda:	de b7       	in	r29, 0x3e	; 62
     edc:	9a 83       	std	Y+2, r25	; 0x02
     ede:	89 83       	std	Y+1, r24	; 0x01
	if(a_fptrCallBack_transmit_complete != NULLPTR)
     ee0:	89 81       	ldd	r24, Y+1	; 0x01
     ee2:	9a 81       	ldd	r25, Y+2	; 0x02
     ee4:	00 97       	sbiw	r24, 0x00	; 0
     ee6:	69 f0       	breq	.+26     	; 0xf02 <UART_interrupt_transmit_complete+0x30>
	{
		SET_BIT(UCSRB, TXCIE);		/*Enable interrupt TXC*/
     ee8:	aa e2       	ldi	r26, 0x2A	; 42
     eea:	b0 e0       	ldi	r27, 0x00	; 0
     eec:	ea e2       	ldi	r30, 0x2A	; 42
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	80 81       	ld	r24, Z
     ef2:	80 64       	ori	r24, 0x40	; 64
     ef4:	8c 93       	st	X, r24
		g_fptrCallBack_transmit_complete = a_fptrCallBack_transmit_complete;
     ef6:	89 81       	ldd	r24, Y+1	; 0x01
     ef8:	9a 81       	ldd	r25, Y+2	; 0x02
     efa:	90 93 93 01 	sts	0x0193, r25
     efe:	80 93 92 01 	sts	0x0192, r24
	}
}
     f02:	0f 90       	pop	r0
     f04:	0f 90       	pop	r0
     f06:	cf 91       	pop	r28
     f08:	df 91       	pop	r29
     f0a:	08 95       	ret

00000f0c <UART_interrupt_transmit_empty>:
void UART_interrupt_transmit_empty(void(*a_fptrCallBack_transmit_empty)())
{
     f0c:	df 93       	push	r29
     f0e:	cf 93       	push	r28
     f10:	00 d0       	rcall	.+0      	; 0xf12 <UART_interrupt_transmit_empty+0x6>
     f12:	cd b7       	in	r28, 0x3d	; 61
     f14:	de b7       	in	r29, 0x3e	; 62
     f16:	9a 83       	std	Y+2, r25	; 0x02
     f18:	89 83       	std	Y+1, r24	; 0x01
	if(a_fptrCallBack_transmit_empty != NULLPTR)
     f1a:	89 81       	ldd	r24, Y+1	; 0x01
     f1c:	9a 81       	ldd	r25, Y+2	; 0x02
     f1e:	00 97       	sbiw	r24, 0x00	; 0
     f20:	69 f0       	breq	.+26     	; 0xf3c <UART_interrupt_transmit_empty+0x30>
	{
		SET_BIT(UCSRB, UDRIE);		/*Enable interrupt UDRE*/
     f22:	aa e2       	ldi	r26, 0x2A	; 42
     f24:	b0 e0       	ldi	r27, 0x00	; 0
     f26:	ea e2       	ldi	r30, 0x2A	; 42
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	80 81       	ld	r24, Z
     f2c:	80 62       	ori	r24, 0x20	; 32
     f2e:	8c 93       	st	X, r24
		g_fptrCallBack_transmit_empty = a_fptrCallBack_transmit_empty;
     f30:	89 81       	ldd	r24, Y+1	; 0x01
     f32:	9a 81       	ldd	r25, Y+2	; 0x02
     f34:	90 93 95 01 	sts	0x0195, r25
     f38:	80 93 94 01 	sts	0x0194, r24
	}
}
     f3c:	0f 90       	pop	r0
     f3e:	0f 90       	pop	r0
     f40:	cf 91       	pop	r28
     f42:	df 91       	pop	r29
     f44:	08 95       	ret

00000f46 <__vector_11>:
ISR(USART_RXC_vect)
{
     f46:	1f 92       	push	r1
     f48:	0f 92       	push	r0
     f4a:	0f b6       	in	r0, 0x3f	; 63
     f4c:	0f 92       	push	r0
     f4e:	11 24       	eor	r1, r1
     f50:	2f 93       	push	r18
     f52:	3f 93       	push	r19
     f54:	4f 93       	push	r20
     f56:	5f 93       	push	r21
     f58:	6f 93       	push	r22
     f5a:	7f 93       	push	r23
     f5c:	8f 93       	push	r24
     f5e:	9f 93       	push	r25
     f60:	af 93       	push	r26
     f62:	bf 93       	push	r27
     f64:	ef 93       	push	r30
     f66:	ff 93       	push	r31
     f68:	df 93       	push	r29
     f6a:	cf 93       	push	r28
     f6c:	cd b7       	in	r28, 0x3d	; 61
     f6e:	de b7       	in	r29, 0x3e	; 62
	if(g_fptrCallBack_receive != NULLPTR)
     f70:	80 91 90 01 	lds	r24, 0x0190
     f74:	90 91 91 01 	lds	r25, 0x0191
     f78:	00 97       	sbiw	r24, 0x00	; 0
     f7a:	29 f0       	breq	.+10     	; 0xf86 <__vector_11+0x40>
		(*g_fptrCallBack_receive)();
     f7c:	e0 91 90 01 	lds	r30, 0x0190
     f80:	f0 91 91 01 	lds	r31, 0x0191
     f84:	09 95       	icall
	/*You must read UDR or clear RXCIE(disable RXC interrupt) bit otherwise a new interrupt will occur once the interrupt routine terminates. (You can't clear RXC flag because it's read only.. its only cleared when UDR is read)*/
}
     f86:	cf 91       	pop	r28
     f88:	df 91       	pop	r29
     f8a:	ff 91       	pop	r31
     f8c:	ef 91       	pop	r30
     f8e:	bf 91       	pop	r27
     f90:	af 91       	pop	r26
     f92:	9f 91       	pop	r25
     f94:	8f 91       	pop	r24
     f96:	7f 91       	pop	r23
     f98:	6f 91       	pop	r22
     f9a:	5f 91       	pop	r21
     f9c:	4f 91       	pop	r20
     f9e:	3f 91       	pop	r19
     fa0:	2f 91       	pop	r18
     fa2:	0f 90       	pop	r0
     fa4:	0f be       	out	0x3f, r0	; 63
     fa6:	0f 90       	pop	r0
     fa8:	1f 90       	pop	r1
     faa:	18 95       	reti

00000fac <__vector_13>:
ISR(USART_TXC_vect)
{
     fac:	1f 92       	push	r1
     fae:	0f 92       	push	r0
     fb0:	0f b6       	in	r0, 0x3f	; 63
     fb2:	0f 92       	push	r0
     fb4:	11 24       	eor	r1, r1
     fb6:	2f 93       	push	r18
     fb8:	3f 93       	push	r19
     fba:	4f 93       	push	r20
     fbc:	5f 93       	push	r21
     fbe:	6f 93       	push	r22
     fc0:	7f 93       	push	r23
     fc2:	8f 93       	push	r24
     fc4:	9f 93       	push	r25
     fc6:	af 93       	push	r26
     fc8:	bf 93       	push	r27
     fca:	ef 93       	push	r30
     fcc:	ff 93       	push	r31
     fce:	df 93       	push	r29
     fd0:	cf 93       	push	r28
     fd2:	cd b7       	in	r28, 0x3d	; 61
     fd4:	de b7       	in	r29, 0x3e	; 62
	if(g_fptrCallBack_transmit_complete != NULLPTR)
     fd6:	80 91 92 01 	lds	r24, 0x0192
     fda:	90 91 93 01 	lds	r25, 0x0193
     fde:	00 97       	sbiw	r24, 0x00	; 0
     fe0:	29 f0       	breq	.+10     	; 0xfec <__vector_13+0x40>
		(*g_fptrCallBack_transmit_complete)();
     fe2:	e0 91 92 01 	lds	r30, 0x0192
     fe6:	f0 91 93 01 	lds	r31, 0x0193
     fea:	09 95       	icall

	/*TXC flag is automatically cleared after the execution of its ISR*/
}
     fec:	cf 91       	pop	r28
     fee:	df 91       	pop	r29
     ff0:	ff 91       	pop	r31
     ff2:	ef 91       	pop	r30
     ff4:	bf 91       	pop	r27
     ff6:	af 91       	pop	r26
     ff8:	9f 91       	pop	r25
     ffa:	8f 91       	pop	r24
     ffc:	7f 91       	pop	r23
     ffe:	6f 91       	pop	r22
    1000:	5f 91       	pop	r21
    1002:	4f 91       	pop	r20
    1004:	3f 91       	pop	r19
    1006:	2f 91       	pop	r18
    1008:	0f 90       	pop	r0
    100a:	0f be       	out	0x3f, r0	; 63
    100c:	0f 90       	pop	r0
    100e:	1f 90       	pop	r1
    1010:	18 95       	reti

00001012 <__vector_12>:
ISR(USART_UDRE_vect)
{
    1012:	1f 92       	push	r1
    1014:	0f 92       	push	r0
    1016:	0f b6       	in	r0, 0x3f	; 63
    1018:	0f 92       	push	r0
    101a:	11 24       	eor	r1, r1
    101c:	2f 93       	push	r18
    101e:	3f 93       	push	r19
    1020:	4f 93       	push	r20
    1022:	5f 93       	push	r21
    1024:	6f 93       	push	r22
    1026:	7f 93       	push	r23
    1028:	8f 93       	push	r24
    102a:	9f 93       	push	r25
    102c:	af 93       	push	r26
    102e:	bf 93       	push	r27
    1030:	ef 93       	push	r30
    1032:	ff 93       	push	r31
    1034:	df 93       	push	r29
    1036:	cf 93       	push	r28
    1038:	cd b7       	in	r28, 0x3d	; 61
    103a:	de b7       	in	r29, 0x3e	; 62
	if(g_fptrCallBack_transmit_empty != NULLPTR)
    103c:	80 91 94 01 	lds	r24, 0x0194
    1040:	90 91 95 01 	lds	r25, 0x0195
    1044:	00 97       	sbiw	r24, 0x00	; 0
    1046:	29 f0       	breq	.+10     	; 0x1052 <__vector_12+0x40>
		(*g_fptrCallBack_transmit_empty)();
    1048:	e0 91 94 01 	lds	r30, 0x0194
    104c:	f0 91 95 01 	lds	r31, 0x0195
    1050:	09 95       	icall
	/*You must write in UDR or clear UDRIE(disable UDRE interrupt) bit otherwise a new interrupt will occur once the interrupt routine terminates. (You can't clear UDRE flag because it's read only.. its only cleared when UDR is written)*/
}
    1052:	cf 91       	pop	r28
    1054:	df 91       	pop	r29
    1056:	ff 91       	pop	r31
    1058:	ef 91       	pop	r30
    105a:	bf 91       	pop	r27
    105c:	af 91       	pop	r26
    105e:	9f 91       	pop	r25
    1060:	8f 91       	pop	r24
    1062:	7f 91       	pop	r23
    1064:	6f 91       	pop	r22
    1066:	5f 91       	pop	r21
    1068:	4f 91       	pop	r20
    106a:	3f 91       	pop	r19
    106c:	2f 91       	pop	r18
    106e:	0f 90       	pop	r0
    1070:	0f be       	out	0x3f, r0	; 63
    1072:	0f 90       	pop	r0
    1074:	1f 90       	pop	r1
    1076:	18 95       	reti

00001078 <TIMER0_OVF_init>:
static TIMER0_OVF_CLOCK g_clock = 0;
/*******************************************************************************
*                    			Functions Definitions
 *******************************************************************************/
void TIMER0_OVF_init(TIMER0_OVF_CLOCK a_clock)
{
    1078:	df 93       	push	r29
    107a:	cf 93       	push	r28
    107c:	0f 92       	push	r0
    107e:	cd b7       	in	r28, 0x3d	; 61
    1080:	de b7       	in	r29, 0x3e	; 62
    1082:	89 83       	std	Y+1, r24	; 0x01
	/*Disable Force compare output on OC0 pin*/
	CLEAR_BIT(TCCR0, FOC0);
    1084:	a3 e5       	ldi	r26, 0x53	; 83
    1086:	b0 e0       	ldi	r27, 0x00	; 0
    1088:	e3 e5       	ldi	r30, 0x53	; 83
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	80 81       	ld	r24, Z
    108e:	8f 77       	andi	r24, 0x7F	; 127
    1090:	8c 93       	st	X, r24
	/*Choosing Timer mode => Normal(overflow)*/
	CLEAR_BIT(TCCR0, WGM00);
    1092:	a3 e5       	ldi	r26, 0x53	; 83
    1094:	b0 e0       	ldi	r27, 0x00	; 0
    1096:	e3 e5       	ldi	r30, 0x53	; 83
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	80 81       	ld	r24, Z
    109c:	8f 7b       	andi	r24, 0xBF	; 191
    109e:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0, WGM01);
    10a0:	a3 e5       	ldi	r26, 0x53	; 83
    10a2:	b0 e0       	ldi	r27, 0x00	; 0
    10a4:	e3 e5       	ldi	r30, 0x53	; 83
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	80 81       	ld	r24, Z
    10aa:	87 7f       	andi	r24, 0xF7	; 247
    10ac:	8c 93       	st	X, r24
	/*Disable (disconnect) OC0 pin => normal mode*/
	CLEAR_BIT(TCCR0, COM00);
    10ae:	a3 e5       	ldi	r26, 0x53	; 83
    10b0:	b0 e0       	ldi	r27, 0x00	; 0
    10b2:	e3 e5       	ldi	r30, 0x53	; 83
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	80 81       	ld	r24, Z
    10b8:	8f 7e       	andi	r24, 0xEF	; 239
    10ba:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0, COM01);
    10bc:	a3 e5       	ldi	r26, 0x53	; 83
    10be:	b0 e0       	ldi	r27, 0x00	; 0
    10c0:	e3 e5       	ldi	r30, 0x53	; 83
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	8f 7d       	andi	r24, 0xDF	; 223
    10c8:	8c 93       	st	X, r24
	TCNT0 = 0;
    10ca:	e2 e5       	ldi	r30, 0x52	; 82
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	10 82       	st	Z, r1
	g_clock = a_clock;
    10d0:	89 81       	ldd	r24, Y+1	; 0x01
    10d2:	80 93 98 01 	sts	0x0198, r24
}
    10d6:	0f 90       	pop	r0
    10d8:	cf 91       	pop	r28
    10da:	df 91       	pop	r29
    10dc:	08 95       	ret

000010de <TIMER0_OVF_deinit>:
void TIMER0_OVF_deinit(void)
{
    10de:	df 93       	push	r29
    10e0:	cf 93       	push	r28
    10e2:	cd b7       	in	r28, 0x3d	; 61
    10e4:	de b7       	in	r29, 0x3e	; 62
	/*Disconnect clock and reinitialize TCCR0*/
	TCCR0 = 0;
    10e6:	e3 e5       	ldi	r30, 0x53	; 83
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	10 82       	st	Z, r1
	TCNT0 = 0;
    10ec:	e2 e5       	ldi	r30, 0x52	; 82
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	10 82       	st	Z, r1
	CLEAR_BIT(TIMSK, TOIE0); /*Disables interrupts*/
    10f2:	a9 e5       	ldi	r26, 0x59	; 89
    10f4:	b0 e0       	ldi	r27, 0x00	; 0
    10f6:	e9 e5       	ldi	r30, 0x59	; 89
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	80 81       	ld	r24, Z
    10fc:	8e 7f       	andi	r24, 0xFE	; 254
    10fe:	8c 93       	st	X, r24
	SET_BIT(TIFR, TOV0);
    1100:	a8 e5       	ldi	r26, 0x58	; 88
    1102:	b0 e0       	ldi	r27, 0x00	; 0
    1104:	e8 e5       	ldi	r30, 0x58	; 88
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	80 81       	ld	r24, Z
    110a:	81 60       	ori	r24, 0x01	; 1
    110c:	8c 93       	st	X, r24
	SET_BIT(TIFR, OCF0);
    110e:	a8 e5       	ldi	r26, 0x58	; 88
    1110:	b0 e0       	ldi	r27, 0x00	; 0
    1112:	e8 e5       	ldi	r30, 0x58	; 88
    1114:	f0 e0       	ldi	r31, 0x00	; 0
    1116:	80 81       	ld	r24, Z
    1118:	82 60       	ori	r24, 0x02	; 2
    111a:	8c 93       	st	X, r24
	g_fptr_callBackFunction = NULLPTR;
    111c:	10 92 97 01 	sts	0x0197, r1
    1120:	10 92 96 01 	sts	0x0196, r1
}
    1124:	cf 91       	pop	r28
    1126:	df 91       	pop	r29
    1128:	08 95       	ret

0000112a <TIMER0_OVF_stop>:
void TIMER0_OVF_stop(void)
{
    112a:	df 93       	push	r29
    112c:	cf 93       	push	r28
    112e:	cd b7       	in	r28, 0x3d	; 61
    1130:	de b7       	in	r29, 0x3e	; 62
	TCCR0 &= 0xF8;	/*Disconnect Clock*/
    1132:	a3 e5       	ldi	r26, 0x53	; 83
    1134:	b0 e0       	ldi	r27, 0x00	; 0
    1136:	e3 e5       	ldi	r30, 0x53	; 83
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	80 81       	ld	r24, Z
    113c:	88 7f       	andi	r24, 0xF8	; 248
    113e:	8c 93       	st	X, r24
}
    1140:	cf 91       	pop	r28
    1142:	df 91       	pop	r29
    1144:	08 95       	ret

00001146 <TIMER0_OVF_start>:
void TIMER0_OVF_start(const uint8 a_startValue)
{
    1146:	df 93       	push	r29
    1148:	cf 93       	push	r28
    114a:	0f 92       	push	r0
    114c:	cd b7       	in	r28, 0x3d	; 61
    114e:	de b7       	in	r29, 0x3e	; 62
    1150:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = a_startValue;
    1152:	e2 e5       	ldi	r30, 0x52	; 82
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	89 81       	ldd	r24, Y+1	; 0x01
    1158:	80 83       	st	Z, r24
	TCCR0 = (TCCR0 & 0xF8) | (g_clock & 0x07);
    115a:	a3 e5       	ldi	r26, 0x53	; 83
    115c:	b0 e0       	ldi	r27, 0x00	; 0
    115e:	e3 e5       	ldi	r30, 0x53	; 83
    1160:	f0 e0       	ldi	r31, 0x00	; 0
    1162:	80 81       	ld	r24, Z
    1164:	98 2f       	mov	r25, r24
    1166:	98 7f       	andi	r25, 0xF8	; 248
    1168:	80 91 98 01 	lds	r24, 0x0198
    116c:	87 70       	andi	r24, 0x07	; 7
    116e:	89 2b       	or	r24, r25
    1170:	8c 93       	st	X, r24
}
    1172:	0f 90       	pop	r0
    1174:	cf 91       	pop	r28
    1176:	df 91       	pop	r29
    1178:	08 95       	ret

0000117a <TIMER0_OVF_setStartValue>:
void TIMER0_OVF_setStartValue(const uint8 a_startValue)
{
    117a:	df 93       	push	r29
    117c:	cf 93       	push	r28
    117e:	0f 92       	push	r0
    1180:	cd b7       	in	r28, 0x3d	; 61
    1182:	de b7       	in	r29, 0x3e	; 62
    1184:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = a_startValue;
    1186:	e2 e5       	ldi	r30, 0x52	; 82
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	89 81       	ldd	r24, Y+1	; 0x01
    118c:	80 83       	st	Z, r24
}
    118e:	0f 90       	pop	r0
    1190:	cf 91       	pop	r28
    1192:	df 91       	pop	r29
    1194:	08 95       	ret

00001196 <TIMER0_OVF_interruptEnable>:
void TIMER0_OVF_interruptEnable(void (*a_fptr_callBackFunction)())
{
    1196:	df 93       	push	r29
    1198:	cf 93       	push	r28
    119a:	00 d0       	rcall	.+0      	; 0x119c <TIMER0_OVF_interruptEnable+0x6>
    119c:	cd b7       	in	r28, 0x3d	; 61
    119e:	de b7       	in	r29, 0x3e	; 62
    11a0:	9a 83       	std	Y+2, r25	; 0x02
    11a2:	89 83       	std	Y+1, r24	; 0x01
	if(a_fptr_callBackFunction != NULLPTR)
    11a4:	89 81       	ldd	r24, Y+1	; 0x01
    11a6:	9a 81       	ldd	r25, Y+2	; 0x02
    11a8:	00 97       	sbiw	r24, 0x00	; 0
    11aa:	69 f0       	breq	.+26     	; 0x11c6 <TIMER0_OVF_interruptEnable+0x30>
	{
		SET_BIT(TIMSK, TOIE0);								/*Enable interrupts*/
    11ac:	a9 e5       	ldi	r26, 0x59	; 89
    11ae:	b0 e0       	ldi	r27, 0x00	; 0
    11b0:	e9 e5       	ldi	r30, 0x59	; 89
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	80 81       	ld	r24, Z
    11b6:	81 60       	ori	r24, 0x01	; 1
    11b8:	8c 93       	st	X, r24
		g_fptr_callBackFunction = a_fptr_callBackFunction;	/*Sets call back function*/
    11ba:	89 81       	ldd	r24, Y+1	; 0x01
    11bc:	9a 81       	ldd	r25, Y+2	; 0x02
    11be:	90 93 97 01 	sts	0x0197, r25
    11c2:	80 93 96 01 	sts	0x0196, r24
	}
}
    11c6:	0f 90       	pop	r0
    11c8:	0f 90       	pop	r0
    11ca:	cf 91       	pop	r28
    11cc:	df 91       	pop	r29
    11ce:	08 95       	ret

000011d0 <__vector_9>:
ISR(TIMER0_OVF_vect)
{
    11d0:	1f 92       	push	r1
    11d2:	0f 92       	push	r0
    11d4:	0f b6       	in	r0, 0x3f	; 63
    11d6:	0f 92       	push	r0
    11d8:	11 24       	eor	r1, r1
    11da:	2f 93       	push	r18
    11dc:	3f 93       	push	r19
    11de:	4f 93       	push	r20
    11e0:	5f 93       	push	r21
    11e2:	6f 93       	push	r22
    11e4:	7f 93       	push	r23
    11e6:	8f 93       	push	r24
    11e8:	9f 93       	push	r25
    11ea:	af 93       	push	r26
    11ec:	bf 93       	push	r27
    11ee:	ef 93       	push	r30
    11f0:	ff 93       	push	r31
    11f2:	df 93       	push	r29
    11f4:	cf 93       	push	r28
    11f6:	cd b7       	in	r28, 0x3d	; 61
    11f8:	de b7       	in	r29, 0x3e	; 62
	if(g_fptr_callBackFunction != NULLPTR)
    11fa:	80 91 96 01 	lds	r24, 0x0196
    11fe:	90 91 97 01 	lds	r25, 0x0197
    1202:	00 97       	sbiw	r24, 0x00	; 0
    1204:	29 f0       	breq	.+10     	; 0x1210 <__vector_9+0x40>
	{
		(*g_fptr_callBackFunction)();
    1206:	e0 91 96 01 	lds	r30, 0x0196
    120a:	f0 91 97 01 	lds	r31, 0x0197
    120e:	09 95       	icall
	}
	/*The interrupt flag is cleared automatically*/
}
    1210:	cf 91       	pop	r28
    1212:	df 91       	pop	r29
    1214:	ff 91       	pop	r31
    1216:	ef 91       	pop	r30
    1218:	bf 91       	pop	r27
    121a:	af 91       	pop	r26
    121c:	9f 91       	pop	r25
    121e:	8f 91       	pop	r24
    1220:	7f 91       	pop	r23
    1222:	6f 91       	pop	r22
    1224:	5f 91       	pop	r21
    1226:	4f 91       	pop	r20
    1228:	3f 91       	pop	r19
    122a:	2f 91       	pop	r18
    122c:	0f 90       	pop	r0
    122e:	0f be       	out	0x3f, r0	; 63
    1230:	0f 90       	pop	r0
    1232:	1f 90       	pop	r1
    1234:	18 95       	reti

00001236 <LCD_init>:

/****************************************************************
 * 						functions definitions
 *****************************************************************/
void LCD_init(void)
{
    1236:	df 93       	push	r29
    1238:	cf 93       	push	r28
    123a:	cd b7       	in	r28, 0x3d	; 61
    123c:	de b7       	in	r29, 0x3e	; 62
	LCD_CTRL_PORT_DIR |= (1 << RS)|(1 << RW)|(1 << E);		/*Sets Control port pins as output pins*/
    123e:	aa e3       	ldi	r26, 0x3A	; 58
    1240:	b0 e0       	ldi	r27, 0x00	; 0
    1242:	ea e3       	ldi	r30, 0x3A	; 58
    1244:	f0 e0       	ldi	r31, 0x00	; 0
    1246:	80 81       	ld	r24, Z
    1248:	87 60       	ori	r24, 0x07	; 7
    124a:	8c 93       	st	X, r24

	#if(LCD_DATA_BITS_MODE == 8)
		LCD_DATA_PORT_DIR = 0xFF; 							/*Sets all data port pins as output pins*/
    124c:	e4 e3       	ldi	r30, 0x34	; 52
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	8f ef       	ldi	r24, 0xFF	; 255
    1252:	80 83       	st	Z, r24
		LCD_sendCommand(LCD_RETURN_HOME);					/*For clean initialization*/
    1254:	82 e0       	ldi	r24, 0x02	; 2
    1256:	0e 94 39 09 	call	0x1272	; 0x1272 <LCD_sendCommand>
		#endif
	#endif



	LCD_sendCommand(LCD_DISPLAY_MODE);					/*Sets Display mode 2 line display and 8 or 4 -bit interface*/
    125a:	88 e3       	ldi	r24, 0x38	; 56
    125c:	0e 94 39 09 	call	0x1272	; 0x1272 <LCD_sendCommand>
	LCD_sendCommand(LCD_CURSOR_MODE);					/*Sets Cursor Mode ON/OFF and Blink ON/OFF*/
    1260:	8c e0       	ldi	r24, 0x0C	; 12
    1262:	0e 94 39 09 	call	0x1272	; 0x1272 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_DISPLAY);					/*Clears screen on initialization*/
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	0e 94 39 09 	call	0x1272	; 0x1272 <LCD_sendCommand>

}
    126c:	cf 91       	pop	r28
    126e:	df 91       	pop	r29
    1270:	08 95       	ret

00001272 <LCD_sendCommand>:
void LCD_sendCommand(uint8 command)
{
    1272:	df 93       	push	r29
    1274:	cf 93       	push	r28
    1276:	cd b7       	in	r28, 0x3d	; 61
    1278:	de b7       	in	r29, 0x3e	; 62
    127a:	e9 97       	sbiw	r28, 0x39	; 57
    127c:	0f b6       	in	r0, 0x3f	; 63
    127e:	f8 94       	cli
    1280:	de bf       	out	0x3e, r29	; 62
    1282:	0f be       	out	0x3f, r0	; 63
    1284:	cd bf       	out	0x3d, r28	; 61
    1286:	89 af       	std	Y+57, r24	; 0x39
	CLEAR_BIT(LCD_CTRL_PORT, RW);	/*Clears RW	=> write data*/
    1288:	ab e3       	ldi	r26, 0x3B	; 59
    128a:	b0 e0       	ldi	r27, 0x00	; 0
    128c:	eb e3       	ldi	r30, 0x3B	; 59
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	80 81       	ld	r24, Z
    1292:	8d 7f       	andi	r24, 0xFD	; 253
    1294:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT, RS);	/*Clears RS => transfer instrucion data*/
    1296:	ab e3       	ldi	r26, 0x3B	; 59
    1298:	b0 e0       	ldi	r27, 0x00	; 0
    129a:	eb e3       	ldi	r30, 0x3B	; 59
    129c:	f0 e0       	ldi	r31, 0x00	; 0
    129e:	80 81       	ld	r24, Z
    12a0:	8b 7f       	andi	r24, 0xFB	; 251
    12a2:	8c 93       	st	X, r24
    12a4:	80 e0       	ldi	r24, 0x00	; 0
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	a0 e8       	ldi	r26, 0x80	; 128
    12aa:	bf e3       	ldi	r27, 0x3F	; 63
    12ac:	8d ab       	std	Y+53, r24	; 0x35
    12ae:	9e ab       	std	Y+54, r25	; 0x36
    12b0:	af ab       	std	Y+55, r26	; 0x37
    12b2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12b4:	6d a9       	ldd	r22, Y+53	; 0x35
    12b6:	7e a9       	ldd	r23, Y+54	; 0x36
    12b8:	8f a9       	ldd	r24, Y+55	; 0x37
    12ba:	98 ad       	ldd	r25, Y+56	; 0x38
    12bc:	20 e0       	ldi	r18, 0x00	; 0
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	4a ef       	ldi	r20, 0xFA	; 250
    12c2:	54 e4       	ldi	r21, 0x44	; 68
    12c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12c8:	dc 01       	movw	r26, r24
    12ca:	cb 01       	movw	r24, r22
    12cc:	89 ab       	std	Y+49, r24	; 0x31
    12ce:	9a ab       	std	Y+50, r25	; 0x32
    12d0:	ab ab       	std	Y+51, r26	; 0x33
    12d2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    12d4:	69 a9       	ldd	r22, Y+49	; 0x31
    12d6:	7a a9       	ldd	r23, Y+50	; 0x32
    12d8:	8b a9       	ldd	r24, Y+51	; 0x33
    12da:	9c a9       	ldd	r25, Y+52	; 0x34
    12dc:	20 e0       	ldi	r18, 0x00	; 0
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	40 e8       	ldi	r20, 0x80	; 128
    12e2:	5f e3       	ldi	r21, 0x3F	; 63
    12e4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12e8:	88 23       	and	r24, r24
    12ea:	2c f4       	brge	.+10     	; 0x12f6 <LCD_sendCommand+0x84>
		__ticks = 1;
    12ec:	81 e0       	ldi	r24, 0x01	; 1
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	98 ab       	std	Y+48, r25	; 0x30
    12f2:	8f a7       	std	Y+47, r24	; 0x2f
    12f4:	3f c0       	rjmp	.+126    	; 0x1374 <LCD_sendCommand+0x102>
	else if (__tmp > 65535)
    12f6:	69 a9       	ldd	r22, Y+49	; 0x31
    12f8:	7a a9       	ldd	r23, Y+50	; 0x32
    12fa:	8b a9       	ldd	r24, Y+51	; 0x33
    12fc:	9c a9       	ldd	r25, Y+52	; 0x34
    12fe:	20 e0       	ldi	r18, 0x00	; 0
    1300:	3f ef       	ldi	r19, 0xFF	; 255
    1302:	4f e7       	ldi	r20, 0x7F	; 127
    1304:	57 e4       	ldi	r21, 0x47	; 71
    1306:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    130a:	18 16       	cp	r1, r24
    130c:	4c f5       	brge	.+82     	; 0x1360 <LCD_sendCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    130e:	6d a9       	ldd	r22, Y+53	; 0x35
    1310:	7e a9       	ldd	r23, Y+54	; 0x36
    1312:	8f a9       	ldd	r24, Y+55	; 0x37
    1314:	98 ad       	ldd	r25, Y+56	; 0x38
    1316:	20 e0       	ldi	r18, 0x00	; 0
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	40 e2       	ldi	r20, 0x20	; 32
    131c:	51 e4       	ldi	r21, 0x41	; 65
    131e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1322:	dc 01       	movw	r26, r24
    1324:	cb 01       	movw	r24, r22
    1326:	bc 01       	movw	r22, r24
    1328:	cd 01       	movw	r24, r26
    132a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    132e:	dc 01       	movw	r26, r24
    1330:	cb 01       	movw	r24, r22
    1332:	98 ab       	std	Y+48, r25	; 0x30
    1334:	8f a7       	std	Y+47, r24	; 0x2f
    1336:	0f c0       	rjmp	.+30     	; 0x1356 <LCD_sendCommand+0xe4>
    1338:	88 ec       	ldi	r24, 0xC8	; 200
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	9e a7       	std	Y+46, r25	; 0x2e
    133e:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1340:	8d a5       	ldd	r24, Y+45	; 0x2d
    1342:	9e a5       	ldd	r25, Y+46	; 0x2e
    1344:	01 97       	sbiw	r24, 0x01	; 1
    1346:	f1 f7       	brne	.-4      	; 0x1344 <LCD_sendCommand+0xd2>
    1348:	9e a7       	std	Y+46, r25	; 0x2e
    134a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    134c:	8f a5       	ldd	r24, Y+47	; 0x2f
    134e:	98 a9       	ldd	r25, Y+48	; 0x30
    1350:	01 97       	sbiw	r24, 0x01	; 1
    1352:	98 ab       	std	Y+48, r25	; 0x30
    1354:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1356:	8f a5       	ldd	r24, Y+47	; 0x2f
    1358:	98 a9       	ldd	r25, Y+48	; 0x30
    135a:	00 97       	sbiw	r24, 0x00	; 0
    135c:	69 f7       	brne	.-38     	; 0x1338 <LCD_sendCommand+0xc6>
    135e:	14 c0       	rjmp	.+40     	; 0x1388 <LCD_sendCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1360:	69 a9       	ldd	r22, Y+49	; 0x31
    1362:	7a a9       	ldd	r23, Y+50	; 0x32
    1364:	8b a9       	ldd	r24, Y+51	; 0x33
    1366:	9c a9       	ldd	r25, Y+52	; 0x34
    1368:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    136c:	dc 01       	movw	r26, r24
    136e:	cb 01       	movw	r24, r22
    1370:	98 ab       	std	Y+48, r25	; 0x30
    1372:	8f a7       	std	Y+47, r24	; 0x2f
    1374:	8f a5       	ldd	r24, Y+47	; 0x2f
    1376:	98 a9       	ldd	r25, Y+48	; 0x30
    1378:	9c a7       	std	Y+44, r25	; 0x2c
    137a:	8b a7       	std	Y+43, r24	; 0x2b
    137c:	8b a5       	ldd	r24, Y+43	; 0x2b
    137e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1380:	01 97       	sbiw	r24, 0x01	; 1
    1382:	f1 f7       	brne	.-4      	; 0x1380 <LCD_sendCommand+0x10e>
    1384:	9c a7       	std	Y+44, r25	; 0x2c
    1386:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);					/*Delay tas - tr = 50 - 16 = 34ns [should be done in assembly (NOP) to be more precise]*/
	SET_BIT(LCD_CTRL_PORT, E);		/*Sets data Enable bit*/
    1388:	ab e3       	ldi	r26, 0x3B	; 59
    138a:	b0 e0       	ldi	r27, 0x00	; 0
    138c:	eb e3       	ldi	r30, 0x3B	; 59
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	80 81       	ld	r24, Z
    1392:	81 60       	ori	r24, 0x01	; 1
    1394:	8c 93       	st	X, r24
    1396:	80 e0       	ldi	r24, 0x00	; 0
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	a0 e8       	ldi	r26, 0x80	; 128
    139c:	bf e3       	ldi	r27, 0x3F	; 63
    139e:	8f a3       	std	Y+39, r24	; 0x27
    13a0:	98 a7       	std	Y+40, r25	; 0x28
    13a2:	a9 a7       	std	Y+41, r26	; 0x29
    13a4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13a6:	6f a1       	ldd	r22, Y+39	; 0x27
    13a8:	78 a5       	ldd	r23, Y+40	; 0x28
    13aa:	89 a5       	ldd	r24, Y+41	; 0x29
    13ac:	9a a5       	ldd	r25, Y+42	; 0x2a
    13ae:	20 e0       	ldi	r18, 0x00	; 0
    13b0:	30 e0       	ldi	r19, 0x00	; 0
    13b2:	4a ef       	ldi	r20, 0xFA	; 250
    13b4:	54 e4       	ldi	r21, 0x44	; 68
    13b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13ba:	dc 01       	movw	r26, r24
    13bc:	cb 01       	movw	r24, r22
    13be:	8b a3       	std	Y+35, r24	; 0x23
    13c0:	9c a3       	std	Y+36, r25	; 0x24
    13c2:	ad a3       	std	Y+37, r26	; 0x25
    13c4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    13c6:	6b a1       	ldd	r22, Y+35	; 0x23
    13c8:	7c a1       	ldd	r23, Y+36	; 0x24
    13ca:	8d a1       	ldd	r24, Y+37	; 0x25
    13cc:	9e a1       	ldd	r25, Y+38	; 0x26
    13ce:	20 e0       	ldi	r18, 0x00	; 0
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	40 e8       	ldi	r20, 0x80	; 128
    13d4:	5f e3       	ldi	r21, 0x3F	; 63
    13d6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13da:	88 23       	and	r24, r24
    13dc:	2c f4       	brge	.+10     	; 0x13e8 <LCD_sendCommand+0x176>
		__ticks = 1;
    13de:	81 e0       	ldi	r24, 0x01	; 1
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	9a a3       	std	Y+34, r25	; 0x22
    13e4:	89 a3       	std	Y+33, r24	; 0x21
    13e6:	3f c0       	rjmp	.+126    	; 0x1466 <LCD_sendCommand+0x1f4>
	else if (__tmp > 65535)
    13e8:	6b a1       	ldd	r22, Y+35	; 0x23
    13ea:	7c a1       	ldd	r23, Y+36	; 0x24
    13ec:	8d a1       	ldd	r24, Y+37	; 0x25
    13ee:	9e a1       	ldd	r25, Y+38	; 0x26
    13f0:	20 e0       	ldi	r18, 0x00	; 0
    13f2:	3f ef       	ldi	r19, 0xFF	; 255
    13f4:	4f e7       	ldi	r20, 0x7F	; 127
    13f6:	57 e4       	ldi	r21, 0x47	; 71
    13f8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13fc:	18 16       	cp	r1, r24
    13fe:	4c f5       	brge	.+82     	; 0x1452 <LCD_sendCommand+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1400:	6f a1       	ldd	r22, Y+39	; 0x27
    1402:	78 a5       	ldd	r23, Y+40	; 0x28
    1404:	89 a5       	ldd	r24, Y+41	; 0x29
    1406:	9a a5       	ldd	r25, Y+42	; 0x2a
    1408:	20 e0       	ldi	r18, 0x00	; 0
    140a:	30 e0       	ldi	r19, 0x00	; 0
    140c:	40 e2       	ldi	r20, 0x20	; 32
    140e:	51 e4       	ldi	r21, 0x41	; 65
    1410:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1414:	dc 01       	movw	r26, r24
    1416:	cb 01       	movw	r24, r22
    1418:	bc 01       	movw	r22, r24
    141a:	cd 01       	movw	r24, r26
    141c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1420:	dc 01       	movw	r26, r24
    1422:	cb 01       	movw	r24, r22
    1424:	9a a3       	std	Y+34, r25	; 0x22
    1426:	89 a3       	std	Y+33, r24	; 0x21
    1428:	0f c0       	rjmp	.+30     	; 0x1448 <LCD_sendCommand+0x1d6>
    142a:	88 ec       	ldi	r24, 0xC8	; 200
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	98 a3       	std	Y+32, r25	; 0x20
    1430:	8f 8f       	std	Y+31, r24	; 0x1f
    1432:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1434:	98 a1       	ldd	r25, Y+32	; 0x20
    1436:	01 97       	sbiw	r24, 0x01	; 1
    1438:	f1 f7       	brne	.-4      	; 0x1436 <LCD_sendCommand+0x1c4>
    143a:	98 a3       	std	Y+32, r25	; 0x20
    143c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    143e:	89 a1       	ldd	r24, Y+33	; 0x21
    1440:	9a a1       	ldd	r25, Y+34	; 0x22
    1442:	01 97       	sbiw	r24, 0x01	; 1
    1444:	9a a3       	std	Y+34, r25	; 0x22
    1446:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1448:	89 a1       	ldd	r24, Y+33	; 0x21
    144a:	9a a1       	ldd	r25, Y+34	; 0x22
    144c:	00 97       	sbiw	r24, 0x00	; 0
    144e:	69 f7       	brne	.-38     	; 0x142a <LCD_sendCommand+0x1b8>
    1450:	14 c0       	rjmp	.+40     	; 0x147a <LCD_sendCommand+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1452:	6b a1       	ldd	r22, Y+35	; 0x23
    1454:	7c a1       	ldd	r23, Y+36	; 0x24
    1456:	8d a1       	ldd	r24, Y+37	; 0x25
    1458:	9e a1       	ldd	r25, Y+38	; 0x26
    145a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    145e:	dc 01       	movw	r26, r24
    1460:	cb 01       	movw	r24, r22
    1462:	9a a3       	std	Y+34, r25	; 0x22
    1464:	89 a3       	std	Y+33, r24	; 0x21
    1466:	89 a1       	ldd	r24, Y+33	; 0x21
    1468:	9a a1       	ldd	r25, Y+34	; 0x22
    146a:	9e 8f       	std	Y+30, r25	; 0x1e
    146c:	8d 8f       	std	Y+29, r24	; 0x1d
    146e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1470:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1472:	01 97       	sbiw	r24, 0x01	; 1
    1474:	f1 f7       	brne	.-4      	; 0x1472 <LCD_sendCommand+0x200>
    1476:	9e 8f       	std	Y+30, r25	; 0x1e
    1478:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);					/*Delay tpw-tdsw = 290 - 100 = 190ns [should be done in assembly (NOP) to be more precise]*/
	#if(LCD_DATA_BITS_MODE == 8)
		LCD_DATA_PORT = command;		/*Sends the command*/
    147a:	e5 e3       	ldi	r30, 0x35	; 53
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	89 ad       	ldd	r24, Y+57	; 0x39
    1480:	80 83       	st	Z, r24
    1482:	80 e0       	ldi	r24, 0x00	; 0
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	a0 e8       	ldi	r26, 0x80	; 128
    1488:	bf e3       	ldi	r27, 0x3F	; 63
    148a:	89 8f       	std	Y+25, r24	; 0x19
    148c:	9a 8f       	std	Y+26, r25	; 0x1a
    148e:	ab 8f       	std	Y+27, r26	; 0x1b
    1490:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1492:	69 8d       	ldd	r22, Y+25	; 0x19
    1494:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1496:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1498:	9c 8d       	ldd	r25, Y+28	; 0x1c
    149a:	20 e0       	ldi	r18, 0x00	; 0
    149c:	30 e0       	ldi	r19, 0x00	; 0
    149e:	4a ef       	ldi	r20, 0xFA	; 250
    14a0:	54 e4       	ldi	r21, 0x44	; 68
    14a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14a6:	dc 01       	movw	r26, r24
    14a8:	cb 01       	movw	r24, r22
    14aa:	8d 8b       	std	Y+21, r24	; 0x15
    14ac:	9e 8b       	std	Y+22, r25	; 0x16
    14ae:	af 8b       	std	Y+23, r26	; 0x17
    14b0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    14b2:	6d 89       	ldd	r22, Y+21	; 0x15
    14b4:	7e 89       	ldd	r23, Y+22	; 0x16
    14b6:	8f 89       	ldd	r24, Y+23	; 0x17
    14b8:	98 8d       	ldd	r25, Y+24	; 0x18
    14ba:	20 e0       	ldi	r18, 0x00	; 0
    14bc:	30 e0       	ldi	r19, 0x00	; 0
    14be:	40 e8       	ldi	r20, 0x80	; 128
    14c0:	5f e3       	ldi	r21, 0x3F	; 63
    14c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14c6:	88 23       	and	r24, r24
    14c8:	2c f4       	brge	.+10     	; 0x14d4 <LCD_sendCommand+0x262>
		__ticks = 1;
    14ca:	81 e0       	ldi	r24, 0x01	; 1
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	9c 8b       	std	Y+20, r25	; 0x14
    14d0:	8b 8b       	std	Y+19, r24	; 0x13
    14d2:	3f c0       	rjmp	.+126    	; 0x1552 <LCD_sendCommand+0x2e0>
	else if (__tmp > 65535)
    14d4:	6d 89       	ldd	r22, Y+21	; 0x15
    14d6:	7e 89       	ldd	r23, Y+22	; 0x16
    14d8:	8f 89       	ldd	r24, Y+23	; 0x17
    14da:	98 8d       	ldd	r25, Y+24	; 0x18
    14dc:	20 e0       	ldi	r18, 0x00	; 0
    14de:	3f ef       	ldi	r19, 0xFF	; 255
    14e0:	4f e7       	ldi	r20, 0x7F	; 127
    14e2:	57 e4       	ldi	r21, 0x47	; 71
    14e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14e8:	18 16       	cp	r1, r24
    14ea:	4c f5       	brge	.+82     	; 0x153e <LCD_sendCommand+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14ec:	69 8d       	ldd	r22, Y+25	; 0x19
    14ee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14f2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14f4:	20 e0       	ldi	r18, 0x00	; 0
    14f6:	30 e0       	ldi	r19, 0x00	; 0
    14f8:	40 e2       	ldi	r20, 0x20	; 32
    14fa:	51 e4       	ldi	r21, 0x41	; 65
    14fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1500:	dc 01       	movw	r26, r24
    1502:	cb 01       	movw	r24, r22
    1504:	bc 01       	movw	r22, r24
    1506:	cd 01       	movw	r24, r26
    1508:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    150c:	dc 01       	movw	r26, r24
    150e:	cb 01       	movw	r24, r22
    1510:	9c 8b       	std	Y+20, r25	; 0x14
    1512:	8b 8b       	std	Y+19, r24	; 0x13
    1514:	0f c0       	rjmp	.+30     	; 0x1534 <LCD_sendCommand+0x2c2>
    1516:	88 ec       	ldi	r24, 0xC8	; 200
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	9a 8b       	std	Y+18, r25	; 0x12
    151c:	89 8b       	std	Y+17, r24	; 0x11
    151e:	89 89       	ldd	r24, Y+17	; 0x11
    1520:	9a 89       	ldd	r25, Y+18	; 0x12
    1522:	01 97       	sbiw	r24, 0x01	; 1
    1524:	f1 f7       	brne	.-4      	; 0x1522 <LCD_sendCommand+0x2b0>
    1526:	9a 8b       	std	Y+18, r25	; 0x12
    1528:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    152a:	8b 89       	ldd	r24, Y+19	; 0x13
    152c:	9c 89       	ldd	r25, Y+20	; 0x14
    152e:	01 97       	sbiw	r24, 0x01	; 1
    1530:	9c 8b       	std	Y+20, r25	; 0x14
    1532:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1534:	8b 89       	ldd	r24, Y+19	; 0x13
    1536:	9c 89       	ldd	r25, Y+20	; 0x14
    1538:	00 97       	sbiw	r24, 0x00	; 0
    153a:	69 f7       	brne	.-38     	; 0x1516 <LCD_sendCommand+0x2a4>
    153c:	14 c0       	rjmp	.+40     	; 0x1566 <LCD_sendCommand+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    153e:	6d 89       	ldd	r22, Y+21	; 0x15
    1540:	7e 89       	ldd	r23, Y+22	; 0x16
    1542:	8f 89       	ldd	r24, Y+23	; 0x17
    1544:	98 8d       	ldd	r25, Y+24	; 0x18
    1546:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    154a:	dc 01       	movw	r26, r24
    154c:	cb 01       	movw	r24, r22
    154e:	9c 8b       	std	Y+20, r25	; 0x14
    1550:	8b 8b       	std	Y+19, r24	; 0x13
    1552:	8b 89       	ldd	r24, Y+19	; 0x13
    1554:	9c 89       	ldd	r25, Y+20	; 0x14
    1556:	98 8b       	std	Y+16, r25	; 0x10
    1558:	8f 87       	std	Y+15, r24	; 0x0f
    155a:	8f 85       	ldd	r24, Y+15	; 0x0f
    155c:	98 89       	ldd	r25, Y+16	; 0x10
    155e:	01 97       	sbiw	r24, 0x01	; 1
    1560:	f1 f7       	brne	.-4      	; 0x155e <LCD_sendCommand+0x2ec>
    1562:	98 8b       	std	Y+16, r25	; 0x10
    1564:	8f 87       	std	Y+15, r24	; 0x0f
		#else
			LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (command & 0x0F);
		#endif
	#endif
	_delay_ms(1);					/*Delay tdsw = 100ns [should be done in assembly (NOP) to be more precise]*/
	CLEAR_BIT(LCD_CTRL_PORT, E);	/*Clears data Enable Bit*/
    1566:	ab e3       	ldi	r26, 0x3B	; 59
    1568:	b0 e0       	ldi	r27, 0x00	; 0
    156a:	eb e3       	ldi	r30, 0x3B	; 59
    156c:	f0 e0       	ldi	r31, 0x00	; 0
    156e:	80 81       	ld	r24, Z
    1570:	8e 7f       	andi	r24, 0xFE	; 254
    1572:	8c 93       	st	X, r24
    1574:	80 e0       	ldi	r24, 0x00	; 0
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	a0 e8       	ldi	r26, 0x80	; 128
    157a:	bf e3       	ldi	r27, 0x3F	; 63
    157c:	8b 87       	std	Y+11, r24	; 0x0b
    157e:	9c 87       	std	Y+12, r25	; 0x0c
    1580:	ad 87       	std	Y+13, r26	; 0x0d
    1582:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1584:	6b 85       	ldd	r22, Y+11	; 0x0b
    1586:	7c 85       	ldd	r23, Y+12	; 0x0c
    1588:	8d 85       	ldd	r24, Y+13	; 0x0d
    158a:	9e 85       	ldd	r25, Y+14	; 0x0e
    158c:	20 e0       	ldi	r18, 0x00	; 0
    158e:	30 e0       	ldi	r19, 0x00	; 0
    1590:	4a ef       	ldi	r20, 0xFA	; 250
    1592:	54 e4       	ldi	r21, 0x44	; 68
    1594:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1598:	dc 01       	movw	r26, r24
    159a:	cb 01       	movw	r24, r22
    159c:	8f 83       	std	Y+7, r24	; 0x07
    159e:	98 87       	std	Y+8, r25	; 0x08
    15a0:	a9 87       	std	Y+9, r26	; 0x09
    15a2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    15a4:	6f 81       	ldd	r22, Y+7	; 0x07
    15a6:	78 85       	ldd	r23, Y+8	; 0x08
    15a8:	89 85       	ldd	r24, Y+9	; 0x09
    15aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    15ac:	20 e0       	ldi	r18, 0x00	; 0
    15ae:	30 e0       	ldi	r19, 0x00	; 0
    15b0:	40 e8       	ldi	r20, 0x80	; 128
    15b2:	5f e3       	ldi	r21, 0x3F	; 63
    15b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15b8:	88 23       	and	r24, r24
    15ba:	2c f4       	brge	.+10     	; 0x15c6 <LCD_sendCommand+0x354>
		__ticks = 1;
    15bc:	81 e0       	ldi	r24, 0x01	; 1
    15be:	90 e0       	ldi	r25, 0x00	; 0
    15c0:	9e 83       	std	Y+6, r25	; 0x06
    15c2:	8d 83       	std	Y+5, r24	; 0x05
    15c4:	3f c0       	rjmp	.+126    	; 0x1644 <LCD_sendCommand+0x3d2>
	else if (__tmp > 65535)
    15c6:	6f 81       	ldd	r22, Y+7	; 0x07
    15c8:	78 85       	ldd	r23, Y+8	; 0x08
    15ca:	89 85       	ldd	r24, Y+9	; 0x09
    15cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    15ce:	20 e0       	ldi	r18, 0x00	; 0
    15d0:	3f ef       	ldi	r19, 0xFF	; 255
    15d2:	4f e7       	ldi	r20, 0x7F	; 127
    15d4:	57 e4       	ldi	r21, 0x47	; 71
    15d6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15da:	18 16       	cp	r1, r24
    15dc:	4c f5       	brge	.+82     	; 0x1630 <LCD_sendCommand+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15de:	6b 85       	ldd	r22, Y+11	; 0x0b
    15e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    15e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    15e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    15e6:	20 e0       	ldi	r18, 0x00	; 0
    15e8:	30 e0       	ldi	r19, 0x00	; 0
    15ea:	40 e2       	ldi	r20, 0x20	; 32
    15ec:	51 e4       	ldi	r21, 0x41	; 65
    15ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15f2:	dc 01       	movw	r26, r24
    15f4:	cb 01       	movw	r24, r22
    15f6:	bc 01       	movw	r22, r24
    15f8:	cd 01       	movw	r24, r26
    15fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15fe:	dc 01       	movw	r26, r24
    1600:	cb 01       	movw	r24, r22
    1602:	9e 83       	std	Y+6, r25	; 0x06
    1604:	8d 83       	std	Y+5, r24	; 0x05
    1606:	0f c0       	rjmp	.+30     	; 0x1626 <LCD_sendCommand+0x3b4>
    1608:	88 ec       	ldi	r24, 0xC8	; 200
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	9c 83       	std	Y+4, r25	; 0x04
    160e:	8b 83       	std	Y+3, r24	; 0x03
    1610:	8b 81       	ldd	r24, Y+3	; 0x03
    1612:	9c 81       	ldd	r25, Y+4	; 0x04
    1614:	01 97       	sbiw	r24, 0x01	; 1
    1616:	f1 f7       	brne	.-4      	; 0x1614 <LCD_sendCommand+0x3a2>
    1618:	9c 83       	std	Y+4, r25	; 0x04
    161a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    161c:	8d 81       	ldd	r24, Y+5	; 0x05
    161e:	9e 81       	ldd	r25, Y+6	; 0x06
    1620:	01 97       	sbiw	r24, 0x01	; 1
    1622:	9e 83       	std	Y+6, r25	; 0x06
    1624:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1626:	8d 81       	ldd	r24, Y+5	; 0x05
    1628:	9e 81       	ldd	r25, Y+6	; 0x06
    162a:	00 97       	sbiw	r24, 0x00	; 0
    162c:	69 f7       	brne	.-38     	; 0x1608 <LCD_sendCommand+0x396>
    162e:	14 c0       	rjmp	.+40     	; 0x1658 <LCD_sendCommand+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1630:	6f 81       	ldd	r22, Y+7	; 0x07
    1632:	78 85       	ldd	r23, Y+8	; 0x08
    1634:	89 85       	ldd	r24, Y+9	; 0x09
    1636:	9a 85       	ldd	r25, Y+10	; 0x0a
    1638:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    163c:	dc 01       	movw	r26, r24
    163e:	cb 01       	movw	r24, r22
    1640:	9e 83       	std	Y+6, r25	; 0x06
    1642:	8d 83       	std	Y+5, r24	; 0x05
    1644:	8d 81       	ldd	r24, Y+5	; 0x05
    1646:	9e 81       	ldd	r25, Y+6	; 0x06
    1648:	9a 83       	std	Y+2, r25	; 0x02
    164a:	89 83       	std	Y+1, r24	; 0x01
    164c:	89 81       	ldd	r24, Y+1	; 0x01
    164e:	9a 81       	ldd	r25, Y+2	; 0x02
    1650:	01 97       	sbiw	r24, 0x01	; 1
    1652:	f1 f7       	brne	.-4      	; 0x1650 <LCD_sendCommand+0x3de>
    1654:	9a 83       	std	Y+2, r25	; 0x02
    1656:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);					/*Delay th = 13ns [should be done in assembly (NOP) to be more precise]*/
}
    1658:	e9 96       	adiw	r28, 0x39	; 57
    165a:	0f b6       	in	r0, 0x3f	; 63
    165c:	f8 94       	cli
    165e:	de bf       	out	0x3e, r29	; 62
    1660:	0f be       	out	0x3f, r0	; 63
    1662:	cd bf       	out	0x3d, r28	; 61
    1664:	cf 91       	pop	r28
    1666:	df 91       	pop	r29
    1668:	08 95       	ret

0000166a <LCD_displayOneCharacter>:
void LCD_displayOneCharacter(uint8 data)
{
    166a:	df 93       	push	r29
    166c:	cf 93       	push	r28
    166e:	cd b7       	in	r28, 0x3d	; 61
    1670:	de b7       	in	r29, 0x3e	; 62
    1672:	e9 97       	sbiw	r28, 0x39	; 57
    1674:	0f b6       	in	r0, 0x3f	; 63
    1676:	f8 94       	cli
    1678:	de bf       	out	0x3e, r29	; 62
    167a:	0f be       	out	0x3f, r0	; 63
    167c:	cd bf       	out	0x3d, r28	; 61
    167e:	89 af       	std	Y+57, r24	; 0x39
	CLEAR_BIT(LCD_CTRL_PORT, RW);	/*Clears RW	=> write data*/
    1680:	ab e3       	ldi	r26, 0x3B	; 59
    1682:	b0 e0       	ldi	r27, 0x00	; 0
    1684:	eb e3       	ldi	r30, 0x3B	; 59
    1686:	f0 e0       	ldi	r31, 0x00	; 0
    1688:	80 81       	ld	r24, Z
    168a:	8d 7f       	andi	r24, 0xFD	; 253
    168c:	8c 93       	st	X, r24
	SET_BIT(LCD_CTRL_PORT, RS);		/*Sets RS => transfer display data*/
    168e:	ab e3       	ldi	r26, 0x3B	; 59
    1690:	b0 e0       	ldi	r27, 0x00	; 0
    1692:	eb e3       	ldi	r30, 0x3B	; 59
    1694:	f0 e0       	ldi	r31, 0x00	; 0
    1696:	80 81       	ld	r24, Z
    1698:	84 60       	ori	r24, 0x04	; 4
    169a:	8c 93       	st	X, r24
    169c:	80 e0       	ldi	r24, 0x00	; 0
    169e:	90 e0       	ldi	r25, 0x00	; 0
    16a0:	a0 e8       	ldi	r26, 0x80	; 128
    16a2:	bf e3       	ldi	r27, 0x3F	; 63
    16a4:	8d ab       	std	Y+53, r24	; 0x35
    16a6:	9e ab       	std	Y+54, r25	; 0x36
    16a8:	af ab       	std	Y+55, r26	; 0x37
    16aa:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16ac:	6d a9       	ldd	r22, Y+53	; 0x35
    16ae:	7e a9       	ldd	r23, Y+54	; 0x36
    16b0:	8f a9       	ldd	r24, Y+55	; 0x37
    16b2:	98 ad       	ldd	r25, Y+56	; 0x38
    16b4:	20 e0       	ldi	r18, 0x00	; 0
    16b6:	30 e0       	ldi	r19, 0x00	; 0
    16b8:	4a ef       	ldi	r20, 0xFA	; 250
    16ba:	54 e4       	ldi	r21, 0x44	; 68
    16bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16c0:	dc 01       	movw	r26, r24
    16c2:	cb 01       	movw	r24, r22
    16c4:	89 ab       	std	Y+49, r24	; 0x31
    16c6:	9a ab       	std	Y+50, r25	; 0x32
    16c8:	ab ab       	std	Y+51, r26	; 0x33
    16ca:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    16cc:	69 a9       	ldd	r22, Y+49	; 0x31
    16ce:	7a a9       	ldd	r23, Y+50	; 0x32
    16d0:	8b a9       	ldd	r24, Y+51	; 0x33
    16d2:	9c a9       	ldd	r25, Y+52	; 0x34
    16d4:	20 e0       	ldi	r18, 0x00	; 0
    16d6:	30 e0       	ldi	r19, 0x00	; 0
    16d8:	40 e8       	ldi	r20, 0x80	; 128
    16da:	5f e3       	ldi	r21, 0x3F	; 63
    16dc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16e0:	88 23       	and	r24, r24
    16e2:	2c f4       	brge	.+10     	; 0x16ee <LCD_displayOneCharacter+0x84>
		__ticks = 1;
    16e4:	81 e0       	ldi	r24, 0x01	; 1
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	98 ab       	std	Y+48, r25	; 0x30
    16ea:	8f a7       	std	Y+47, r24	; 0x2f
    16ec:	3f c0       	rjmp	.+126    	; 0x176c <LCD_displayOneCharacter+0x102>
	else if (__tmp > 65535)
    16ee:	69 a9       	ldd	r22, Y+49	; 0x31
    16f0:	7a a9       	ldd	r23, Y+50	; 0x32
    16f2:	8b a9       	ldd	r24, Y+51	; 0x33
    16f4:	9c a9       	ldd	r25, Y+52	; 0x34
    16f6:	20 e0       	ldi	r18, 0x00	; 0
    16f8:	3f ef       	ldi	r19, 0xFF	; 255
    16fa:	4f e7       	ldi	r20, 0x7F	; 127
    16fc:	57 e4       	ldi	r21, 0x47	; 71
    16fe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1702:	18 16       	cp	r1, r24
    1704:	4c f5       	brge	.+82     	; 0x1758 <LCD_displayOneCharacter+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1706:	6d a9       	ldd	r22, Y+53	; 0x35
    1708:	7e a9       	ldd	r23, Y+54	; 0x36
    170a:	8f a9       	ldd	r24, Y+55	; 0x37
    170c:	98 ad       	ldd	r25, Y+56	; 0x38
    170e:	20 e0       	ldi	r18, 0x00	; 0
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	40 e2       	ldi	r20, 0x20	; 32
    1714:	51 e4       	ldi	r21, 0x41	; 65
    1716:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    171a:	dc 01       	movw	r26, r24
    171c:	cb 01       	movw	r24, r22
    171e:	bc 01       	movw	r22, r24
    1720:	cd 01       	movw	r24, r26
    1722:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1726:	dc 01       	movw	r26, r24
    1728:	cb 01       	movw	r24, r22
    172a:	98 ab       	std	Y+48, r25	; 0x30
    172c:	8f a7       	std	Y+47, r24	; 0x2f
    172e:	0f c0       	rjmp	.+30     	; 0x174e <LCD_displayOneCharacter+0xe4>
    1730:	88 ec       	ldi	r24, 0xC8	; 200
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	9e a7       	std	Y+46, r25	; 0x2e
    1736:	8d a7       	std	Y+45, r24	; 0x2d
    1738:	8d a5       	ldd	r24, Y+45	; 0x2d
    173a:	9e a5       	ldd	r25, Y+46	; 0x2e
    173c:	01 97       	sbiw	r24, 0x01	; 1
    173e:	f1 f7       	brne	.-4      	; 0x173c <LCD_displayOneCharacter+0xd2>
    1740:	9e a7       	std	Y+46, r25	; 0x2e
    1742:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1744:	8f a5       	ldd	r24, Y+47	; 0x2f
    1746:	98 a9       	ldd	r25, Y+48	; 0x30
    1748:	01 97       	sbiw	r24, 0x01	; 1
    174a:	98 ab       	std	Y+48, r25	; 0x30
    174c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    174e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1750:	98 a9       	ldd	r25, Y+48	; 0x30
    1752:	00 97       	sbiw	r24, 0x00	; 0
    1754:	69 f7       	brne	.-38     	; 0x1730 <LCD_displayOneCharacter+0xc6>
    1756:	14 c0       	rjmp	.+40     	; 0x1780 <LCD_displayOneCharacter+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1758:	69 a9       	ldd	r22, Y+49	; 0x31
    175a:	7a a9       	ldd	r23, Y+50	; 0x32
    175c:	8b a9       	ldd	r24, Y+51	; 0x33
    175e:	9c a9       	ldd	r25, Y+52	; 0x34
    1760:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1764:	dc 01       	movw	r26, r24
    1766:	cb 01       	movw	r24, r22
    1768:	98 ab       	std	Y+48, r25	; 0x30
    176a:	8f a7       	std	Y+47, r24	; 0x2f
    176c:	8f a5       	ldd	r24, Y+47	; 0x2f
    176e:	98 a9       	ldd	r25, Y+48	; 0x30
    1770:	9c a7       	std	Y+44, r25	; 0x2c
    1772:	8b a7       	std	Y+43, r24	; 0x2b
    1774:	8b a5       	ldd	r24, Y+43	; 0x2b
    1776:	9c a5       	ldd	r25, Y+44	; 0x2c
    1778:	01 97       	sbiw	r24, 0x01	; 1
    177a:	f1 f7       	brne	.-4      	; 0x1778 <LCD_displayOneCharacter+0x10e>
    177c:	9c a7       	std	Y+44, r25	; 0x2c
    177e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);					/*Delay tas - tr = 50 - 16 = 34ns [should be done in assembly (NOP) to be more precise]*/
	SET_BIT(LCD_CTRL_PORT, E);		/*Sets data Enable bit*/
    1780:	ab e3       	ldi	r26, 0x3B	; 59
    1782:	b0 e0       	ldi	r27, 0x00	; 0
    1784:	eb e3       	ldi	r30, 0x3B	; 59
    1786:	f0 e0       	ldi	r31, 0x00	; 0
    1788:	80 81       	ld	r24, Z
    178a:	81 60       	ori	r24, 0x01	; 1
    178c:	8c 93       	st	X, r24
    178e:	80 e0       	ldi	r24, 0x00	; 0
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	a0 e8       	ldi	r26, 0x80	; 128
    1794:	bf e3       	ldi	r27, 0x3F	; 63
    1796:	8f a3       	std	Y+39, r24	; 0x27
    1798:	98 a7       	std	Y+40, r25	; 0x28
    179a:	a9 a7       	std	Y+41, r26	; 0x29
    179c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    179e:	6f a1       	ldd	r22, Y+39	; 0x27
    17a0:	78 a5       	ldd	r23, Y+40	; 0x28
    17a2:	89 a5       	ldd	r24, Y+41	; 0x29
    17a4:	9a a5       	ldd	r25, Y+42	; 0x2a
    17a6:	20 e0       	ldi	r18, 0x00	; 0
    17a8:	30 e0       	ldi	r19, 0x00	; 0
    17aa:	4a ef       	ldi	r20, 0xFA	; 250
    17ac:	54 e4       	ldi	r21, 0x44	; 68
    17ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17b2:	dc 01       	movw	r26, r24
    17b4:	cb 01       	movw	r24, r22
    17b6:	8b a3       	std	Y+35, r24	; 0x23
    17b8:	9c a3       	std	Y+36, r25	; 0x24
    17ba:	ad a3       	std	Y+37, r26	; 0x25
    17bc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    17be:	6b a1       	ldd	r22, Y+35	; 0x23
    17c0:	7c a1       	ldd	r23, Y+36	; 0x24
    17c2:	8d a1       	ldd	r24, Y+37	; 0x25
    17c4:	9e a1       	ldd	r25, Y+38	; 0x26
    17c6:	20 e0       	ldi	r18, 0x00	; 0
    17c8:	30 e0       	ldi	r19, 0x00	; 0
    17ca:	40 e8       	ldi	r20, 0x80	; 128
    17cc:	5f e3       	ldi	r21, 0x3F	; 63
    17ce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17d2:	88 23       	and	r24, r24
    17d4:	2c f4       	brge	.+10     	; 0x17e0 <LCD_displayOneCharacter+0x176>
		__ticks = 1;
    17d6:	81 e0       	ldi	r24, 0x01	; 1
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	9a a3       	std	Y+34, r25	; 0x22
    17dc:	89 a3       	std	Y+33, r24	; 0x21
    17de:	3f c0       	rjmp	.+126    	; 0x185e <LCD_displayOneCharacter+0x1f4>
	else if (__tmp > 65535)
    17e0:	6b a1       	ldd	r22, Y+35	; 0x23
    17e2:	7c a1       	ldd	r23, Y+36	; 0x24
    17e4:	8d a1       	ldd	r24, Y+37	; 0x25
    17e6:	9e a1       	ldd	r25, Y+38	; 0x26
    17e8:	20 e0       	ldi	r18, 0x00	; 0
    17ea:	3f ef       	ldi	r19, 0xFF	; 255
    17ec:	4f e7       	ldi	r20, 0x7F	; 127
    17ee:	57 e4       	ldi	r21, 0x47	; 71
    17f0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17f4:	18 16       	cp	r1, r24
    17f6:	4c f5       	brge	.+82     	; 0x184a <LCD_displayOneCharacter+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17f8:	6f a1       	ldd	r22, Y+39	; 0x27
    17fa:	78 a5       	ldd	r23, Y+40	; 0x28
    17fc:	89 a5       	ldd	r24, Y+41	; 0x29
    17fe:	9a a5       	ldd	r25, Y+42	; 0x2a
    1800:	20 e0       	ldi	r18, 0x00	; 0
    1802:	30 e0       	ldi	r19, 0x00	; 0
    1804:	40 e2       	ldi	r20, 0x20	; 32
    1806:	51 e4       	ldi	r21, 0x41	; 65
    1808:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    180c:	dc 01       	movw	r26, r24
    180e:	cb 01       	movw	r24, r22
    1810:	bc 01       	movw	r22, r24
    1812:	cd 01       	movw	r24, r26
    1814:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1818:	dc 01       	movw	r26, r24
    181a:	cb 01       	movw	r24, r22
    181c:	9a a3       	std	Y+34, r25	; 0x22
    181e:	89 a3       	std	Y+33, r24	; 0x21
    1820:	0f c0       	rjmp	.+30     	; 0x1840 <LCD_displayOneCharacter+0x1d6>
    1822:	88 ec       	ldi	r24, 0xC8	; 200
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	98 a3       	std	Y+32, r25	; 0x20
    1828:	8f 8f       	std	Y+31, r24	; 0x1f
    182a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    182c:	98 a1       	ldd	r25, Y+32	; 0x20
    182e:	01 97       	sbiw	r24, 0x01	; 1
    1830:	f1 f7       	brne	.-4      	; 0x182e <LCD_displayOneCharacter+0x1c4>
    1832:	98 a3       	std	Y+32, r25	; 0x20
    1834:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1836:	89 a1       	ldd	r24, Y+33	; 0x21
    1838:	9a a1       	ldd	r25, Y+34	; 0x22
    183a:	01 97       	sbiw	r24, 0x01	; 1
    183c:	9a a3       	std	Y+34, r25	; 0x22
    183e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1840:	89 a1       	ldd	r24, Y+33	; 0x21
    1842:	9a a1       	ldd	r25, Y+34	; 0x22
    1844:	00 97       	sbiw	r24, 0x00	; 0
    1846:	69 f7       	brne	.-38     	; 0x1822 <LCD_displayOneCharacter+0x1b8>
    1848:	14 c0       	rjmp	.+40     	; 0x1872 <LCD_displayOneCharacter+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    184a:	6b a1       	ldd	r22, Y+35	; 0x23
    184c:	7c a1       	ldd	r23, Y+36	; 0x24
    184e:	8d a1       	ldd	r24, Y+37	; 0x25
    1850:	9e a1       	ldd	r25, Y+38	; 0x26
    1852:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1856:	dc 01       	movw	r26, r24
    1858:	cb 01       	movw	r24, r22
    185a:	9a a3       	std	Y+34, r25	; 0x22
    185c:	89 a3       	std	Y+33, r24	; 0x21
    185e:	89 a1       	ldd	r24, Y+33	; 0x21
    1860:	9a a1       	ldd	r25, Y+34	; 0x22
    1862:	9e 8f       	std	Y+30, r25	; 0x1e
    1864:	8d 8f       	std	Y+29, r24	; 0x1d
    1866:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1868:	9e 8d       	ldd	r25, Y+30	; 0x1e
    186a:	01 97       	sbiw	r24, 0x01	; 1
    186c:	f1 f7       	brne	.-4      	; 0x186a <LCD_displayOneCharacter+0x200>
    186e:	9e 8f       	std	Y+30, r25	; 0x1e
    1870:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);					/*Delay tpw-tdsw = 290 - 100 = 190ns [should be done in assembly (NOP) to be more precise]*/
	#if(LCD_DATA_BITS_MODE == 8)
		LCD_DATA_PORT = data;		/*Sends the command*/
    1872:	e5 e3       	ldi	r30, 0x35	; 53
    1874:	f0 e0       	ldi	r31, 0x00	; 0
    1876:	89 ad       	ldd	r24, Y+57	; 0x39
    1878:	80 83       	st	Z, r24
    187a:	80 e0       	ldi	r24, 0x00	; 0
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	a0 e8       	ldi	r26, 0x80	; 128
    1880:	bf e3       	ldi	r27, 0x3F	; 63
    1882:	89 8f       	std	Y+25, r24	; 0x19
    1884:	9a 8f       	std	Y+26, r25	; 0x1a
    1886:	ab 8f       	std	Y+27, r26	; 0x1b
    1888:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    188a:	69 8d       	ldd	r22, Y+25	; 0x19
    188c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    188e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1890:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1892:	20 e0       	ldi	r18, 0x00	; 0
    1894:	30 e0       	ldi	r19, 0x00	; 0
    1896:	4a ef       	ldi	r20, 0xFA	; 250
    1898:	54 e4       	ldi	r21, 0x44	; 68
    189a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    189e:	dc 01       	movw	r26, r24
    18a0:	cb 01       	movw	r24, r22
    18a2:	8d 8b       	std	Y+21, r24	; 0x15
    18a4:	9e 8b       	std	Y+22, r25	; 0x16
    18a6:	af 8b       	std	Y+23, r26	; 0x17
    18a8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    18aa:	6d 89       	ldd	r22, Y+21	; 0x15
    18ac:	7e 89       	ldd	r23, Y+22	; 0x16
    18ae:	8f 89       	ldd	r24, Y+23	; 0x17
    18b0:	98 8d       	ldd	r25, Y+24	; 0x18
    18b2:	20 e0       	ldi	r18, 0x00	; 0
    18b4:	30 e0       	ldi	r19, 0x00	; 0
    18b6:	40 e8       	ldi	r20, 0x80	; 128
    18b8:	5f e3       	ldi	r21, 0x3F	; 63
    18ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18be:	88 23       	and	r24, r24
    18c0:	2c f4       	brge	.+10     	; 0x18cc <LCD_displayOneCharacter+0x262>
		__ticks = 1;
    18c2:	81 e0       	ldi	r24, 0x01	; 1
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	9c 8b       	std	Y+20, r25	; 0x14
    18c8:	8b 8b       	std	Y+19, r24	; 0x13
    18ca:	3f c0       	rjmp	.+126    	; 0x194a <LCD_displayOneCharacter+0x2e0>
	else if (__tmp > 65535)
    18cc:	6d 89       	ldd	r22, Y+21	; 0x15
    18ce:	7e 89       	ldd	r23, Y+22	; 0x16
    18d0:	8f 89       	ldd	r24, Y+23	; 0x17
    18d2:	98 8d       	ldd	r25, Y+24	; 0x18
    18d4:	20 e0       	ldi	r18, 0x00	; 0
    18d6:	3f ef       	ldi	r19, 0xFF	; 255
    18d8:	4f e7       	ldi	r20, 0x7F	; 127
    18da:	57 e4       	ldi	r21, 0x47	; 71
    18dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18e0:	18 16       	cp	r1, r24
    18e2:	4c f5       	brge	.+82     	; 0x1936 <LCD_displayOneCharacter+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18e4:	69 8d       	ldd	r22, Y+25	; 0x19
    18e6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18e8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18ea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18ec:	20 e0       	ldi	r18, 0x00	; 0
    18ee:	30 e0       	ldi	r19, 0x00	; 0
    18f0:	40 e2       	ldi	r20, 0x20	; 32
    18f2:	51 e4       	ldi	r21, 0x41	; 65
    18f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18f8:	dc 01       	movw	r26, r24
    18fa:	cb 01       	movw	r24, r22
    18fc:	bc 01       	movw	r22, r24
    18fe:	cd 01       	movw	r24, r26
    1900:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1904:	dc 01       	movw	r26, r24
    1906:	cb 01       	movw	r24, r22
    1908:	9c 8b       	std	Y+20, r25	; 0x14
    190a:	8b 8b       	std	Y+19, r24	; 0x13
    190c:	0f c0       	rjmp	.+30     	; 0x192c <LCD_displayOneCharacter+0x2c2>
    190e:	88 ec       	ldi	r24, 0xC8	; 200
    1910:	90 e0       	ldi	r25, 0x00	; 0
    1912:	9a 8b       	std	Y+18, r25	; 0x12
    1914:	89 8b       	std	Y+17, r24	; 0x11
    1916:	89 89       	ldd	r24, Y+17	; 0x11
    1918:	9a 89       	ldd	r25, Y+18	; 0x12
    191a:	01 97       	sbiw	r24, 0x01	; 1
    191c:	f1 f7       	brne	.-4      	; 0x191a <LCD_displayOneCharacter+0x2b0>
    191e:	9a 8b       	std	Y+18, r25	; 0x12
    1920:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1922:	8b 89       	ldd	r24, Y+19	; 0x13
    1924:	9c 89       	ldd	r25, Y+20	; 0x14
    1926:	01 97       	sbiw	r24, 0x01	; 1
    1928:	9c 8b       	std	Y+20, r25	; 0x14
    192a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    192c:	8b 89       	ldd	r24, Y+19	; 0x13
    192e:	9c 89       	ldd	r25, Y+20	; 0x14
    1930:	00 97       	sbiw	r24, 0x00	; 0
    1932:	69 f7       	brne	.-38     	; 0x190e <LCD_displayOneCharacter+0x2a4>
    1934:	14 c0       	rjmp	.+40     	; 0x195e <LCD_displayOneCharacter+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1936:	6d 89       	ldd	r22, Y+21	; 0x15
    1938:	7e 89       	ldd	r23, Y+22	; 0x16
    193a:	8f 89       	ldd	r24, Y+23	; 0x17
    193c:	98 8d       	ldd	r25, Y+24	; 0x18
    193e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1942:	dc 01       	movw	r26, r24
    1944:	cb 01       	movw	r24, r22
    1946:	9c 8b       	std	Y+20, r25	; 0x14
    1948:	8b 8b       	std	Y+19, r24	; 0x13
    194a:	8b 89       	ldd	r24, Y+19	; 0x13
    194c:	9c 89       	ldd	r25, Y+20	; 0x14
    194e:	98 8b       	std	Y+16, r25	; 0x10
    1950:	8f 87       	std	Y+15, r24	; 0x0f
    1952:	8f 85       	ldd	r24, Y+15	; 0x0f
    1954:	98 89       	ldd	r25, Y+16	; 0x10
    1956:	01 97       	sbiw	r24, 0x01	; 1
    1958:	f1 f7       	brne	.-4      	; 0x1956 <LCD_displayOneCharacter+0x2ec>
    195a:	98 8b       	std	Y+16, r25	; 0x10
    195c:	8f 87       	std	Y+15, r24	; 0x0f
		#else
			LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (data & 0x0F);
		#endif
	#endif
	_delay_ms(1);					/*Delay tdsw = 100ns [should be done in assembly (NOP) to be more precise]*/
	CLEAR_BIT(LCD_CTRL_PORT, E);	/*Clears data Enable Bit*/
    195e:	ab e3       	ldi	r26, 0x3B	; 59
    1960:	b0 e0       	ldi	r27, 0x00	; 0
    1962:	eb e3       	ldi	r30, 0x3B	; 59
    1964:	f0 e0       	ldi	r31, 0x00	; 0
    1966:	80 81       	ld	r24, Z
    1968:	8e 7f       	andi	r24, 0xFE	; 254
    196a:	8c 93       	st	X, r24
    196c:	80 e0       	ldi	r24, 0x00	; 0
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	a0 e8       	ldi	r26, 0x80	; 128
    1972:	bf e3       	ldi	r27, 0x3F	; 63
    1974:	8b 87       	std	Y+11, r24	; 0x0b
    1976:	9c 87       	std	Y+12, r25	; 0x0c
    1978:	ad 87       	std	Y+13, r26	; 0x0d
    197a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    197c:	6b 85       	ldd	r22, Y+11	; 0x0b
    197e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1980:	8d 85       	ldd	r24, Y+13	; 0x0d
    1982:	9e 85       	ldd	r25, Y+14	; 0x0e
    1984:	20 e0       	ldi	r18, 0x00	; 0
    1986:	30 e0       	ldi	r19, 0x00	; 0
    1988:	4a ef       	ldi	r20, 0xFA	; 250
    198a:	54 e4       	ldi	r21, 0x44	; 68
    198c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1990:	dc 01       	movw	r26, r24
    1992:	cb 01       	movw	r24, r22
    1994:	8f 83       	std	Y+7, r24	; 0x07
    1996:	98 87       	std	Y+8, r25	; 0x08
    1998:	a9 87       	std	Y+9, r26	; 0x09
    199a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    199c:	6f 81       	ldd	r22, Y+7	; 0x07
    199e:	78 85       	ldd	r23, Y+8	; 0x08
    19a0:	89 85       	ldd	r24, Y+9	; 0x09
    19a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    19a4:	20 e0       	ldi	r18, 0x00	; 0
    19a6:	30 e0       	ldi	r19, 0x00	; 0
    19a8:	40 e8       	ldi	r20, 0x80	; 128
    19aa:	5f e3       	ldi	r21, 0x3F	; 63
    19ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19b0:	88 23       	and	r24, r24
    19b2:	2c f4       	brge	.+10     	; 0x19be <LCD_displayOneCharacter+0x354>
		__ticks = 1;
    19b4:	81 e0       	ldi	r24, 0x01	; 1
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	9e 83       	std	Y+6, r25	; 0x06
    19ba:	8d 83       	std	Y+5, r24	; 0x05
    19bc:	3f c0       	rjmp	.+126    	; 0x1a3c <LCD_displayOneCharacter+0x3d2>
	else if (__tmp > 65535)
    19be:	6f 81       	ldd	r22, Y+7	; 0x07
    19c0:	78 85       	ldd	r23, Y+8	; 0x08
    19c2:	89 85       	ldd	r24, Y+9	; 0x09
    19c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    19c6:	20 e0       	ldi	r18, 0x00	; 0
    19c8:	3f ef       	ldi	r19, 0xFF	; 255
    19ca:	4f e7       	ldi	r20, 0x7F	; 127
    19cc:	57 e4       	ldi	r21, 0x47	; 71
    19ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19d2:	18 16       	cp	r1, r24
    19d4:	4c f5       	brge	.+82     	; 0x1a28 <LCD_displayOneCharacter+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    19d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    19da:	8d 85       	ldd	r24, Y+13	; 0x0d
    19dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    19de:	20 e0       	ldi	r18, 0x00	; 0
    19e0:	30 e0       	ldi	r19, 0x00	; 0
    19e2:	40 e2       	ldi	r20, 0x20	; 32
    19e4:	51 e4       	ldi	r21, 0x41	; 65
    19e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19ea:	dc 01       	movw	r26, r24
    19ec:	cb 01       	movw	r24, r22
    19ee:	bc 01       	movw	r22, r24
    19f0:	cd 01       	movw	r24, r26
    19f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19f6:	dc 01       	movw	r26, r24
    19f8:	cb 01       	movw	r24, r22
    19fa:	9e 83       	std	Y+6, r25	; 0x06
    19fc:	8d 83       	std	Y+5, r24	; 0x05
    19fe:	0f c0       	rjmp	.+30     	; 0x1a1e <LCD_displayOneCharacter+0x3b4>
    1a00:	88 ec       	ldi	r24, 0xC8	; 200
    1a02:	90 e0       	ldi	r25, 0x00	; 0
    1a04:	9c 83       	std	Y+4, r25	; 0x04
    1a06:	8b 83       	std	Y+3, r24	; 0x03
    1a08:	8b 81       	ldd	r24, Y+3	; 0x03
    1a0a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a0c:	01 97       	sbiw	r24, 0x01	; 1
    1a0e:	f1 f7       	brne	.-4      	; 0x1a0c <LCD_displayOneCharacter+0x3a2>
    1a10:	9c 83       	std	Y+4, r25	; 0x04
    1a12:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a14:	8d 81       	ldd	r24, Y+5	; 0x05
    1a16:	9e 81       	ldd	r25, Y+6	; 0x06
    1a18:	01 97       	sbiw	r24, 0x01	; 1
    1a1a:	9e 83       	std	Y+6, r25	; 0x06
    1a1c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a1e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a20:	9e 81       	ldd	r25, Y+6	; 0x06
    1a22:	00 97       	sbiw	r24, 0x00	; 0
    1a24:	69 f7       	brne	.-38     	; 0x1a00 <LCD_displayOneCharacter+0x396>
    1a26:	14 c0       	rjmp	.+40     	; 0x1a50 <LCD_displayOneCharacter+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a28:	6f 81       	ldd	r22, Y+7	; 0x07
    1a2a:	78 85       	ldd	r23, Y+8	; 0x08
    1a2c:	89 85       	ldd	r24, Y+9	; 0x09
    1a2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a34:	dc 01       	movw	r26, r24
    1a36:	cb 01       	movw	r24, r22
    1a38:	9e 83       	std	Y+6, r25	; 0x06
    1a3a:	8d 83       	std	Y+5, r24	; 0x05
    1a3c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a3e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a40:	9a 83       	std	Y+2, r25	; 0x02
    1a42:	89 83       	std	Y+1, r24	; 0x01
    1a44:	89 81       	ldd	r24, Y+1	; 0x01
    1a46:	9a 81       	ldd	r25, Y+2	; 0x02
    1a48:	01 97       	sbiw	r24, 0x01	; 1
    1a4a:	f1 f7       	brne	.-4      	; 0x1a48 <LCD_displayOneCharacter+0x3de>
    1a4c:	9a 83       	std	Y+2, r25	; 0x02
    1a4e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);					/*Delay th = 13ns [should be done in assembly (NOP) to be more precise]*/
}
    1a50:	e9 96       	adiw	r28, 0x39	; 57
    1a52:	0f b6       	in	r0, 0x3f	; 63
    1a54:	f8 94       	cli
    1a56:	de bf       	out	0x3e, r29	; 62
    1a58:	0f be       	out	0x3f, r0	; 63
    1a5a:	cd bf       	out	0x3d, r28	; 61
    1a5c:	cf 91       	pop	r28
    1a5e:	df 91       	pop	r29
    1a60:	08 95       	ret

00001a62 <LCD_displayString>:
void LCD_displayString(char* str)
{
    1a62:	df 93       	push	r29
    1a64:	cf 93       	push	r28
    1a66:	00 d0       	rcall	.+0      	; 0x1a68 <LCD_displayString+0x6>
    1a68:	cd b7       	in	r28, 0x3d	; 61
    1a6a:	de b7       	in	r29, 0x3e	; 62
    1a6c:	9a 83       	std	Y+2, r25	; 0x02
    1a6e:	89 83       	std	Y+1, r24	; 0x01
    1a70:	0a c0       	rjmp	.+20     	; 0x1a86 <LCD_displayString+0x24>
	while((*str) != '\0')
	{
		LCD_displayOneCharacter(*str);
    1a72:	e9 81       	ldd	r30, Y+1	; 0x01
    1a74:	fa 81       	ldd	r31, Y+2	; 0x02
    1a76:	80 81       	ld	r24, Z
    1a78:	0e 94 35 0b 	call	0x166a	; 0x166a <LCD_displayOneCharacter>
		++str;
    1a7c:	89 81       	ldd	r24, Y+1	; 0x01
    1a7e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a80:	01 96       	adiw	r24, 0x01	; 1
    1a82:	9a 83       	std	Y+2, r25	; 0x02
    1a84:	89 83       	std	Y+1, r24	; 0x01
	CLEAR_BIT(LCD_CTRL_PORT, E);	/*Clears data Enable Bit*/
	_delay_ms(1);					/*Delay th = 13ns [should be done in assembly (NOP) to be more precise]*/
}
void LCD_displayString(char* str)
{
	while((*str) != '\0')
    1a86:	e9 81       	ldd	r30, Y+1	; 0x01
    1a88:	fa 81       	ldd	r31, Y+2	; 0x02
    1a8a:	80 81       	ld	r24, Z
    1a8c:	88 23       	and	r24, r24
    1a8e:	89 f7       	brne	.-30     	; 0x1a72 <LCD_displayString+0x10>
	{
		LCD_displayOneCharacter(*str);
		++str;
	}
}
    1a90:	0f 90       	pop	r0
    1a92:	0f 90       	pop	r0
    1a94:	cf 91       	pop	r28
    1a96:	df 91       	pop	r29
    1a98:	08 95       	ret

00001a9a <LCD_clearScreen>:
void LCD_clearScreen(void)
{
    1a9a:	df 93       	push	r29
    1a9c:	cf 93       	push	r28
    1a9e:	cd b7       	in	r28, 0x3d	; 61
    1aa0:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_DISPLAY);
    1aa2:	81 e0       	ldi	r24, 0x01	; 1
    1aa4:	0e 94 39 09 	call	0x1272	; 0x1272 <LCD_sendCommand>
}
    1aa8:	cf 91       	pop	r28
    1aaa:	df 91       	pop	r29
    1aac:	08 95       	ret

00001aae <LCD_goToRowColumn>:
void LCD_goToRowColumn(uint8 row, uint8 col)
{
    1aae:	df 93       	push	r29
    1ab0:	cf 93       	push	r28
    1ab2:	00 d0       	rcall	.+0      	; 0x1ab4 <LCD_goToRowColumn+0x6>
    1ab4:	00 d0       	rcall	.+0      	; 0x1ab6 <LCD_goToRowColumn+0x8>
    1ab6:	cd b7       	in	r28, 0x3d	; 61
    1ab8:	de b7       	in	r29, 0x3e	; 62
    1aba:	89 83       	std	Y+1, r24	; 0x01
    1abc:	6a 83       	std	Y+2, r22	; 0x02
	if(col >= 1 && col <= 16)
    1abe:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac0:	88 23       	and	r24, r24
    1ac2:	d1 f1       	breq	.+116    	; 0x1b38 <LCD_goToRowColumn+0x8a>
    1ac4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac6:	81 31       	cpi	r24, 0x11	; 17
    1ac8:	b8 f5       	brcc	.+110    	; 0x1b38 <LCD_goToRowColumn+0x8a>
	{
		switch(row)
    1aca:	89 81       	ldd	r24, Y+1	; 0x01
    1acc:	28 2f       	mov	r18, r24
    1ace:	30 e0       	ldi	r19, 0x00	; 0
    1ad0:	3c 83       	std	Y+4, r19	; 0x04
    1ad2:	2b 83       	std	Y+3, r18	; 0x03
    1ad4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ad8:	82 30       	cpi	r24, 0x02	; 2
    1ada:	91 05       	cpc	r25, r1
    1adc:	e1 f0       	breq	.+56     	; 0x1b16 <LCD_goToRowColumn+0x68>
    1ade:	2b 81       	ldd	r18, Y+3	; 0x03
    1ae0:	3c 81       	ldd	r19, Y+4	; 0x04
    1ae2:	23 30       	cpi	r18, 0x03	; 3
    1ae4:	31 05       	cpc	r19, r1
    1ae6:	34 f4       	brge	.+12     	; 0x1af4 <LCD_goToRowColumn+0x46>
    1ae8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aea:	9c 81       	ldd	r25, Y+4	; 0x04
    1aec:	81 30       	cpi	r24, 0x01	; 1
    1aee:	91 05       	cpc	r25, r1
    1af0:	61 f0       	breq	.+24     	; 0x1b0a <LCD_goToRowColumn+0x5c>
    1af2:	22 c0       	rjmp	.+68     	; 0x1b38 <LCD_goToRowColumn+0x8a>
    1af4:	2b 81       	ldd	r18, Y+3	; 0x03
    1af6:	3c 81       	ldd	r19, Y+4	; 0x04
    1af8:	23 30       	cpi	r18, 0x03	; 3
    1afa:	31 05       	cpc	r19, r1
    1afc:	91 f0       	breq	.+36     	; 0x1b22 <LCD_goToRowColumn+0x74>
    1afe:	8b 81       	ldd	r24, Y+3	; 0x03
    1b00:	9c 81       	ldd	r25, Y+4	; 0x04
    1b02:	84 30       	cpi	r24, 0x04	; 4
    1b04:	91 05       	cpc	r25, r1
    1b06:	99 f0       	breq	.+38     	; 0x1b2e <LCD_goToRowColumn+0x80>
    1b08:	17 c0       	rjmp	.+46     	; 0x1b38 <LCD_goToRowColumn+0x8a>
		{
		case 1:
			LCD_sendCommand(LCD_SET_CURSOR_LOCATION | (col-1));
    1b0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b0c:	81 50       	subi	r24, 0x01	; 1
    1b0e:	80 68       	ori	r24, 0x80	; 128
    1b10:	0e 94 39 09 	call	0x1272	; 0x1272 <LCD_sendCommand>
    1b14:	11 c0       	rjmp	.+34     	; 0x1b38 <LCD_goToRowColumn+0x8a>
			break;
		case 2:
			LCD_sendCommand(LCD_SET_CURSOR_LOCATION | 0x40 | (col-1));
    1b16:	8a 81       	ldd	r24, Y+2	; 0x02
    1b18:	81 50       	subi	r24, 0x01	; 1
    1b1a:	80 6c       	ori	r24, 0xC0	; 192
    1b1c:	0e 94 39 09 	call	0x1272	; 0x1272 <LCD_sendCommand>
    1b20:	0b c0       	rjmp	.+22     	; 0x1b38 <LCD_goToRowColumn+0x8a>
			break;
		case 3:
			LCD_sendCommand(LCD_SET_CURSOR_LOCATION | 0x10 | (col-1));
    1b22:	8a 81       	ldd	r24, Y+2	; 0x02
    1b24:	81 50       	subi	r24, 0x01	; 1
    1b26:	80 69       	ori	r24, 0x90	; 144
    1b28:	0e 94 39 09 	call	0x1272	; 0x1272 <LCD_sendCommand>
    1b2c:	05 c0       	rjmp	.+10     	; 0x1b38 <LCD_goToRowColumn+0x8a>
			break;
		case 4:
			LCD_sendCommand(LCD_SET_CURSOR_LOCATION | 0x50 | (col-1));
    1b2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b30:	81 50       	subi	r24, 0x01	; 1
    1b32:	80 6d       	ori	r24, 0xD0	; 208
    1b34:	0e 94 39 09 	call	0x1272	; 0x1272 <LCD_sendCommand>
			break;
		default:
			break;
		}
	}
}
    1b38:	0f 90       	pop	r0
    1b3a:	0f 90       	pop	r0
    1b3c:	0f 90       	pop	r0
    1b3e:	0f 90       	pop	r0
    1b40:	cf 91       	pop	r28
    1b42:	df 91       	pop	r29
    1b44:	08 95       	ret

00001b46 <LCD_displayStringAtRowColumn>:
void LCD_displayStringAtRowColumn(uint8 row, uint8 col, char* str)
{
    1b46:	df 93       	push	r29
    1b48:	cf 93       	push	r28
    1b4a:	00 d0       	rcall	.+0      	; 0x1b4c <LCD_displayStringAtRowColumn+0x6>
    1b4c:	00 d0       	rcall	.+0      	; 0x1b4e <LCD_displayStringAtRowColumn+0x8>
    1b4e:	cd b7       	in	r28, 0x3d	; 61
    1b50:	de b7       	in	r29, 0x3e	; 62
    1b52:	89 83       	std	Y+1, r24	; 0x01
    1b54:	6a 83       	std	Y+2, r22	; 0x02
    1b56:	5c 83       	std	Y+4, r21	; 0x04
    1b58:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row, col);
    1b5a:	89 81       	ldd	r24, Y+1	; 0x01
    1b5c:	6a 81       	ldd	r22, Y+2	; 0x02
    1b5e:	0e 94 57 0d 	call	0x1aae	; 0x1aae <LCD_goToRowColumn>
	LCD_displayString(str);
    1b62:	8b 81       	ldd	r24, Y+3	; 0x03
    1b64:	9c 81       	ldd	r25, Y+4	; 0x04
    1b66:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <LCD_displayString>
}
    1b6a:	0f 90       	pop	r0
    1b6c:	0f 90       	pop	r0
    1b6e:	0f 90       	pop	r0
    1b70:	0f 90       	pop	r0
    1b72:	cf 91       	pop	r28
    1b74:	df 91       	pop	r29
    1b76:	08 95       	ret

00001b78 <LCD_displayInteger>:
void LCD_displayInteger(int data)
{
    1b78:	df 93       	push	r29
    1b7a:	cf 93       	push	r28
    1b7c:	cd b7       	in	r28, 0x3d	; 61
    1b7e:	de b7       	in	r29, 0x3e	; 62
    1b80:	2d 97       	sbiw	r28, 0x0d	; 13
    1b82:	0f b6       	in	r0, 0x3f	; 63
    1b84:	f8 94       	cli
    1b86:	de bf       	out	0x3e, r29	; 62
    1b88:	0f be       	out	0x3f, r0	; 63
    1b8a:	cd bf       	out	0x3d, r28	; 61
    1b8c:	9d 87       	std	Y+13, r25	; 0x0d
    1b8e:	8c 87       	std	Y+12, r24	; 0x0c
	char str[11];			/*Maximum integer to be displayed is 10 digits + '/0' character*/
	itoa(data, str, 10);	/*Converts integer to string*/
    1b90:	8c 85       	ldd	r24, Y+12	; 0x0c
    1b92:	9d 85       	ldd	r25, Y+13	; 0x0d
    1b94:	9e 01       	movw	r18, r28
    1b96:	2f 5f       	subi	r18, 0xFF	; 255
    1b98:	3f 4f       	sbci	r19, 0xFF	; 255
    1b9a:	b9 01       	movw	r22, r18
    1b9c:	4a e0       	ldi	r20, 0x0A	; 10
    1b9e:	50 e0       	ldi	r21, 0x00	; 0
    1ba0:	0e 94 da 14 	call	0x29b4	; 0x29b4 <itoa>
	LCD_displayString(str);
    1ba4:	ce 01       	movw	r24, r28
    1ba6:	01 96       	adiw	r24, 0x01	; 1
    1ba8:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <LCD_displayString>
}
    1bac:	2d 96       	adiw	r28, 0x0d	; 13
    1bae:	0f b6       	in	r0, 0x3f	; 63
    1bb0:	f8 94       	cli
    1bb2:	de bf       	out	0x3e, r29	; 62
    1bb4:	0f be       	out	0x3f, r0	; 63
    1bb6:	cd bf       	out	0x3d, r28	; 61
    1bb8:	cf 91       	pop	r28
    1bba:	df 91       	pop	r29
    1bbc:	08 95       	ret

00001bbe <LCD_readAdressCounter>:
uint8 LCD_readAdressCounter(void)
{
    1bbe:	df 93       	push	r29
    1bc0:	cf 93       	push	r28
    1bc2:	cd b7       	in	r28, 0x3d	; 61
    1bc4:	de b7       	in	r29, 0x3e	; 62
    1bc6:	ab 97       	sbiw	r28, 0x2b	; 43
    1bc8:	0f b6       	in	r0, 0x3f	; 63
    1bca:	f8 94       	cli
    1bcc:	de bf       	out	0x3e, r29	; 62
    1bce:	0f be       	out	0x3f, r0	; 63
    1bd0:	cd bf       	out	0x3d, r28	; 61
	uint8 data;
	LCD_DATA_PORT_DIR = 0x00;		/*Sets data port pins as input pins*/
    1bd2:	e4 e3       	ldi	r30, 0x34	; 52
    1bd4:	f0 e0       	ldi	r31, 0x00	; 0
    1bd6:	10 82       	st	Z, r1

	SET_BIT(LCD_CTRL_PORT, RS);
    1bd8:	ab e3       	ldi	r26, 0x3B	; 59
    1bda:	b0 e0       	ldi	r27, 0x00	; 0
    1bdc:	eb e3       	ldi	r30, 0x3B	; 59
    1bde:	f0 e0       	ldi	r31, 0x00	; 0
    1be0:	80 81       	ld	r24, Z
    1be2:	84 60       	ori	r24, 0x04	; 4
    1be4:	8c 93       	st	X, r24
	SET_BIT(LCD_CTRL_PORT, RW);		/*Sets RW => read data*/
    1be6:	ab e3       	ldi	r26, 0x3B	; 59
    1be8:	b0 e0       	ldi	r27, 0x00	; 0
    1bea:	eb e3       	ldi	r30, 0x3B	; 59
    1bec:	f0 e0       	ldi	r31, 0x00	; 0
    1bee:	80 81       	ld	r24, Z
    1bf0:	82 60       	ori	r24, 0x02	; 2
    1bf2:	8c 93       	st	X, r24
    1bf4:	80 e0       	ldi	r24, 0x00	; 0
    1bf6:	90 e0       	ldi	r25, 0x00	; 0
    1bf8:	a0 e8       	ldi	r26, 0x80	; 128
    1bfa:	bf e3       	ldi	r27, 0x3F	; 63
    1bfc:	8f a3       	std	Y+39, r24	; 0x27
    1bfe:	98 a7       	std	Y+40, r25	; 0x28
    1c00:	a9 a7       	std	Y+41, r26	; 0x29
    1c02:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c04:	6f a1       	ldd	r22, Y+39	; 0x27
    1c06:	78 a5       	ldd	r23, Y+40	; 0x28
    1c08:	89 a5       	ldd	r24, Y+41	; 0x29
    1c0a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c0c:	20 e0       	ldi	r18, 0x00	; 0
    1c0e:	30 e0       	ldi	r19, 0x00	; 0
    1c10:	4a ef       	ldi	r20, 0xFA	; 250
    1c12:	54 e4       	ldi	r21, 0x44	; 68
    1c14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c18:	dc 01       	movw	r26, r24
    1c1a:	cb 01       	movw	r24, r22
    1c1c:	8b a3       	std	Y+35, r24	; 0x23
    1c1e:	9c a3       	std	Y+36, r25	; 0x24
    1c20:	ad a3       	std	Y+37, r26	; 0x25
    1c22:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1c24:	6b a1       	ldd	r22, Y+35	; 0x23
    1c26:	7c a1       	ldd	r23, Y+36	; 0x24
    1c28:	8d a1       	ldd	r24, Y+37	; 0x25
    1c2a:	9e a1       	ldd	r25, Y+38	; 0x26
    1c2c:	20 e0       	ldi	r18, 0x00	; 0
    1c2e:	30 e0       	ldi	r19, 0x00	; 0
    1c30:	40 e8       	ldi	r20, 0x80	; 128
    1c32:	5f e3       	ldi	r21, 0x3F	; 63
    1c34:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c38:	88 23       	and	r24, r24
    1c3a:	2c f4       	brge	.+10     	; 0x1c46 <LCD_readAdressCounter+0x88>
		__ticks = 1;
    1c3c:	81 e0       	ldi	r24, 0x01	; 1
    1c3e:	90 e0       	ldi	r25, 0x00	; 0
    1c40:	9a a3       	std	Y+34, r25	; 0x22
    1c42:	89 a3       	std	Y+33, r24	; 0x21
    1c44:	3f c0       	rjmp	.+126    	; 0x1cc4 <LCD_readAdressCounter+0x106>
	else if (__tmp > 65535)
    1c46:	6b a1       	ldd	r22, Y+35	; 0x23
    1c48:	7c a1       	ldd	r23, Y+36	; 0x24
    1c4a:	8d a1       	ldd	r24, Y+37	; 0x25
    1c4c:	9e a1       	ldd	r25, Y+38	; 0x26
    1c4e:	20 e0       	ldi	r18, 0x00	; 0
    1c50:	3f ef       	ldi	r19, 0xFF	; 255
    1c52:	4f e7       	ldi	r20, 0x7F	; 127
    1c54:	57 e4       	ldi	r21, 0x47	; 71
    1c56:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c5a:	18 16       	cp	r1, r24
    1c5c:	4c f5       	brge	.+82     	; 0x1cb0 <LCD_readAdressCounter+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c5e:	6f a1       	ldd	r22, Y+39	; 0x27
    1c60:	78 a5       	ldd	r23, Y+40	; 0x28
    1c62:	89 a5       	ldd	r24, Y+41	; 0x29
    1c64:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c66:	20 e0       	ldi	r18, 0x00	; 0
    1c68:	30 e0       	ldi	r19, 0x00	; 0
    1c6a:	40 e2       	ldi	r20, 0x20	; 32
    1c6c:	51 e4       	ldi	r21, 0x41	; 65
    1c6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c72:	dc 01       	movw	r26, r24
    1c74:	cb 01       	movw	r24, r22
    1c76:	bc 01       	movw	r22, r24
    1c78:	cd 01       	movw	r24, r26
    1c7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c7e:	dc 01       	movw	r26, r24
    1c80:	cb 01       	movw	r24, r22
    1c82:	9a a3       	std	Y+34, r25	; 0x22
    1c84:	89 a3       	std	Y+33, r24	; 0x21
    1c86:	0f c0       	rjmp	.+30     	; 0x1ca6 <LCD_readAdressCounter+0xe8>
    1c88:	88 ec       	ldi	r24, 0xC8	; 200
    1c8a:	90 e0       	ldi	r25, 0x00	; 0
    1c8c:	98 a3       	std	Y+32, r25	; 0x20
    1c8e:	8f 8f       	std	Y+31, r24	; 0x1f
    1c90:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c92:	98 a1       	ldd	r25, Y+32	; 0x20
    1c94:	01 97       	sbiw	r24, 0x01	; 1
    1c96:	f1 f7       	brne	.-4      	; 0x1c94 <LCD_readAdressCounter+0xd6>
    1c98:	98 a3       	std	Y+32, r25	; 0x20
    1c9a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c9c:	89 a1       	ldd	r24, Y+33	; 0x21
    1c9e:	9a a1       	ldd	r25, Y+34	; 0x22
    1ca0:	01 97       	sbiw	r24, 0x01	; 1
    1ca2:	9a a3       	std	Y+34, r25	; 0x22
    1ca4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ca6:	89 a1       	ldd	r24, Y+33	; 0x21
    1ca8:	9a a1       	ldd	r25, Y+34	; 0x22
    1caa:	00 97       	sbiw	r24, 0x00	; 0
    1cac:	69 f7       	brne	.-38     	; 0x1c88 <LCD_readAdressCounter+0xca>
    1cae:	14 c0       	rjmp	.+40     	; 0x1cd8 <LCD_readAdressCounter+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cb0:	6b a1       	ldd	r22, Y+35	; 0x23
    1cb2:	7c a1       	ldd	r23, Y+36	; 0x24
    1cb4:	8d a1       	ldd	r24, Y+37	; 0x25
    1cb6:	9e a1       	ldd	r25, Y+38	; 0x26
    1cb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cbc:	dc 01       	movw	r26, r24
    1cbe:	cb 01       	movw	r24, r22
    1cc0:	9a a3       	std	Y+34, r25	; 0x22
    1cc2:	89 a3       	std	Y+33, r24	; 0x21
    1cc4:	89 a1       	ldd	r24, Y+33	; 0x21
    1cc6:	9a a1       	ldd	r25, Y+34	; 0x22
    1cc8:	9e 8f       	std	Y+30, r25	; 0x1e
    1cca:	8d 8f       	std	Y+29, r24	; 0x1d
    1ccc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1cce:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1cd0:	01 97       	sbiw	r24, 0x01	; 1
    1cd2:	f1 f7       	brne	.-4      	; 0x1cd0 <LCD_readAdressCounter+0x112>
    1cd4:	9e 8f       	std	Y+30, r25	; 0x1e
    1cd6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);					/*Delay tas - tr = 50 - 16 = 34ns [should be done in assembly (NOP) to be more precise]*/
	SET_BIT(LCD_CTRL_PORT, E);		/*Sets data Enable bit*/
    1cd8:	ab e3       	ldi	r26, 0x3B	; 59
    1cda:	b0 e0       	ldi	r27, 0x00	; 0
    1cdc:	eb e3       	ldi	r30, 0x3B	; 59
    1cde:	f0 e0       	ldi	r31, 0x00	; 0
    1ce0:	80 81       	ld	r24, Z
    1ce2:	81 60       	ori	r24, 0x01	; 1
    1ce4:	8c 93       	st	X, r24
	/*_delay_ms(1);	*/				/*Delay tddr = 150ns [should be done in assembly (NOP) to be more precise]*/
	asm volatile("nop");
    1ce6:	00 00       	nop
	asm volatile("nop");
    1ce8:	00 00       	nop
	asm volatile("nop");
    1cea:	00 00       	nop
	data = LCD_DATA_PORT_READ;		/*Sends the data*/
    1cec:	e3 e3       	ldi	r30, 0x33	; 51
    1cee:	f0 e0       	ldi	r31, 0x00	; 0
    1cf0:	80 81       	ld	r24, Z
    1cf2:	8b a7       	std	Y+43, r24	; 0x2b
    1cf4:	80 e0       	ldi	r24, 0x00	; 0
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
    1cf8:	a0 e8       	ldi	r26, 0x80	; 128
    1cfa:	bf e3       	ldi	r27, 0x3F	; 63
    1cfc:	89 8f       	std	Y+25, r24	; 0x19
    1cfe:	9a 8f       	std	Y+26, r25	; 0x1a
    1d00:	ab 8f       	std	Y+27, r26	; 0x1b
    1d02:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d04:	69 8d       	ldd	r22, Y+25	; 0x19
    1d06:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d08:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d0a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d0c:	20 e0       	ldi	r18, 0x00	; 0
    1d0e:	30 e0       	ldi	r19, 0x00	; 0
    1d10:	4a ef       	ldi	r20, 0xFA	; 250
    1d12:	54 e4       	ldi	r21, 0x44	; 68
    1d14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d18:	dc 01       	movw	r26, r24
    1d1a:	cb 01       	movw	r24, r22
    1d1c:	8d 8b       	std	Y+21, r24	; 0x15
    1d1e:	9e 8b       	std	Y+22, r25	; 0x16
    1d20:	af 8b       	std	Y+23, r26	; 0x17
    1d22:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d24:	6d 89       	ldd	r22, Y+21	; 0x15
    1d26:	7e 89       	ldd	r23, Y+22	; 0x16
    1d28:	8f 89       	ldd	r24, Y+23	; 0x17
    1d2a:	98 8d       	ldd	r25, Y+24	; 0x18
    1d2c:	20 e0       	ldi	r18, 0x00	; 0
    1d2e:	30 e0       	ldi	r19, 0x00	; 0
    1d30:	40 e8       	ldi	r20, 0x80	; 128
    1d32:	5f e3       	ldi	r21, 0x3F	; 63
    1d34:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d38:	88 23       	and	r24, r24
    1d3a:	2c f4       	brge	.+10     	; 0x1d46 <LCD_readAdressCounter+0x188>
		__ticks = 1;
    1d3c:	81 e0       	ldi	r24, 0x01	; 1
    1d3e:	90 e0       	ldi	r25, 0x00	; 0
    1d40:	9c 8b       	std	Y+20, r25	; 0x14
    1d42:	8b 8b       	std	Y+19, r24	; 0x13
    1d44:	3f c0       	rjmp	.+126    	; 0x1dc4 <LCD_readAdressCounter+0x206>
	else if (__tmp > 65535)
    1d46:	6d 89       	ldd	r22, Y+21	; 0x15
    1d48:	7e 89       	ldd	r23, Y+22	; 0x16
    1d4a:	8f 89       	ldd	r24, Y+23	; 0x17
    1d4c:	98 8d       	ldd	r25, Y+24	; 0x18
    1d4e:	20 e0       	ldi	r18, 0x00	; 0
    1d50:	3f ef       	ldi	r19, 0xFF	; 255
    1d52:	4f e7       	ldi	r20, 0x7F	; 127
    1d54:	57 e4       	ldi	r21, 0x47	; 71
    1d56:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d5a:	18 16       	cp	r1, r24
    1d5c:	4c f5       	brge	.+82     	; 0x1db0 <LCD_readAdressCounter+0x1f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d5e:	69 8d       	ldd	r22, Y+25	; 0x19
    1d60:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d62:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d64:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d66:	20 e0       	ldi	r18, 0x00	; 0
    1d68:	30 e0       	ldi	r19, 0x00	; 0
    1d6a:	40 e2       	ldi	r20, 0x20	; 32
    1d6c:	51 e4       	ldi	r21, 0x41	; 65
    1d6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d72:	dc 01       	movw	r26, r24
    1d74:	cb 01       	movw	r24, r22
    1d76:	bc 01       	movw	r22, r24
    1d78:	cd 01       	movw	r24, r26
    1d7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d7e:	dc 01       	movw	r26, r24
    1d80:	cb 01       	movw	r24, r22
    1d82:	9c 8b       	std	Y+20, r25	; 0x14
    1d84:	8b 8b       	std	Y+19, r24	; 0x13
    1d86:	0f c0       	rjmp	.+30     	; 0x1da6 <LCD_readAdressCounter+0x1e8>
    1d88:	88 ec       	ldi	r24, 0xC8	; 200
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	9a 8b       	std	Y+18, r25	; 0x12
    1d8e:	89 8b       	std	Y+17, r24	; 0x11
    1d90:	89 89       	ldd	r24, Y+17	; 0x11
    1d92:	9a 89       	ldd	r25, Y+18	; 0x12
    1d94:	01 97       	sbiw	r24, 0x01	; 1
    1d96:	f1 f7       	brne	.-4      	; 0x1d94 <LCD_readAdressCounter+0x1d6>
    1d98:	9a 8b       	std	Y+18, r25	; 0x12
    1d9a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d9c:	8b 89       	ldd	r24, Y+19	; 0x13
    1d9e:	9c 89       	ldd	r25, Y+20	; 0x14
    1da0:	01 97       	sbiw	r24, 0x01	; 1
    1da2:	9c 8b       	std	Y+20, r25	; 0x14
    1da4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1da6:	8b 89       	ldd	r24, Y+19	; 0x13
    1da8:	9c 89       	ldd	r25, Y+20	; 0x14
    1daa:	00 97       	sbiw	r24, 0x00	; 0
    1dac:	69 f7       	brne	.-38     	; 0x1d88 <LCD_readAdressCounter+0x1ca>
    1dae:	14 c0       	rjmp	.+40     	; 0x1dd8 <LCD_readAdressCounter+0x21a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1db0:	6d 89       	ldd	r22, Y+21	; 0x15
    1db2:	7e 89       	ldd	r23, Y+22	; 0x16
    1db4:	8f 89       	ldd	r24, Y+23	; 0x17
    1db6:	98 8d       	ldd	r25, Y+24	; 0x18
    1db8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dbc:	dc 01       	movw	r26, r24
    1dbe:	cb 01       	movw	r24, r22
    1dc0:	9c 8b       	std	Y+20, r25	; 0x14
    1dc2:	8b 8b       	std	Y+19, r24	; 0x13
    1dc4:	8b 89       	ldd	r24, Y+19	; 0x13
    1dc6:	9c 89       	ldd	r25, Y+20	; 0x14
    1dc8:	98 8b       	std	Y+16, r25	; 0x10
    1dca:	8f 87       	std	Y+15, r24	; 0x0f
    1dcc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dce:	98 89       	ldd	r25, Y+16	; 0x10
    1dd0:	01 97       	sbiw	r24, 0x01	; 1
    1dd2:	f1 f7       	brne	.-4      	; 0x1dd0 <LCD_readAdressCounter+0x212>
    1dd4:	98 8b       	std	Y+16, r25	; 0x10
    1dd6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);					/*Delay tpw-tddr = 290 - 150 = 140ns [should be done in assembly (NOP) to be more precise]*/
	CLEAR_BIT(LCD_CTRL_PORT, E);	/*Clears data Enable Bit*/
    1dd8:	ab e3       	ldi	r26, 0x3B	; 59
    1dda:	b0 e0       	ldi	r27, 0x00	; 0
    1ddc:	eb e3       	ldi	r30, 0x3B	; 59
    1dde:	f0 e0       	ldi	r31, 0x00	; 0
    1de0:	80 81       	ld	r24, Z
    1de2:	8e 7f       	andi	r24, 0xFE	; 254
    1de4:	8c 93       	st	X, r24
    1de6:	80 e0       	ldi	r24, 0x00	; 0
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	a0 e8       	ldi	r26, 0x80	; 128
    1dec:	bf e3       	ldi	r27, 0x3F	; 63
    1dee:	8b 87       	std	Y+11, r24	; 0x0b
    1df0:	9c 87       	std	Y+12, r25	; 0x0c
    1df2:	ad 87       	std	Y+13, r26	; 0x0d
    1df4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1df6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1df8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dfa:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dfc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dfe:	20 e0       	ldi	r18, 0x00	; 0
    1e00:	30 e0       	ldi	r19, 0x00	; 0
    1e02:	4a ef       	ldi	r20, 0xFA	; 250
    1e04:	54 e4       	ldi	r21, 0x44	; 68
    1e06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e0a:	dc 01       	movw	r26, r24
    1e0c:	cb 01       	movw	r24, r22
    1e0e:	8f 83       	std	Y+7, r24	; 0x07
    1e10:	98 87       	std	Y+8, r25	; 0x08
    1e12:	a9 87       	std	Y+9, r26	; 0x09
    1e14:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e16:	6f 81       	ldd	r22, Y+7	; 0x07
    1e18:	78 85       	ldd	r23, Y+8	; 0x08
    1e1a:	89 85       	ldd	r24, Y+9	; 0x09
    1e1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e1e:	20 e0       	ldi	r18, 0x00	; 0
    1e20:	30 e0       	ldi	r19, 0x00	; 0
    1e22:	40 e8       	ldi	r20, 0x80	; 128
    1e24:	5f e3       	ldi	r21, 0x3F	; 63
    1e26:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e2a:	88 23       	and	r24, r24
    1e2c:	2c f4       	brge	.+10     	; 0x1e38 <LCD_readAdressCounter+0x27a>
		__ticks = 1;
    1e2e:	81 e0       	ldi	r24, 0x01	; 1
    1e30:	90 e0       	ldi	r25, 0x00	; 0
    1e32:	9e 83       	std	Y+6, r25	; 0x06
    1e34:	8d 83       	std	Y+5, r24	; 0x05
    1e36:	3f c0       	rjmp	.+126    	; 0x1eb6 <LCD_readAdressCounter+0x2f8>
	else if (__tmp > 65535)
    1e38:	6f 81       	ldd	r22, Y+7	; 0x07
    1e3a:	78 85       	ldd	r23, Y+8	; 0x08
    1e3c:	89 85       	ldd	r24, Y+9	; 0x09
    1e3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e40:	20 e0       	ldi	r18, 0x00	; 0
    1e42:	3f ef       	ldi	r19, 0xFF	; 255
    1e44:	4f e7       	ldi	r20, 0x7F	; 127
    1e46:	57 e4       	ldi	r21, 0x47	; 71
    1e48:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e4c:	18 16       	cp	r1, r24
    1e4e:	4c f5       	brge	.+82     	; 0x1ea2 <LCD_readAdressCounter+0x2e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e50:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e52:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e54:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e56:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e58:	20 e0       	ldi	r18, 0x00	; 0
    1e5a:	30 e0       	ldi	r19, 0x00	; 0
    1e5c:	40 e2       	ldi	r20, 0x20	; 32
    1e5e:	51 e4       	ldi	r21, 0x41	; 65
    1e60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e64:	dc 01       	movw	r26, r24
    1e66:	cb 01       	movw	r24, r22
    1e68:	bc 01       	movw	r22, r24
    1e6a:	cd 01       	movw	r24, r26
    1e6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e70:	dc 01       	movw	r26, r24
    1e72:	cb 01       	movw	r24, r22
    1e74:	9e 83       	std	Y+6, r25	; 0x06
    1e76:	8d 83       	std	Y+5, r24	; 0x05
    1e78:	0f c0       	rjmp	.+30     	; 0x1e98 <LCD_readAdressCounter+0x2da>
    1e7a:	88 ec       	ldi	r24, 0xC8	; 200
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	9c 83       	std	Y+4, r25	; 0x04
    1e80:	8b 83       	std	Y+3, r24	; 0x03
    1e82:	8b 81       	ldd	r24, Y+3	; 0x03
    1e84:	9c 81       	ldd	r25, Y+4	; 0x04
    1e86:	01 97       	sbiw	r24, 0x01	; 1
    1e88:	f1 f7       	brne	.-4      	; 0x1e86 <LCD_readAdressCounter+0x2c8>
    1e8a:	9c 83       	std	Y+4, r25	; 0x04
    1e8c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e90:	9e 81       	ldd	r25, Y+6	; 0x06
    1e92:	01 97       	sbiw	r24, 0x01	; 1
    1e94:	9e 83       	std	Y+6, r25	; 0x06
    1e96:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e98:	8d 81       	ldd	r24, Y+5	; 0x05
    1e9a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e9c:	00 97       	sbiw	r24, 0x00	; 0
    1e9e:	69 f7       	brne	.-38     	; 0x1e7a <LCD_readAdressCounter+0x2bc>
    1ea0:	14 c0       	rjmp	.+40     	; 0x1eca <LCD_readAdressCounter+0x30c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ea2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ea4:	78 85       	ldd	r23, Y+8	; 0x08
    1ea6:	89 85       	ldd	r24, Y+9	; 0x09
    1ea8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eaa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eae:	dc 01       	movw	r26, r24
    1eb0:	cb 01       	movw	r24, r22
    1eb2:	9e 83       	std	Y+6, r25	; 0x06
    1eb4:	8d 83       	std	Y+5, r24	; 0x05
    1eb6:	8d 81       	ldd	r24, Y+5	; 0x05
    1eb8:	9e 81       	ldd	r25, Y+6	; 0x06
    1eba:	9a 83       	std	Y+2, r25	; 0x02
    1ebc:	89 83       	std	Y+1, r24	; 0x01
    1ebe:	89 81       	ldd	r24, Y+1	; 0x01
    1ec0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ec2:	01 97       	sbiw	r24, 0x01	; 1
    1ec4:	f1 f7       	brne	.-4      	; 0x1ec2 <LCD_readAdressCounter+0x304>
    1ec6:	9a 83       	std	Y+2, r25	; 0x02
    1ec8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);					/*Delay th = 13ns [should be done in assembly (NOP) to be more precise]*/


	LCD_DATA_PORT_DIR = 0xFF; 		/*Sets data port pins as output pins*/
    1eca:	e4 e3       	ldi	r30, 0x34	; 52
    1ecc:	f0 e0       	ldi	r31, 0x00	; 0
    1ece:	8f ef       	ldi	r24, 0xFF	; 255
    1ed0:	80 83       	st	Z, r24
	return (data & (0x7F));
    1ed2:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ed4:	8f 77       	andi	r24, 0x7F	; 127
}
    1ed6:	ab 96       	adiw	r28, 0x2b	; 43
    1ed8:	0f b6       	in	r0, 0x3f	; 63
    1eda:	f8 94       	cli
    1edc:	de bf       	out	0x3e, r29	; 62
    1ede:	0f be       	out	0x3f, r0	; 63
    1ee0:	cd bf       	out	0x3d, r28	; 61
    1ee2:	cf 91       	pop	r28
    1ee4:	df 91       	pop	r29
    1ee6:	08 95       	ret

00001ee8 <LCD_wirteDataInByte>:
void LCD_wirteDataInByte(uint8 data, uint8 byteNum)
{
    1ee8:	df 93       	push	r29
    1eea:	cf 93       	push	r28
    1eec:	00 d0       	rcall	.+0      	; 0x1eee <LCD_wirteDataInByte+0x6>
    1eee:	cd b7       	in	r28, 0x3d	; 61
    1ef0:	de b7       	in	r29, 0x3e	; 62
    1ef2:	89 83       	std	Y+1, r24	; 0x01
    1ef4:	6a 83       	std	Y+2, r22	; 0x02

}
    1ef6:	0f 90       	pop	r0
    1ef8:	0f 90       	pop	r0
    1efa:	cf 91       	pop	r28
    1efc:	df 91       	pop	r29
    1efe:	08 95       	ret

00001f00 <KEYPAD_getKeyPressed>:

/*******************************************************************************
 *                        Functions Definitions
 *******************************************************************************/
uint8 KEYPAD_getKeyPressed(void)
{
    1f00:	df 93       	push	r29
    1f02:	cf 93       	push	r28
    1f04:	00 d0       	rcall	.+0      	; 0x1f06 <KEYPAD_getKeyPressed+0x6>
    1f06:	cd b7       	in	r28, 0x3d	; 61
    1f08:	de b7       	in	r29, 0x3e	; 62
	while(1)		/*Never get out without receiving an input from the user*/
	{
		uint8 row, col;
		for(col = 0; col < N_COL; ++col)
    1f0a:	19 82       	std	Y+1, r1	; 0x01
    1f0c:	49 c0       	rjmp	.+146    	; 0x1fa0 <KEYPAD_getKeyPressed+0xa0>
		{

#if(N_COL == 4)
			/*Set 1 pin to be output and 4 pins to be input the remaining 3 pins are to be inputs
			 * to ensure that they do not output any signal(1|0)*/
			KEYPAD_PORT_DIR = (0b00001000 >> col);
    1f0e:	e7 e3       	ldi	r30, 0x37	; 55
    1f10:	f0 e0       	ldi	r31, 0x00	; 0
    1f12:	89 81       	ldd	r24, Y+1	; 0x01
    1f14:	28 2f       	mov	r18, r24
    1f16:	30 e0       	ldi	r19, 0x00	; 0
    1f18:	88 e0       	ldi	r24, 0x08	; 8
    1f1a:	90 e0       	ldi	r25, 0x00	; 0
    1f1c:	02 2e       	mov	r0, r18
    1f1e:	02 c0       	rjmp	.+4      	; 0x1f24 <KEYPAD_getKeyPressed+0x24>
    1f20:	95 95       	asr	r25
    1f22:	87 95       	ror	r24
    1f24:	0a 94       	dec	r0
    1f26:	e2 f7       	brpl	.-8      	; 0x1f20 <KEYPAD_getKeyPressed+0x20>
    1f28:	80 83       	st	Z, r24
			/*Set the output pin to HIGH and the rest are set as pull ups*/
			KEYPAD_PORT_OUT = ~(KEYPAD_PORT_DIR);
    1f2a:	a8 e3       	ldi	r26, 0x38	; 56
    1f2c:	b0 e0       	ldi	r27, 0x00	; 0
    1f2e:	e7 e3       	ldi	r30, 0x37	; 55
    1f30:	f0 e0       	ldi	r31, 0x00	; 0
    1f32:	80 81       	ld	r24, Z
    1f34:	80 95       	com	r24
    1f36:	8c 93       	st	X, r24
			KEYPAD_PORT_DIR = (KEYPAD_PORT_DIR & 0x80) | ((0b00000100 >> col) & 0x7F);
			/*Set the output pin to HIGH and the rest are set as pull ups*/
			KEYPAD_PORT_OUT = (KEYPAD_PORT_DIR & 0x80) | (~(KEYPAD_PORT_DIR) & 0x7F);
#endif

			for(row = 0; row < N_ROW; ++row)
    1f38:	1a 82       	std	Y+2, r1	; 0x02
    1f3a:	2c c0       	rjmp	.+88     	; 0x1f94 <KEYPAD_getKeyPressed+0x94>
			{
#if(N_COL == 4)
				if(BIT_IS_CLEAR(KEYPAD_PORT_IN, (7-row)))
    1f3c:	e6 e3       	ldi	r30, 0x36	; 54
    1f3e:	f0 e0       	ldi	r31, 0x00	; 0
    1f40:	80 81       	ld	r24, Z
    1f42:	48 2f       	mov	r20, r24
    1f44:	50 e0       	ldi	r21, 0x00	; 0
    1f46:	8a 81       	ldd	r24, Y+2	; 0x02
    1f48:	28 2f       	mov	r18, r24
    1f4a:	30 e0       	ldi	r19, 0x00	; 0
    1f4c:	87 e0       	ldi	r24, 0x07	; 7
    1f4e:	90 e0       	ldi	r25, 0x00	; 0
    1f50:	82 1b       	sub	r24, r18
    1f52:	93 0b       	sbc	r25, r19
    1f54:	9a 01       	movw	r18, r20
    1f56:	02 c0       	rjmp	.+4      	; 0x1f5c <KEYPAD_getKeyPressed+0x5c>
    1f58:	35 95       	asr	r19
    1f5a:	27 95       	ror	r18
    1f5c:	8a 95       	dec	r24
    1f5e:	e2 f7       	brpl	.-8      	; 0x1f58 <KEYPAD_getKeyPressed+0x58>
    1f60:	c9 01       	movw	r24, r18
    1f62:	81 70       	andi	r24, 0x01	; 1
    1f64:	90 70       	andi	r25, 0x00	; 0
    1f66:	00 97       	sbiw	r24, 0x00	; 0
    1f68:	91 f4       	brne	.+36     	; 0x1f8e <KEYPAD_getKeyPressed+0x8e>
#elif(N_COL == 3)
				if(BIT_IS_CLEAR(KEYPAD_PORT_IN, (6-row)))
#endif
				{
					#if(N_COL == 4)
					return KEYPAD_4x4_adjustKeyNumber(row*4 + col + 1);
    1f6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f6c:	88 2f       	mov	r24, r24
    1f6e:	90 e0       	ldi	r25, 0x00	; 0
    1f70:	88 0f       	add	r24, r24
    1f72:	99 1f       	adc	r25, r25
    1f74:	88 0f       	add	r24, r24
    1f76:	99 1f       	adc	r25, r25
    1f78:	98 2f       	mov	r25, r24
    1f7a:	89 81       	ldd	r24, Y+1	; 0x01
    1f7c:	89 0f       	add	r24, r25
    1f7e:	8f 5f       	subi	r24, 0xFF	; 255
    1f80:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <KEYPAD_4x4_adjustKeyNumber>
			}
		}
	}


}
    1f84:	0f 90       	pop	r0
    1f86:	0f 90       	pop	r0
    1f88:	cf 91       	pop	r28
    1f8a:	df 91       	pop	r29
    1f8c:	08 95       	ret
			KEYPAD_PORT_DIR = (KEYPAD_PORT_DIR & 0x80) | ((0b00000100 >> col) & 0x7F);
			/*Set the output pin to HIGH and the rest are set as pull ups*/
			KEYPAD_PORT_OUT = (KEYPAD_PORT_DIR & 0x80) | (~(KEYPAD_PORT_DIR) & 0x7F);
#endif

			for(row = 0; row < N_ROW; ++row)
    1f8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f90:	8f 5f       	subi	r24, 0xFF	; 255
    1f92:	8a 83       	std	Y+2, r24	; 0x02
    1f94:	8a 81       	ldd	r24, Y+2	; 0x02
    1f96:	84 30       	cpi	r24, 0x04	; 4
    1f98:	88 f2       	brcs	.-94     	; 0x1f3c <KEYPAD_getKeyPressed+0x3c>
uint8 KEYPAD_getKeyPressed(void)
{
	while(1)		/*Never get out without receiving an input from the user*/
	{
		uint8 row, col;
		for(col = 0; col < N_COL; ++col)
    1f9a:	89 81       	ldd	r24, Y+1	; 0x01
    1f9c:	8f 5f       	subi	r24, 0xFF	; 255
    1f9e:	89 83       	std	Y+1, r24	; 0x01
    1fa0:	89 81       	ldd	r24, Y+1	; 0x01
    1fa2:	84 30       	cpi	r24, 0x04	; 4
    1fa4:	08 f4       	brcc	.+2      	; 0x1fa8 <KEYPAD_getKeyPressed+0xa8>
    1fa6:	b3 cf       	rjmp	.-154    	; 0x1f0e <KEYPAD_getKeyPressed+0xe>
    1fa8:	b0 cf       	rjmp	.-160    	; 0x1f0a <KEYPAD_getKeyPressed+0xa>

00001faa <KEYPAD_4x4_adjustKeyNumber>:

}

#if (N_COL == 4)
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 keyNumber)
{
    1faa:	df 93       	push	r29
    1fac:	cf 93       	push	r28
    1fae:	00 d0       	rcall	.+0      	; 0x1fb0 <KEYPAD_4x4_adjustKeyNumber+0x6>
    1fb0:	00 d0       	rcall	.+0      	; 0x1fb2 <KEYPAD_4x4_adjustKeyNumber+0x8>
    1fb2:	cd b7       	in	r28, 0x3d	; 61
    1fb4:	de b7       	in	r29, 0x3e	; 62
    1fb6:	89 83       	std	Y+1, r24	; 0x01
	/*For Porteus Keypad Interface*/

	switch(keyNumber)
    1fb8:	89 81       	ldd	r24, Y+1	; 0x01
    1fba:	28 2f       	mov	r18, r24
    1fbc:	30 e0       	ldi	r19, 0x00	; 0
    1fbe:	3c 83       	std	Y+4, r19	; 0x04
    1fc0:	2b 83       	std	Y+3, r18	; 0x03
    1fc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc4:	9c 81       	ldd	r25, Y+4	; 0x04
    1fc6:	88 30       	cpi	r24, 0x08	; 8
    1fc8:	91 05       	cpc	r25, r1
    1fca:	09 f4       	brne	.+2      	; 0x1fce <KEYPAD_4x4_adjustKeyNumber+0x24>
    1fcc:	70 c0       	rjmp	.+224    	; 0x20ae <KEYPAD_4x4_adjustKeyNumber+0x104>
    1fce:	2b 81       	ldd	r18, Y+3	; 0x03
    1fd0:	3c 81       	ldd	r19, Y+4	; 0x04
    1fd2:	29 30       	cpi	r18, 0x09	; 9
    1fd4:	31 05       	cpc	r19, r1
    1fd6:	5c f5       	brge	.+86     	; 0x202e <KEYPAD_4x4_adjustKeyNumber+0x84>
    1fd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fda:	9c 81       	ldd	r25, Y+4	; 0x04
    1fdc:	84 30       	cpi	r24, 0x04	; 4
    1fde:	91 05       	cpc	r25, r1
    1fe0:	09 f4       	brne	.+2      	; 0x1fe4 <KEYPAD_4x4_adjustKeyNumber+0x3a>
    1fe2:	59 c0       	rjmp	.+178    	; 0x2096 <KEYPAD_4x4_adjustKeyNumber+0xec>
    1fe4:	2b 81       	ldd	r18, Y+3	; 0x03
    1fe6:	3c 81       	ldd	r19, Y+4	; 0x04
    1fe8:	25 30       	cpi	r18, 0x05	; 5
    1fea:	31 05       	cpc	r19, r1
    1fec:	9c f4       	brge	.+38     	; 0x2014 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1fee:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ff2:	82 30       	cpi	r24, 0x02	; 2
    1ff4:	91 05       	cpc	r25, r1
    1ff6:	09 f4       	brne	.+2      	; 0x1ffa <KEYPAD_4x4_adjustKeyNumber+0x50>
    1ff8:	48 c0       	rjmp	.+144    	; 0x208a <KEYPAD_4x4_adjustKeyNumber+0xe0>
    1ffa:	2b 81       	ldd	r18, Y+3	; 0x03
    1ffc:	3c 81       	ldd	r19, Y+4	; 0x04
    1ffe:	23 30       	cpi	r18, 0x03	; 3
    2000:	31 05       	cpc	r19, r1
    2002:	0c f0       	brlt	.+2      	; 0x2006 <KEYPAD_4x4_adjustKeyNumber+0x5c>
    2004:	45 c0       	rjmp	.+138    	; 0x2090 <KEYPAD_4x4_adjustKeyNumber+0xe6>
    2006:	8b 81       	ldd	r24, Y+3	; 0x03
    2008:	9c 81       	ldd	r25, Y+4	; 0x04
    200a:	81 30       	cpi	r24, 0x01	; 1
    200c:	91 05       	cpc	r25, r1
    200e:	09 f4       	brne	.+2      	; 0x2012 <KEYPAD_4x4_adjustKeyNumber+0x68>
    2010:	39 c0       	rjmp	.+114    	; 0x2084 <KEYPAD_4x4_adjustKeyNumber+0xda>
    2012:	67 c0       	rjmp	.+206    	; 0x20e2 <KEYPAD_4x4_adjustKeyNumber+0x138>
    2014:	2b 81       	ldd	r18, Y+3	; 0x03
    2016:	3c 81       	ldd	r19, Y+4	; 0x04
    2018:	26 30       	cpi	r18, 0x06	; 6
    201a:	31 05       	cpc	r19, r1
    201c:	09 f4       	brne	.+2      	; 0x2020 <KEYPAD_4x4_adjustKeyNumber+0x76>
    201e:	41 c0       	rjmp	.+130    	; 0x20a2 <KEYPAD_4x4_adjustKeyNumber+0xf8>
    2020:	8b 81       	ldd	r24, Y+3	; 0x03
    2022:	9c 81       	ldd	r25, Y+4	; 0x04
    2024:	87 30       	cpi	r24, 0x07	; 7
    2026:	91 05       	cpc	r25, r1
    2028:	0c f0       	brlt	.+2      	; 0x202c <KEYPAD_4x4_adjustKeyNumber+0x82>
    202a:	3e c0       	rjmp	.+124    	; 0x20a8 <KEYPAD_4x4_adjustKeyNumber+0xfe>
    202c:	37 c0       	rjmp	.+110    	; 0x209c <KEYPAD_4x4_adjustKeyNumber+0xf2>
    202e:	2b 81       	ldd	r18, Y+3	; 0x03
    2030:	3c 81       	ldd	r19, Y+4	; 0x04
    2032:	2c 30       	cpi	r18, 0x0C	; 12
    2034:	31 05       	cpc	r19, r1
    2036:	09 f4       	brne	.+2      	; 0x203a <KEYPAD_4x4_adjustKeyNumber+0x90>
    2038:	46 c0       	rjmp	.+140    	; 0x20c6 <KEYPAD_4x4_adjustKeyNumber+0x11c>
    203a:	8b 81       	ldd	r24, Y+3	; 0x03
    203c:	9c 81       	ldd	r25, Y+4	; 0x04
    203e:	8d 30       	cpi	r24, 0x0D	; 13
    2040:	91 05       	cpc	r25, r1
    2042:	5c f4       	brge	.+22     	; 0x205a <KEYPAD_4x4_adjustKeyNumber+0xb0>
    2044:	2b 81       	ldd	r18, Y+3	; 0x03
    2046:	3c 81       	ldd	r19, Y+4	; 0x04
    2048:	2a 30       	cpi	r18, 0x0A	; 10
    204a:	31 05       	cpc	r19, r1
    204c:	b1 f1       	breq	.+108    	; 0x20ba <KEYPAD_4x4_adjustKeyNumber+0x110>
    204e:	8b 81       	ldd	r24, Y+3	; 0x03
    2050:	9c 81       	ldd	r25, Y+4	; 0x04
    2052:	8b 30       	cpi	r24, 0x0B	; 11
    2054:	91 05       	cpc	r25, r1
    2056:	a4 f5       	brge	.+104    	; 0x20c0 <KEYPAD_4x4_adjustKeyNumber+0x116>
    2058:	2d c0       	rjmp	.+90     	; 0x20b4 <KEYPAD_4x4_adjustKeyNumber+0x10a>
    205a:	2b 81       	ldd	r18, Y+3	; 0x03
    205c:	3c 81       	ldd	r19, Y+4	; 0x04
    205e:	2e 30       	cpi	r18, 0x0E	; 14
    2060:	31 05       	cpc	r19, r1
    2062:	b9 f1       	breq	.+110    	; 0x20d2 <KEYPAD_4x4_adjustKeyNumber+0x128>
    2064:	8b 81       	ldd	r24, Y+3	; 0x03
    2066:	9c 81       	ldd	r25, Y+4	; 0x04
    2068:	8e 30       	cpi	r24, 0x0E	; 14
    206a:	91 05       	cpc	r25, r1
    206c:	7c f1       	brlt	.+94     	; 0x20cc <KEYPAD_4x4_adjustKeyNumber+0x122>
    206e:	2b 81       	ldd	r18, Y+3	; 0x03
    2070:	3c 81       	ldd	r19, Y+4	; 0x04
    2072:	2f 30       	cpi	r18, 0x0F	; 15
    2074:	31 05       	cpc	r19, r1
    2076:	79 f1       	breq	.+94     	; 0x20d6 <KEYPAD_4x4_adjustKeyNumber+0x12c>
    2078:	8b 81       	ldd	r24, Y+3	; 0x03
    207a:	9c 81       	ldd	r25, Y+4	; 0x04
    207c:	80 31       	cpi	r24, 0x10	; 16
    207e:	91 05       	cpc	r25, r1
    2080:	69 f1       	breq	.+90     	; 0x20dc <KEYPAD_4x4_adjustKeyNumber+0x132>
    2082:	2f c0       	rjmp	.+94     	; 0x20e2 <KEYPAD_4x4_adjustKeyNumber+0x138>
	{
		case 1: return 7;
    2084:	97 e0       	ldi	r25, 0x07	; 7
    2086:	9a 83       	std	Y+2, r25	; 0x02
    2088:	2e c0       	rjmp	.+92     	; 0x20e6 <KEYPAD_4x4_adjustKeyNumber+0x13c>
				break;
		case 2: return 8;
    208a:	28 e0       	ldi	r18, 0x08	; 8
    208c:	2a 83       	std	Y+2, r18	; 0x02
    208e:	2b c0       	rjmp	.+86     	; 0x20e6 <KEYPAD_4x4_adjustKeyNumber+0x13c>
				break;
		case 3: return 9;
    2090:	39 e0       	ldi	r19, 0x09	; 9
    2092:	3a 83       	std	Y+2, r19	; 0x02
    2094:	28 c0       	rjmp	.+80     	; 0x20e6 <KEYPAD_4x4_adjustKeyNumber+0x13c>
				break;
		case 4: return '/'; // ASCII Code of /
    2096:	8f e2       	ldi	r24, 0x2F	; 47
    2098:	8a 83       	std	Y+2, r24	; 0x02
    209a:	25 c0       	rjmp	.+74     	; 0x20e6 <KEYPAD_4x4_adjustKeyNumber+0x13c>
				break;
		case 5: return 4;
    209c:	94 e0       	ldi	r25, 0x04	; 4
    209e:	9a 83       	std	Y+2, r25	; 0x02
    20a0:	22 c0       	rjmp	.+68     	; 0x20e6 <KEYPAD_4x4_adjustKeyNumber+0x13c>
				break;
		case 6: return 5;
    20a2:	25 e0       	ldi	r18, 0x05	; 5
    20a4:	2a 83       	std	Y+2, r18	; 0x02
    20a6:	1f c0       	rjmp	.+62     	; 0x20e6 <KEYPAD_4x4_adjustKeyNumber+0x13c>
				break;
		case 7: return 6;
    20a8:	36 e0       	ldi	r19, 0x06	; 6
    20aa:	3a 83       	std	Y+2, r19	; 0x02
    20ac:	1c c0       	rjmp	.+56     	; 0x20e6 <KEYPAD_4x4_adjustKeyNumber+0x13c>
				break;
		case 8: return '*'; /* ASCII Code of '*' */
    20ae:	8a e2       	ldi	r24, 0x2A	; 42
    20b0:	8a 83       	std	Y+2, r24	; 0x02
    20b2:	19 c0       	rjmp	.+50     	; 0x20e6 <KEYPAD_4x4_adjustKeyNumber+0x13c>
				break;
		case 9: return 1;
    20b4:	91 e0       	ldi	r25, 0x01	; 1
    20b6:	9a 83       	std	Y+2, r25	; 0x02
    20b8:	16 c0       	rjmp	.+44     	; 0x20e6 <KEYPAD_4x4_adjustKeyNumber+0x13c>
				break;
		case 10: return 2;
    20ba:	22 e0       	ldi	r18, 0x02	; 2
    20bc:	2a 83       	std	Y+2, r18	; 0x02
    20be:	13 c0       	rjmp	.+38     	; 0x20e6 <KEYPAD_4x4_adjustKeyNumber+0x13c>
				break;
		case 11: return 3;
    20c0:	33 e0       	ldi	r19, 0x03	; 3
    20c2:	3a 83       	std	Y+2, r19	; 0x02
    20c4:	10 c0       	rjmp	.+32     	; 0x20e6 <KEYPAD_4x4_adjustKeyNumber+0x13c>
				break;
		case 12: return '-'; /* ASCII Code of '-' */
    20c6:	8d e2       	ldi	r24, 0x2D	; 45
    20c8:	8a 83       	std	Y+2, r24	; 0x02
    20ca:	0d c0       	rjmp	.+26     	; 0x20e6 <KEYPAD_4x4_adjustKeyNumber+0x13c>
				break;
		case 13: return 13;  /* ASCII of Enter */
    20cc:	9d e0       	ldi	r25, 0x0D	; 13
    20ce:	9a 83       	std	Y+2, r25	; 0x02
    20d0:	0a c0       	rjmp	.+20     	; 0x20e6 <KEYPAD_4x4_adjustKeyNumber+0x13c>
				break;
		case 14: return 0;
    20d2:	1a 82       	std	Y+2, r1	; 0x02
    20d4:	08 c0       	rjmp	.+16     	; 0x20e6 <KEYPAD_4x4_adjustKeyNumber+0x13c>
				break;
		case 15: return '='; /* ASCII Code of '=' */
    20d6:	2d e3       	ldi	r18, 0x3D	; 61
    20d8:	2a 83       	std	Y+2, r18	; 0x02
    20da:	05 c0       	rjmp	.+10     	; 0x20e6 <KEYPAD_4x4_adjustKeyNumber+0x13c>
				break;
		case 16: return '+'; /* ASCII Code of '+' */
    20dc:	3b e2       	ldi	r19, 0x2B	; 43
    20de:	3a 83       	std	Y+2, r19	; 0x02
    20e0:	02 c0       	rjmp	.+4      	; 0x20e6 <KEYPAD_4x4_adjustKeyNumber+0x13c>
				break;
		default: return keyNumber;
    20e2:	89 81       	ldd	r24, Y+1	; 0x01
    20e4:	8a 83       	std	Y+2, r24	; 0x02
    20e6:	8a 81       	ldd	r24, Y+2	; 0x02
	case 15: return '#';
		break;
	case 16: return 'D';
		break;
	}*/
}
    20e8:	0f 90       	pop	r0
    20ea:	0f 90       	pop	r0
    20ec:	0f 90       	pop	r0
    20ee:	0f 90       	pop	r0
    20f0:	cf 91       	pop	r28
    20f2:	df 91       	pop	r29
    20f4:	08 95       	ret

000020f6 <main>:

	/*********************************************************************
		 	 	 	 	 	Start main function
	 ********************************************************************/
int main(void)
{
    20f6:	df 93       	push	r29
    20f8:	cf 93       	push	r28
    20fa:	cd b7       	in	r28, 0x3d	; 61
    20fc:	de b7       	in	r29, 0x3e	; 62
    20fe:	c2 56       	subi	r28, 0x62	; 98
    2100:	d0 40       	sbci	r29, 0x00	; 0
    2102:	0f b6       	in	r0, 0x3f	; 63
    2104:	f8 94       	cli
    2106:	de bf       	out	0x3e, r29	; 62
    2108:	0f be       	out	0x3f, r0	; 63
    210a:	cd bf       	out	0x3d, r28	; 61
	/*********************************************************************
	 	 	 	 	 	 	 Initialize drivers
	 ********************************************************************/


	UART_config uart_config = {TR, BAUD_RATE_9600, EVEN, STOP_BIT_1};
    210c:	ce 01       	movw	r24, r28
    210e:	8c 5a       	subi	r24, 0xAC	; 172
    2110:	9f 4f       	sbci	r25, 0xFF	; 255
    2112:	a0 96       	adiw	r28, 0x20	; 32
    2114:	9f af       	std	Y+63, r25	; 0x3f
    2116:	8e af       	std	Y+62, r24	; 0x3e
    2118:	a0 97       	sbiw	r28, 0x20	; 32
    211a:	2a e8       	ldi	r18, 0x8A	; 138
    211c:	31 e0       	ldi	r19, 0x01	; 1
    211e:	a2 96       	adiw	r28, 0x22	; 34
    2120:	3f af       	std	Y+63, r19	; 0x3f
    2122:	2e af       	std	Y+62, r18	; 0x3e
    2124:	a2 97       	sbiw	r28, 0x22	; 34
    2126:	35 e0       	ldi	r19, 0x05	; 5
    2128:	a3 96       	adiw	r28, 0x23	; 35
    212a:	3f af       	std	Y+63, r19	; 0x3f
    212c:	a3 97       	sbiw	r28, 0x23	; 35
    212e:	a2 96       	adiw	r28, 0x22	; 34
    2130:	ee ad       	ldd	r30, Y+62	; 0x3e
    2132:	ff ad       	ldd	r31, Y+63	; 0x3f
    2134:	a2 97       	sbiw	r28, 0x22	; 34
    2136:	00 80       	ld	r0, Z
    2138:	a2 96       	adiw	r28, 0x22	; 34
    213a:	2e ad       	ldd	r18, Y+62	; 0x3e
    213c:	3f ad       	ldd	r19, Y+63	; 0x3f
    213e:	a2 97       	sbiw	r28, 0x22	; 34
    2140:	2f 5f       	subi	r18, 0xFF	; 255
    2142:	3f 4f       	sbci	r19, 0xFF	; 255
    2144:	a2 96       	adiw	r28, 0x22	; 34
    2146:	3f af       	std	Y+63, r19	; 0x3f
    2148:	2e af       	std	Y+62, r18	; 0x3e
    214a:	a2 97       	sbiw	r28, 0x22	; 34
    214c:	a0 96       	adiw	r28, 0x20	; 32
    214e:	ee ad       	ldd	r30, Y+62	; 0x3e
    2150:	ff ad       	ldd	r31, Y+63	; 0x3f
    2152:	a0 97       	sbiw	r28, 0x20	; 32
    2154:	00 82       	st	Z, r0
    2156:	a0 96       	adiw	r28, 0x20	; 32
    2158:	2e ad       	ldd	r18, Y+62	; 0x3e
    215a:	3f ad       	ldd	r19, Y+63	; 0x3f
    215c:	a0 97       	sbiw	r28, 0x20	; 32
    215e:	2f 5f       	subi	r18, 0xFF	; 255
    2160:	3f 4f       	sbci	r19, 0xFF	; 255
    2162:	a0 96       	adiw	r28, 0x20	; 32
    2164:	3f af       	std	Y+63, r19	; 0x3f
    2166:	2e af       	std	Y+62, r18	; 0x3e
    2168:	a0 97       	sbiw	r28, 0x20	; 32
    216a:	a3 96       	adiw	r28, 0x23	; 35
    216c:	3f ad       	ldd	r19, Y+63	; 0x3f
    216e:	a3 97       	sbiw	r28, 0x23	; 35
    2170:	31 50       	subi	r19, 0x01	; 1
    2172:	a3 96       	adiw	r28, 0x23	; 35
    2174:	3f af       	std	Y+63, r19	; 0x3f
    2176:	a3 97       	sbiw	r28, 0x23	; 35
    2178:	a3 96       	adiw	r28, 0x23	; 35
    217a:	8f ad       	ldd	r24, Y+63	; 0x3f
    217c:	a3 97       	sbiw	r28, 0x23	; 35
    217e:	88 23       	and	r24, r24
    2180:	b1 f6       	brne	.-84     	; 0x212e <main+0x38>
	UART_init(&uart_config);/*Initialize UART*/
    2182:	ce 01       	movw	r24, r28
    2184:	8c 5a       	subi	r24, 0xAC	; 172
    2186:	9f 4f       	sbci	r25, 0xFF	; 255
    2188:	0e 94 a3 05 	call	0xb46	; 0xb46 <UART_init>

	LCD_init();	/*Initialize LCD*/
    218c:	0e 94 1b 09 	call	0x1236	; 0x1236 <LCD_init>


	/*********************************************************************
		 	 	 	 	 	 Initialize Variables
	 ********************************************************************/
	programState = controller_status = passwordLength1 = passwordLength2  = action = 0;
    2190:	1f a6       	std	Y+47, r1	; 0x2f
    2192:	8f a5       	ldd	r24, Y+47	; 0x2f
    2194:	89 ab       	std	Y+49, r24	; 0x31
    2196:	89 a9       	ldd	r24, Y+49	; 0x31
    2198:	8a ab       	std	Y+50, r24	; 0x32
    219a:	fe 01       	movw	r30, r28
    219c:	ed 5a       	subi	r30, 0xAD	; 173
    219e:	ff 4f       	sbci	r31, 0xFF	; 255
    21a0:	8a a9       	ldd	r24, Y+50	; 0x32
    21a2:	80 83       	st	Z, r24
    21a4:	fe 01       	movw	r30, r28
    21a6:	ed 5a       	subi	r30, 0xAD	; 173
    21a8:	ff 4f       	sbci	r31, 0xFF	; 255
    21aa:	80 81       	ld	r24, Z
    21ac:	88 ab       	std	Y+48, r24	; 0x30

	/*********************************************************************
			 	 	 	 	 	Program Start
	 ********************************************************************/
	/*State of a new system*/
	LCD_displayString("Enter New Password: ");
    21ae:	80 e6       	ldi	r24, 0x60	; 96
    21b0:	90 e0       	ldi	r25, 0x00	; 0
    21b2:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <LCD_displayString>
	LCD_sendCommand(LCD_MOVE_CURSOR_TO_SECOND_LINE);
    21b6:	80 ec       	ldi	r24, 0xC0	; 192
    21b8:	0e 94 39 09 	call	0x1272	; 0x1272 <LCD_sendCommand>
	LCD_displayString("[4-16]digits");
    21bc:	85 e7       	ldi	r24, 0x75	; 117
    21be:	90 e0       	ldi	r25, 0x00	; 0
    21c0:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <LCD_displayString>
	programState = 0;
    21c4:	18 aa       	std	Y+48, r1	; 0x30
	/*Move to State 0*/


	while(1)
	{
		if(programState != 6)	/*Because program state 6 does not need a user input*/
    21c6:	88 a9       	ldd	r24, Y+48	; 0x30
    21c8:	86 30       	cpi	r24, 0x06	; 6
    21ca:	19 f0       	breq	.+6      	; 0x21d2 <main+0xdc>
			key = KEYPAD_getKeyPressed();
    21cc:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <KEYPAD_getKeyPressed>
    21d0:	8e a7       	std	Y+46, r24	; 0x2e

		switch(programState)
    21d2:	88 a9       	ldd	r24, Y+48	; 0x30
    21d4:	e8 2f       	mov	r30, r24
    21d6:	f0 e0       	ldi	r31, 0x00	; 0
    21d8:	6e 96       	adiw	r28, 0x1e	; 30
    21da:	ff af       	std	Y+63, r31	; 0x3f
    21dc:	ee af       	std	Y+62, r30	; 0x3e
    21de:	6e 97       	sbiw	r28, 0x1e	; 30
    21e0:	6e 96       	adiw	r28, 0x1e	; 30
    21e2:	2e ad       	ldd	r18, Y+62	; 0x3e
    21e4:	3f ad       	ldd	r19, Y+63	; 0x3f
    21e6:	6e 97       	sbiw	r28, 0x1e	; 30
    21e8:	23 30       	cpi	r18, 0x03	; 3
    21ea:	31 05       	cpc	r19, r1
    21ec:	09 f4       	brne	.+2      	; 0x21f0 <main+0xfa>
    21ee:	b0 c0       	rjmp	.+352    	; 0x2350 <main+0x25a>
    21f0:	6e 96       	adiw	r28, 0x1e	; 30
    21f2:	8e ad       	ldd	r24, Y+62	; 0x3e
    21f4:	9f ad       	ldd	r25, Y+63	; 0x3f
    21f6:	6e 97       	sbiw	r28, 0x1e	; 30
    21f8:	84 30       	cpi	r24, 0x04	; 4
    21fa:	91 05       	cpc	r25, r1
    21fc:	8c f4       	brge	.+34     	; 0x2220 <main+0x12a>
    21fe:	6e 96       	adiw	r28, 0x1e	; 30
    2200:	ee ad       	ldd	r30, Y+62	; 0x3e
    2202:	ff ad       	ldd	r31, Y+63	; 0x3f
    2204:	6e 97       	sbiw	r28, 0x1e	; 30
    2206:	e1 30       	cpi	r30, 0x01	; 1
    2208:	f1 05       	cpc	r31, r1
    220a:	09 f4       	brne	.+2      	; 0x220e <main+0x118>
    220c:	4d c0       	rjmp	.+154    	; 0x22a8 <main+0x1b2>
    220e:	6e 96       	adiw	r28, 0x1e	; 30
    2210:	2e ad       	ldd	r18, Y+62	; 0x3e
    2212:	3f ad       	ldd	r19, Y+63	; 0x3f
    2214:	6e 97       	sbiw	r28, 0x1e	; 30
    2216:	22 30       	cpi	r18, 0x02	; 2
    2218:	31 05       	cpc	r19, r1
    221a:	09 f4       	brne	.+2      	; 0x221e <main+0x128>
    221c:	7d c0       	rjmp	.+250    	; 0x2318 <main+0x222>
    221e:	18 c0       	rjmp	.+48     	; 0x2250 <main+0x15a>
    2220:	6e 96       	adiw	r28, 0x1e	; 30
    2222:	8e ad       	ldd	r24, Y+62	; 0x3e
    2224:	9f ad       	ldd	r25, Y+63	; 0x3f
    2226:	6e 97       	sbiw	r28, 0x1e	; 30
    2228:	85 30       	cpi	r24, 0x05	; 5
    222a:	91 05       	cpc	r25, r1
    222c:	09 f4       	brne	.+2      	; 0x2230 <main+0x13a>
    222e:	53 c1       	rjmp	.+678    	; 0x24d6 <main+0x3e0>
    2230:	6e 96       	adiw	r28, 0x1e	; 30
    2232:	ee ad       	ldd	r30, Y+62	; 0x3e
    2234:	ff ad       	ldd	r31, Y+63	; 0x3f
    2236:	6e 97       	sbiw	r28, 0x1e	; 30
    2238:	e5 30       	cpi	r30, 0x05	; 5
    223a:	f1 05       	cpc	r31, r1
    223c:	0c f4       	brge	.+2      	; 0x2240 <main+0x14a>
    223e:	30 c1       	rjmp	.+608    	; 0x24a0 <main+0x3aa>
    2240:	6e 96       	adiw	r28, 0x1e	; 30
    2242:	2e ad       	ldd	r18, Y+62	; 0x3e
    2244:	3f ad       	ldd	r19, Y+63	; 0x3f
    2246:	6e 97       	sbiw	r28, 0x1e	; 30
    2248:	26 30       	cpi	r18, 0x06	; 6
    224a:	31 05       	cpc	r19, r1
    224c:	09 f4       	brne	.+2      	; 0x2250 <main+0x15a>
    224e:	62 c1       	rjmp	.+708    	; 0x2514 <main+0x41e>
			/*Moves the program to state 1*/
			/*Pre:	The LCD should display in the first line "ENTER NEW PASS"*/
		default:
		case 0:
			{
				if(key != 13)		/*If the user pressed any key but enter*/
    2250:	8e a5       	ldd	r24, Y+46	; 0x2e
    2252:	8d 30       	cpi	r24, 0x0D	; 13
    2254:	09 f4       	brne	.+2      	; 0x2258 <main+0x162>
    2256:	e2 c2       	rjmp	.+1476   	; 0x281c <main+0x726>
				{
					controller_status = passwordLength1 = passwordLength2  = action = 0;
    2258:	1f a6       	std	Y+47, r1	; 0x2f
    225a:	8f a5       	ldd	r24, Y+47	; 0x2f
    225c:	89 ab       	std	Y+49, r24	; 0x31
    225e:	89 a9       	ldd	r24, Y+49	; 0x31
    2260:	8a ab       	std	Y+50, r24	; 0x32
    2262:	fe 01       	movw	r30, r28
    2264:	ed 5a       	subi	r30, 0xAD	; 173
    2266:	ff 4f       	sbci	r31, 0xFF	; 255
    2268:	8a a9       	ldd	r24, Y+50	; 0x32
    226a:	80 83       	st	Z, r24
					LCD_sendCommand(LCD_MOVE_CURSOR_TO_SECOND_LINE);	/*Clear the second line and write a star*/
    226c:	80 ec       	ldi	r24, 0xC0	; 192
    226e:	0e 94 39 09 	call	0x1272	; 0x1272 <LCD_sendCommand>
					LCD_displayString("                                 ");
    2272:	82 e8       	ldi	r24, 0x82	; 130
    2274:	90 e0       	ldi	r25, 0x00	; 0
    2276:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <LCD_displayString>
					LCD_sendCommand(LCD_MOVE_CURSOR_TO_SECOND_LINE);
    227a:	80 ec       	ldi	r24, 0xC0	; 192
    227c:	0e 94 39 09 	call	0x1272	; 0x1272 <LCD_sendCommand>
					LCD_displayOneCharacter('*');
    2280:	8a e2       	ldi	r24, 0x2A	; 42
    2282:	0e 94 35 0b 	call	0x166a	; 0x166a <LCD_displayOneCharacter>
					password1[(passwordLength1++)] = key;
    2286:	8a a9       	ldd	r24, Y+50	; 0x32
    2288:	28 2f       	mov	r18, r24
    228a:	30 e0       	ldi	r19, 0x00	; 0
    228c:	ce 01       	movw	r24, r28
    228e:	c3 96       	adiw	r24, 0x33	; 51
    2290:	fc 01       	movw	r30, r24
    2292:	e2 0f       	add	r30, r18
    2294:	f3 1f       	adc	r31, r19
    2296:	8e a5       	ldd	r24, Y+46	; 0x2e
    2298:	80 83       	st	Z, r24
    229a:	8a a9       	ldd	r24, Y+50	; 0x32
    229c:	8f 5f       	subi	r24, 0xFF	; 255
    229e:	8a ab       	std	Y+50, r24	; 0x32
					programState++;	/*Move to state 1*/
    22a0:	88 a9       	ldd	r24, Y+48	; 0x30
    22a2:	8f 5f       	subi	r24, 0xFF	; 255
    22a4:	88 ab       	std	Y+48, r24	; 0x30
    22a6:	ba c2       	rjmp	.+1396   	; 0x281c <main+0x726>
			/*It assures that the password does not exceed 16 characters*/
			/*Moves the program to state 2*/
			/*Pre:	This state MUST come after state 0"*/
		case 1:
			{
				if(key != 13)		/*If the user pressed any key but enter*/
    22a8:	8e a5       	ldd	r24, Y+46	; 0x2e
    22aa:	8d 30       	cpi	r24, 0x0D	; 13
    22ac:	19 f1       	breq	.+70     	; 0x22f4 <main+0x1fe>
				{
					if(passwordLength1 < 16)			/*passwordLength must not exceed 16 because the array of password is only for 16 characters*/
    22ae:	8a a9       	ldd	r24, Y+50	; 0x32
    22b0:	80 31       	cpi	r24, 0x10	; 16
    22b2:	88 f4       	brcc	.+34     	; 0x22d6 <main+0x1e0>
					{
						LCD_displayOneCharacter('*');	/*Just add a star for each user input*/
    22b4:	8a e2       	ldi	r24, 0x2A	; 42
    22b6:	0e 94 35 0b 	call	0x166a	; 0x166a <LCD_displayOneCharacter>
						password1[(passwordLength1++)] = key;
    22ba:	8a a9       	ldd	r24, Y+50	; 0x32
    22bc:	28 2f       	mov	r18, r24
    22be:	30 e0       	ldi	r19, 0x00	; 0
    22c0:	ce 01       	movw	r24, r28
    22c2:	c3 96       	adiw	r24, 0x33	; 51
    22c4:	fc 01       	movw	r30, r24
    22c6:	e2 0f       	add	r30, r18
    22c8:	f3 1f       	adc	r31, r19
    22ca:	8e a5       	ldd	r24, Y+46	; 0x2e
    22cc:	80 83       	st	Z, r24
    22ce:	8a a9       	ldd	r24, Y+50	; 0x32
    22d0:	8f 5f       	subi	r24, 0xFF	; 255
    22d2:	8a ab       	std	Y+50, r24	; 0x32
    22d4:	a3 c2       	rjmp	.+1350   	; 0x281c <main+0x726>
					}
					else
					{
						LCD_sendCommand(LCD_MOVE_CURSOR_TO_FIRST_LINE);
    22d6:	80 e8       	ldi	r24, 0x80	; 128
    22d8:	0e 94 39 09 	call	0x1272	; 0x1272 <LCD_sendCommand>
						LCD_displayString("                                ");
    22dc:	84 ea       	ldi	r24, 0xA4	; 164
    22de:	90 e0       	ldi	r25, 0x00	; 0
    22e0:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <LCD_displayString>
						LCD_sendCommand(LCD_MOVE_CURSOR_TO_FIRST_LINE);
    22e4:	80 e8       	ldi	r24, 0x80	; 128
    22e6:	0e 94 39 09 	call	0x1272	; 0x1272 <LCD_sendCommand>
						LCD_displayString("Max digits=16 press Enter to con");
    22ea:	85 ec       	ldi	r24, 0xC5	; 197
    22ec:	90 e0       	ldi	r25, 0x00	; 0
    22ee:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <LCD_displayString>
    22f2:	94 c2       	rjmp	.+1320   	; 0x281c <main+0x726>
					}
				}
				else			/*When the user presses Enter*/
				{
					LCD_sendCommand(LCD_MOVE_CURSOR_TO_FIRST_LINE);
    22f4:	80 e8       	ldi	r24, 0x80	; 128
    22f6:	0e 94 39 09 	call	0x1272	; 0x1272 <LCD_sendCommand>
					LCD_displayString("Re-Enter The Password: ");
    22fa:	86 ee       	ldi	r24, 0xE6	; 230
    22fc:	90 e0       	ldi	r25, 0x00	; 0
    22fe:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <LCD_displayString>
					LCD_sendCommand(LCD_MOVE_CURSOR_TO_SECOND_LINE);
    2302:	80 ec       	ldi	r24, 0xC0	; 192
    2304:	0e 94 39 09 	call	0x1272	; 0x1272 <LCD_sendCommand>
					LCD_displayString("                                 ");
    2308:	82 e8       	ldi	r24, 0x82	; 130
    230a:	90 e0       	ldi	r25, 0x00	; 0
    230c:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <LCD_displayString>
					programState++;	/*Move to state 2*/
    2310:	88 a9       	ldd	r24, Y+48	; 0x30
    2312:	8f 5f       	subi	r24, 0xFF	; 255
    2314:	88 ab       	std	Y+48, r24	; 0x30
    2316:	82 c2       	rjmp	.+1284   	; 0x281c <main+0x726>
			/*Moves the program to state 3*/
			/*Pre:	This state MUST come after state 1*/
			/*Pre:	The LCD should display in the first line "Re-Enter password"*/
		case 2:
			{
				if(key != 13)		/*If the user pressed any key but enter*/
    2318:	8e a5       	ldd	r24, Y+46	; 0x2e
    231a:	8d 30       	cpi	r24, 0x0D	; 13
    231c:	09 f4       	brne	.+2      	; 0x2320 <main+0x22a>
    231e:	7e c2       	rjmp	.+1276   	; 0x281c <main+0x726>
				{
					LCD_sendCommand(LCD_MOVE_CURSOR_TO_SECOND_LINE);	/*Clear the second line and write a star*/
    2320:	80 ec       	ldi	r24, 0xC0	; 192
    2322:	0e 94 39 09 	call	0x1272	; 0x1272 <LCD_sendCommand>
					LCD_displayOneCharacter('*');
    2326:	8a e2       	ldi	r24, 0x2A	; 42
    2328:	0e 94 35 0b 	call	0x166a	; 0x166a <LCD_displayOneCharacter>
					password2[(passwordLength2++)] = key;
    232c:	89 a9       	ldd	r24, Y+49	; 0x31
    232e:	28 2f       	mov	r18, r24
    2330:	30 e0       	ldi	r19, 0x00	; 0
    2332:	ce 01       	movw	r24, r28
    2334:	8d 5b       	subi	r24, 0xBD	; 189
    2336:	9f 4f       	sbci	r25, 0xFF	; 255
    2338:	fc 01       	movw	r30, r24
    233a:	e2 0f       	add	r30, r18
    233c:	f3 1f       	adc	r31, r19
    233e:	8e a5       	ldd	r24, Y+46	; 0x2e
    2340:	80 83       	st	Z, r24
    2342:	89 a9       	ldd	r24, Y+49	; 0x31
    2344:	8f 5f       	subi	r24, 0xFF	; 255
    2346:	89 ab       	std	Y+49, r24	; 0x31
					programState++;	/*Move to state 3*/
    2348:	88 a9       	ldd	r24, Y+48	; 0x30
    234a:	8f 5f       	subi	r24, 0xFF	; 255
    234c:	88 ab       	std	Y+48, r24	; 0x30
    234e:	66 c2       	rjmp	.+1228   	; 0x281c <main+0x726>
			/*If the controller status is Success'S' => Move to state 4*/
			/*If the controller status is Fail'F' => Move back to state 0*/
			/*Pre:	This state MUST come after state 2*/
		case 3:
			{
				if(key != 13)		/*If the user pressed any key but enter*/
    2350:	8e a5       	ldd	r24, Y+46	; 0x2e
    2352:	8d 30       	cpi	r24, 0x0D	; 13
    2354:	21 f1       	breq	.+72     	; 0x239e <main+0x2a8>
				{
					if(passwordLength2 < 16)			/*passwordLength must not exceed 16 because the array of password is only for 16 characters*/
    2356:	89 a9       	ldd	r24, Y+49	; 0x31
    2358:	80 31       	cpi	r24, 0x10	; 16
    235a:	90 f4       	brcc	.+36     	; 0x2380 <main+0x28a>
					{
						LCD_displayOneCharacter('*');	/*Just add a star for each user input*/
    235c:	8a e2       	ldi	r24, 0x2A	; 42
    235e:	0e 94 35 0b 	call	0x166a	; 0x166a <LCD_displayOneCharacter>
						password2[(passwordLength2++)] = key;
    2362:	89 a9       	ldd	r24, Y+49	; 0x31
    2364:	28 2f       	mov	r18, r24
    2366:	30 e0       	ldi	r19, 0x00	; 0
    2368:	ce 01       	movw	r24, r28
    236a:	8d 5b       	subi	r24, 0xBD	; 189
    236c:	9f 4f       	sbci	r25, 0xFF	; 255
    236e:	fc 01       	movw	r30, r24
    2370:	e2 0f       	add	r30, r18
    2372:	f3 1f       	adc	r31, r19
    2374:	8e a5       	ldd	r24, Y+46	; 0x2e
    2376:	80 83       	st	Z, r24
    2378:	89 a9       	ldd	r24, Y+49	; 0x31
    237a:	8f 5f       	subi	r24, 0xFF	; 255
    237c:	89 ab       	std	Y+49, r24	; 0x31
    237e:	4e c2       	rjmp	.+1180   	; 0x281c <main+0x726>
					}
					else
					{
						LCD_sendCommand(LCD_MOVE_CURSOR_TO_FIRST_LINE);
    2380:	80 e8       	ldi	r24, 0x80	; 128
    2382:	0e 94 39 09 	call	0x1272	; 0x1272 <LCD_sendCommand>
						LCD_displayString("                                ");
    2386:	84 ea       	ldi	r24, 0xA4	; 164
    2388:	90 e0       	ldi	r25, 0x00	; 0
    238a:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <LCD_displayString>
						LCD_sendCommand(LCD_MOVE_CURSOR_TO_FIRST_LINE);
    238e:	80 e8       	ldi	r24, 0x80	; 128
    2390:	0e 94 39 09 	call	0x1272	; 0x1272 <LCD_sendCommand>
						LCD_displayString("Max digits=16 press Enter to con");
    2394:	85 ec       	ldi	r24, 0xC5	; 197
    2396:	90 e0       	ldi	r25, 0x00	; 0
    2398:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <LCD_displayString>
    239c:	3f c2       	rjmp	.+1150   	; 0x281c <main+0x726>
				{
					/*Send through UART*/


					/*Send first password length*/
					UART_sendByte(passwordLength1+48);	///////////////////////
    239e:	8a a9       	ldd	r24, Y+50	; 0x32
    23a0:	80 5d       	subi	r24, 0xD0	; 208
    23a2:	0e 94 c3 06 	call	0xd86	; 0xd86 <UART_sendByte>
					{
					uint8 dummyVariable; /*To receive ACK to sync communication*/
					UART_receiveByte(&dummyVariable);
    23a6:	ce 01       	movw	r24, r28
    23a8:	87 5a       	subi	r24, 0xA7	; 167
    23aa:	9f 4f       	sbci	r25, 0xFF	; 255
    23ac:	0e 94 da 06 	call	0xdb4	; 0xdb4 <UART_receiveByte>
					}
					/*Send first password Data*/
					for(uint8 i = 0; i < passwordLength1; ++i)
    23b0:	1d a6       	std	Y+45, r1	; 0x2d
    23b2:	0f c0       	rjmp	.+30     	; 0x23d2 <main+0x2dc>
					{
						UART_sendByte(password1[i]+48);	////////////////////////
    23b4:	8d a5       	ldd	r24, Y+45	; 0x2d
    23b6:	28 2f       	mov	r18, r24
    23b8:	30 e0       	ldi	r19, 0x00	; 0
    23ba:	ce 01       	movw	r24, r28
    23bc:	c3 96       	adiw	r24, 0x33	; 51
    23be:	fc 01       	movw	r30, r24
    23c0:	e2 0f       	add	r30, r18
    23c2:	f3 1f       	adc	r31, r19
    23c4:	80 81       	ld	r24, Z
    23c6:	80 5d       	subi	r24, 0xD0	; 208
    23c8:	0e 94 c3 06 	call	0xd86	; 0xd86 <UART_sendByte>
					{
					uint8 dummyVariable; /*To receive ACK to sync communication*/
					UART_receiveByte(&dummyVariable);
					}
					/*Send first password Data*/
					for(uint8 i = 0; i < passwordLength1; ++i)
    23cc:	8d a5       	ldd	r24, Y+45	; 0x2d
    23ce:	8f 5f       	subi	r24, 0xFF	; 255
    23d0:	8d a7       	std	Y+45, r24	; 0x2d
    23d2:	9d a5       	ldd	r25, Y+45	; 0x2d
    23d4:	8a a9       	ldd	r24, Y+50	; 0x32
    23d6:	98 17       	cp	r25, r24
    23d8:	68 f3       	brcs	.-38     	; 0x23b4 <main+0x2be>
					{
						UART_sendByte(password1[i]+48);	////////////////////////
					}
					UART_sendByte('#');	/*TERMINATING CHARACTER*/
    23da:	83 e2       	ldi	r24, 0x23	; 35
    23dc:	0e 94 c3 06 	call	0xd86	; 0xd86 <UART_sendByte>



					/*Send second password length*/
					UART_sendByte(passwordLength2+48);	//////////////////////////
    23e0:	89 a9       	ldd	r24, Y+49	; 0x31
    23e2:	80 5d       	subi	r24, 0xD0	; 208
    23e4:	0e 94 c3 06 	call	0xd86	; 0xd86 <UART_sendByte>
					{
					uint8 dummyVariable; /*To receive ACK to sync communication*/
					UART_receiveByte(&dummyVariable);
    23e8:	ce 01       	movw	r24, r28
    23ea:	86 5a       	subi	r24, 0xA6	; 166
    23ec:	9f 4f       	sbci	r25, 0xFF	; 255
    23ee:	0e 94 da 06 	call	0xdb4	; 0xdb4 <UART_receiveByte>
					}
					/*Send second password Data*/
					for(uint8 i = 0; i < passwordLength1; ++i)
    23f2:	1c a6       	std	Y+44, r1	; 0x2c
    23f4:	10 c0       	rjmp	.+32     	; 0x2416 <main+0x320>
					{
						UART_sendByte(password2[i]+48);	////////////////////
    23f6:	8c a5       	ldd	r24, Y+44	; 0x2c
    23f8:	28 2f       	mov	r18, r24
    23fa:	30 e0       	ldi	r19, 0x00	; 0
    23fc:	ce 01       	movw	r24, r28
    23fe:	8d 5b       	subi	r24, 0xBD	; 189
    2400:	9f 4f       	sbci	r25, 0xFF	; 255
    2402:	fc 01       	movw	r30, r24
    2404:	e2 0f       	add	r30, r18
    2406:	f3 1f       	adc	r31, r19
    2408:	80 81       	ld	r24, Z
    240a:	80 5d       	subi	r24, 0xD0	; 208
    240c:	0e 94 c3 06 	call	0xd86	; 0xd86 <UART_sendByte>
					{
					uint8 dummyVariable; /*To receive ACK to sync communication*/
					UART_receiveByte(&dummyVariable);
					}
					/*Send second password Data*/
					for(uint8 i = 0; i < passwordLength1; ++i)
    2410:	8c a5       	ldd	r24, Y+44	; 0x2c
    2412:	8f 5f       	subi	r24, 0xFF	; 255
    2414:	8c a7       	std	Y+44, r24	; 0x2c
    2416:	9c a5       	ldd	r25, Y+44	; 0x2c
    2418:	8a a9       	ldd	r24, Y+50	; 0x32
    241a:	98 17       	cp	r25, r24
    241c:	60 f3       	brcs	.-40     	; 0x23f6 <main+0x300>
					{
						UART_sendByte(password2[i]+48);	////////////////////
					}
					UART_sendByte('#');	/*TERMINATING CHARACTER*/
    241e:	83 e2       	ldi	r24, 0x23	; 35
    2420:	0e 94 c3 06 	call	0xd86	; 0xd86 <UART_sendByte>



					UART_receiveByte(&controller_status);	/*Receive controller command*/
    2424:	ce 01       	movw	r24, r28
    2426:	8d 5a       	subi	r24, 0xAD	; 173
    2428:	9f 4f       	sbci	r25, 0xFF	; 255
    242a:	0e 94 da 06 	call	0xdb4	; 0xdb4 <UART_receiveByte>


					LCD_sendCommand(LCD_CLEAR_DISPLAY);
    242e:	81 e0       	ldi	r24, 0x01	; 1
    2430:	0e 94 39 09 	call	0x1272	; 0x1272 <LCD_sendCommand>
					LCD_sendCommand(LCD_RETURN_HOME);
    2434:	82 e0       	ldi	r24, 0x02	; 2
    2436:	0e 94 39 09 	call	0x1272	; 0x1272 <LCD_sendCommand>
					if(controller_status == 'S')
    243a:	fe 01       	movw	r30, r28
    243c:	ed 5a       	subi	r30, 0xAD	; 173
    243e:	ff 4f       	sbci	r31, 0xFF	; 255
    2440:	80 81       	ld	r24, Z
    2442:	83 35       	cpi	r24, 0x53	; 83
    2444:	79 f4       	brne	.+30     	; 0x2464 <main+0x36e>
					{
						LCD_displayString("Welcome!");
    2446:	8e ef       	ldi	r24, 0xFE	; 254
    2448:	90 e0       	ldi	r25, 0x00	; 0
    244a:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <LCD_displayString>
						LCD_sendCommand(LCD_MOVE_CURSOR_TO_SECOND_LINE);
    244e:	80 ec       	ldi	r24, 0xC0	; 192
    2450:	0e 94 39 09 	call	0x1272	; 0x1272 <LCD_sendCommand>
						LCD_displayString("+OPEN,-New Pass");
    2454:	87 e0       	ldi	r24, 0x07	; 7
    2456:	91 e0       	ldi	r25, 0x01	; 1
    2458:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <LCD_displayString>
						programState++;/*Move to state 4*/
    245c:	88 a9       	ldd	r24, Y+48	; 0x30
    245e:	8f 5f       	subi	r24, 0xFF	; 255
    2460:	88 ab       	std	Y+48, r24	; 0x30
    2462:	19 c0       	rjmp	.+50     	; 0x2496 <main+0x3a0>
					}
					else if(controller_status == 'F')
    2464:	fe 01       	movw	r30, r28
    2466:	ed 5a       	subi	r30, 0xAD	; 173
    2468:	ff 4f       	sbci	r31, 0xFF	; 255
    246a:	80 81       	ld	r24, Z
    246c:	86 34       	cpi	r24, 0x46	; 70
    246e:	99 f4       	brne	.+38     	; 0x2496 <main+0x3a0>
					{
						LCD_displayString("Wrong inputs!");
    2470:	87 e1       	ldi	r24, 0x17	; 23
    2472:	91 e0       	ldi	r25, 0x01	; 1
    2474:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <LCD_displayString>
						LCD_sendCommand(LCD_MOVE_CURSOR_TO_SECOND_LINE);
    2478:	80 ec       	ldi	r24, 0xC0	; 192
    247a:	0e 94 39 09 	call	0x1272	; 0x1272 <LCD_sendCommand>
						LCD_displayString("                                 ");
    247e:	82 e8       	ldi	r24, 0x82	; 130
    2480:	90 e0       	ldi	r25, 0x00	; 0
    2482:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <LCD_displayString>
						LCD_sendCommand(LCD_MOVE_CURSOR_TO_SECOND_LINE);
    2486:	80 ec       	ldi	r24, 0xC0	; 192
    2488:	0e 94 39 09 	call	0x1272	; 0x1272 <LCD_sendCommand>
						LCD_displayString("Enter new password:");
    248c:	85 e2       	ldi	r24, 0x25	; 37
    248e:	91 e0       	ldi	r25, 0x01	; 1
    2490:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <LCD_displayString>
						programState = 0;/*Move back to state 0*/
    2494:	18 aa       	std	Y+48, r1	; 0x30
					}

					controller_status = 0;/*Clear Controller Status*/
    2496:	fe 01       	movw	r30, r28
    2498:	ed 5a       	subi	r30, 0xAD	; 173
    249a:	ff 4f       	sbci	r31, 0xFF	; 255
    249c:	10 82       	st	Z, r1
    249e:	be c1       	rjmp	.+892    	; 0x281c <main+0x726>
			/*Moves the program to state 5*/
			/*Pre:	LCD should display in the second line "+Open,-New pass"*/
			/*Pre:	This state MUST come after state 3*/
		case 4:
			{
				if(key == '+' || key == '-')
    24a0:	8e a5       	ldd	r24, Y+46	; 0x2e
    24a2:	8b 32       	cpi	r24, 0x2B	; 43
    24a4:	21 f0       	breq	.+8      	; 0x24ae <main+0x3b8>
    24a6:	8e a5       	ldd	r24, Y+46	; 0x2e
    24a8:	8d 32       	cpi	r24, 0x2D	; 45
    24aa:	09 f0       	breq	.+2      	; 0x24ae <main+0x3b8>
    24ac:	b7 c1       	rjmp	.+878    	; 0x281c <main+0x726>
				{
					action = key;
    24ae:	8e a5       	ldd	r24, Y+46	; 0x2e
    24b0:	8f a7       	std	Y+47, r24	; 0x2f
					LCD_sendCommand(LCD_CLEAR_DISPLAY);
    24b2:	81 e0       	ldi	r24, 0x01	; 1
    24b4:	0e 94 39 09 	call	0x1272	; 0x1272 <LCD_sendCommand>
					LCD_sendCommand(LCD_RETURN_HOME);
    24b8:	82 e0       	ldi	r24, 0x02	; 2
    24ba:	0e 94 39 09 	call	0x1272	; 0x1272 <LCD_sendCommand>
					LCD_displayString("Enter password:");
    24be:	89 e3       	ldi	r24, 0x39	; 57
    24c0:	91 e0       	ldi	r25, 0x01	; 1
    24c2:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <LCD_displayString>
					LCD_sendCommand(LCD_MOVE_CURSOR_TO_SECOND_LINE);
    24c6:	80 ec       	ldi	r24, 0xC0	; 192
    24c8:	0e 94 39 09 	call	0x1272	; 0x1272 <LCD_sendCommand>

					passwordLength1 = 0;	/*Clear password1 to save the entered password in it*/
    24cc:	1a aa       	std	Y+50, r1	; 0x32
					programState++; 		/*Move to state 5*/
    24ce:	88 a9       	ldd	r24, Y+48	; 0x30
    24d0:	8f 5f       	subi	r24, 0xFF	; 255
    24d2:	88 ab       	std	Y+48, r24	; 0x30
    24d4:	a3 c1       	rjmp	.+838    	; 0x281c <main+0x726>
			/*Moves the program to state 6*/
			/*Pre:	LCD should display in the first line "Enter password:"*/
			/*Pre:	This state MUST come after state 4*/
		case 5:
			{
				if(key != 13 && passwordLength1 < 16)
    24d6:	8e a5       	ldd	r24, Y+46	; 0x2e
    24d8:	8d 30       	cpi	r24, 0x0D	; 13
    24da:	a1 f0       	breq	.+40     	; 0x2504 <main+0x40e>
    24dc:	8a a9       	ldd	r24, Y+50	; 0x32
    24de:	80 31       	cpi	r24, 0x10	; 16
    24e0:	88 f4       	brcc	.+34     	; 0x2504 <main+0x40e>
				{
					LCD_displayOneCharacter('*');
    24e2:	8a e2       	ldi	r24, 0x2A	; 42
    24e4:	0e 94 35 0b 	call	0x166a	; 0x166a <LCD_displayOneCharacter>
					password1[(passwordLength1++)] = key;	/*Store entered password in password1 string*/
    24e8:	8a a9       	ldd	r24, Y+50	; 0x32
    24ea:	28 2f       	mov	r18, r24
    24ec:	30 e0       	ldi	r19, 0x00	; 0
    24ee:	ce 01       	movw	r24, r28
    24f0:	c3 96       	adiw	r24, 0x33	; 51
    24f2:	fc 01       	movw	r30, r24
    24f4:	e2 0f       	add	r30, r18
    24f6:	f3 1f       	adc	r31, r19
    24f8:	8e a5       	ldd	r24, Y+46	; 0x2e
    24fa:	80 83       	st	Z, r24
    24fc:	8a a9       	ldd	r24, Y+50	; 0x32
    24fe:	8f 5f       	subi	r24, 0xFF	; 255
    2500:	8a ab       	std	Y+50, r24	; 0x32
    2502:	8c c1       	rjmp	.+792    	; 0x281c <main+0x726>
				}
				else
				{
					if(passwordLength1 > 0)
    2504:	8a a9       	ldd	r24, Y+50	; 0x32
    2506:	88 23       	and	r24, r24
    2508:	09 f4       	brne	.+2      	; 0x250c <main+0x416>
    250a:	88 c1       	rjmp	.+784    	; 0x281c <main+0x726>
						programState++; /*Move to state 6*/
    250c:	88 a9       	ldd	r24, Y+48	; 0x30
    250e:	8f 5f       	subi	r24, 0xFF	; 255
    2510:	88 ab       	std	Y+48, r24	; 0x30
    2512:	84 c1       	rjmp	.+776    	; 0x281c <main+0x726>

				/*Send through UART*/


				/*Send first password length*/
				UART_sendByte(passwordLength1+48);	/*Added 48 to be able to debug*/
    2514:	8a a9       	ldd	r24, Y+50	; 0x32
    2516:	80 5d       	subi	r24, 0xD0	; 208
    2518:	0e 94 c3 06 	call	0xd86	; 0xd86 <UART_sendByte>
				{
				uint8 dummyVariable; 				/*To receive ACK to sync communication*/
				UART_receiveByte(&dummyVariable);
    251c:	ce 01       	movw	r24, r28
    251e:	85 5a       	subi	r24, 0xA5	; 165
    2520:	9f 4f       	sbci	r25, 0xFF	; 255
    2522:	0e 94 da 06 	call	0xdb4	; 0xdb4 <UART_receiveByte>
				}
				/*Send first password Data*/
				for(uint8 i = 0; i < passwordLength1; ++i)
    2526:	1b a6       	std	Y+43, r1	; 0x2b
    2528:	0f c0       	rjmp	.+30     	; 0x2548 <main+0x452>
				{
					UART_sendByte(password1[i]+48);	/*Added 48 to be able to debug*/
    252a:	8b a5       	ldd	r24, Y+43	; 0x2b
    252c:	28 2f       	mov	r18, r24
    252e:	30 e0       	ldi	r19, 0x00	; 0
    2530:	ce 01       	movw	r24, r28
    2532:	c3 96       	adiw	r24, 0x33	; 51
    2534:	fc 01       	movw	r30, r24
    2536:	e2 0f       	add	r30, r18
    2538:	f3 1f       	adc	r31, r19
    253a:	80 81       	ld	r24, Z
    253c:	80 5d       	subi	r24, 0xD0	; 208
    253e:	0e 94 c3 06 	call	0xd86	; 0xd86 <UART_sendByte>
				{
				uint8 dummyVariable; 				/*To receive ACK to sync communication*/
				UART_receiveByte(&dummyVariable);
				}
				/*Send first password Data*/
				for(uint8 i = 0; i < passwordLength1; ++i)
    2542:	8b a5       	ldd	r24, Y+43	; 0x2b
    2544:	8f 5f       	subi	r24, 0xFF	; 255
    2546:	8b a7       	std	Y+43, r24	; 0x2b
    2548:	9b a5       	ldd	r25, Y+43	; 0x2b
    254a:	8a a9       	ldd	r24, Y+50	; 0x32
    254c:	98 17       	cp	r25, r24
    254e:	68 f3       	brcs	.-38     	; 0x252a <main+0x434>
				{
					UART_sendByte(password1[i]+48);	/*Added 48 to be able to debug*/
				}
				UART_sendByte('#');	/*TERMINATING CHARACTER*/
    2550:	83 e2       	ldi	r24, 0x23	; 35
    2552:	0e 94 c3 06 	call	0xd86	; 0xd86 <UART_sendByte>

				UART_receiveByte(&controller_status);	/*Receive controller command*/
    2556:	ce 01       	movw	r24, r28
    2558:	8d 5a       	subi	r24, 0xAD	; 173
    255a:	9f 4f       	sbci	r25, 0xFF	; 255
    255c:	0e 94 da 06 	call	0xdb4	; 0xdb4 <UART_receiveByte>

				if(controller_status == 'P') 	/*Right password => Pass*/
    2560:	fe 01       	movw	r30, r28
    2562:	ed 5a       	subi	r30, 0xAD	; 173
    2564:	ff 4f       	sbci	r31, 0xFF	; 255
    2566:	80 81       	ld	r24, Z
    2568:	80 35       	cpi	r24, 0x50	; 80
    256a:	09 f0       	breq	.+2      	; 0x256e <main+0x478>
    256c:	a6 c0       	rjmp	.+332    	; 0x26ba <main+0x5c4>
				{
					if(action == '+')
    256e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2570:	8b 32       	cpi	r24, 0x2B	; 43
    2572:	09 f0       	breq	.+2      	; 0x2576 <main+0x480>
    2574:	8c c0       	rjmp	.+280    	; 0x268e <main+0x598>
					{
						UART_sendByte('+');		/*Send to controller to open door*/
    2576:	8b e2       	ldi	r24, 0x2B	; 43
    2578:	0e 94 c3 06 	call	0xd86	; 0xd86 <UART_sendByte>
						LCD_sendCommand(LCD_CLEAR_DISPLAY);
    257c:	81 e0       	ldi	r24, 0x01	; 1
    257e:	0e 94 39 09 	call	0x1272	; 0x1272 <LCD_sendCommand>
						LCD_sendCommand(LCD_RETURN_HOME);
    2582:	82 e0       	ldi	r24, 0x02	; 2
    2584:	0e 94 39 09 	call	0x1272	; 0x1272 <LCD_sendCommand>
						LCD_displayString("Door Opening");
    2588:	89 e4       	ldi	r24, 0x49	; 73
    258a:	91 e0       	ldi	r25, 0x01	; 1
    258c:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <LCD_displayString>
    2590:	80 e0       	ldi	r24, 0x00	; 0
    2592:	90 e8       	ldi	r25, 0x80	; 128
    2594:	ab eb       	ldi	r26, 0xBB	; 187
    2596:	b5 e4       	ldi	r27, 0x45	; 69
    2598:	8f a3       	std	Y+39, r24	; 0x27
    259a:	98 a7       	std	Y+40, r25	; 0x28
    259c:	a9 a7       	std	Y+41, r26	; 0x29
    259e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25a0:	6f a1       	ldd	r22, Y+39	; 0x27
    25a2:	78 a5       	ldd	r23, Y+40	; 0x28
    25a4:	89 a5       	ldd	r24, Y+41	; 0x29
    25a6:	9a a5       	ldd	r25, Y+42	; 0x2a
    25a8:	20 e0       	ldi	r18, 0x00	; 0
    25aa:	30 e0       	ldi	r19, 0x00	; 0
    25ac:	4a ef       	ldi	r20, 0xFA	; 250
    25ae:	54 e4       	ldi	r21, 0x44	; 68
    25b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25b4:	dc 01       	movw	r26, r24
    25b6:	cb 01       	movw	r24, r22
    25b8:	8b a3       	std	Y+35, r24	; 0x23
    25ba:	9c a3       	std	Y+36, r25	; 0x24
    25bc:	ad a3       	std	Y+37, r26	; 0x25
    25be:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    25c0:	6b a1       	ldd	r22, Y+35	; 0x23
    25c2:	7c a1       	ldd	r23, Y+36	; 0x24
    25c4:	8d a1       	ldd	r24, Y+37	; 0x25
    25c6:	9e a1       	ldd	r25, Y+38	; 0x26
    25c8:	20 e0       	ldi	r18, 0x00	; 0
    25ca:	30 e0       	ldi	r19, 0x00	; 0
    25cc:	40 e8       	ldi	r20, 0x80	; 128
    25ce:	5f e3       	ldi	r21, 0x3F	; 63
    25d0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25d4:	88 23       	and	r24, r24
    25d6:	2c f4       	brge	.+10     	; 0x25e2 <main+0x4ec>
		__ticks = 1;
    25d8:	81 e0       	ldi	r24, 0x01	; 1
    25da:	90 e0       	ldi	r25, 0x00	; 0
    25dc:	9a a3       	std	Y+34, r25	; 0x22
    25de:	89 a3       	std	Y+33, r24	; 0x21
    25e0:	3f c0       	rjmp	.+126    	; 0x2660 <main+0x56a>
	else if (__tmp > 65535)
    25e2:	6b a1       	ldd	r22, Y+35	; 0x23
    25e4:	7c a1       	ldd	r23, Y+36	; 0x24
    25e6:	8d a1       	ldd	r24, Y+37	; 0x25
    25e8:	9e a1       	ldd	r25, Y+38	; 0x26
    25ea:	20 e0       	ldi	r18, 0x00	; 0
    25ec:	3f ef       	ldi	r19, 0xFF	; 255
    25ee:	4f e7       	ldi	r20, 0x7F	; 127
    25f0:	57 e4       	ldi	r21, 0x47	; 71
    25f2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25f6:	18 16       	cp	r1, r24
    25f8:	4c f5       	brge	.+82     	; 0x264c <main+0x556>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25fa:	6f a1       	ldd	r22, Y+39	; 0x27
    25fc:	78 a5       	ldd	r23, Y+40	; 0x28
    25fe:	89 a5       	ldd	r24, Y+41	; 0x29
    2600:	9a a5       	ldd	r25, Y+42	; 0x2a
    2602:	20 e0       	ldi	r18, 0x00	; 0
    2604:	30 e0       	ldi	r19, 0x00	; 0
    2606:	40 e2       	ldi	r20, 0x20	; 32
    2608:	51 e4       	ldi	r21, 0x41	; 65
    260a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    260e:	dc 01       	movw	r26, r24
    2610:	cb 01       	movw	r24, r22
    2612:	bc 01       	movw	r22, r24
    2614:	cd 01       	movw	r24, r26
    2616:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    261a:	dc 01       	movw	r26, r24
    261c:	cb 01       	movw	r24, r22
    261e:	9a a3       	std	Y+34, r25	; 0x22
    2620:	89 a3       	std	Y+33, r24	; 0x21
    2622:	0f c0       	rjmp	.+30     	; 0x2642 <main+0x54c>
    2624:	88 ec       	ldi	r24, 0xC8	; 200
    2626:	90 e0       	ldi	r25, 0x00	; 0
    2628:	98 a3       	std	Y+32, r25	; 0x20
    262a:	8f 8f       	std	Y+31, r24	; 0x1f
    262c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    262e:	98 a1       	ldd	r25, Y+32	; 0x20
    2630:	01 97       	sbiw	r24, 0x01	; 1
    2632:	f1 f7       	brne	.-4      	; 0x2630 <main+0x53a>
    2634:	98 a3       	std	Y+32, r25	; 0x20
    2636:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2638:	89 a1       	ldd	r24, Y+33	; 0x21
    263a:	9a a1       	ldd	r25, Y+34	; 0x22
    263c:	01 97       	sbiw	r24, 0x01	; 1
    263e:	9a a3       	std	Y+34, r25	; 0x22
    2640:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2642:	89 a1       	ldd	r24, Y+33	; 0x21
    2644:	9a a1       	ldd	r25, Y+34	; 0x22
    2646:	00 97       	sbiw	r24, 0x00	; 0
    2648:	69 f7       	brne	.-38     	; 0x2624 <main+0x52e>
    264a:	14 c0       	rjmp	.+40     	; 0x2674 <main+0x57e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    264c:	6b a1       	ldd	r22, Y+35	; 0x23
    264e:	7c a1       	ldd	r23, Y+36	; 0x24
    2650:	8d a1       	ldd	r24, Y+37	; 0x25
    2652:	9e a1       	ldd	r25, Y+38	; 0x26
    2654:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2658:	dc 01       	movw	r26, r24
    265a:	cb 01       	movw	r24, r22
    265c:	9a a3       	std	Y+34, r25	; 0x22
    265e:	89 a3       	std	Y+33, r24	; 0x21
    2660:	89 a1       	ldd	r24, Y+33	; 0x21
    2662:	9a a1       	ldd	r25, Y+34	; 0x22
    2664:	9e 8f       	std	Y+30, r25	; 0x1e
    2666:	8d 8f       	std	Y+29, r24	; 0x1d
    2668:	8d 8d       	ldd	r24, Y+29	; 0x1d
    266a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    266c:	01 97       	sbiw	r24, 0x01	; 1
    266e:	f1 f7       	brne	.-4      	; 0x266c <main+0x576>
    2670:	9e 8f       	std	Y+30, r25	; 0x1e
    2672:	8d 8f       	std	Y+29, r24	; 0x1d
						_delay_ms(6000);
						LCD_sendCommand(LCD_CLEAR_DISPLAY);
    2674:	81 e0       	ldi	r24, 0x01	; 1
    2676:	0e 94 39 09 	call	0x1272	; 0x1272 <LCD_sendCommand>
						LCD_sendCommand(LCD_RETURN_HOME);
    267a:	82 e0       	ldi	r24, 0x02	; 2
    267c:	0e 94 39 09 	call	0x1272	; 0x1272 <LCD_sendCommand>
						LCD_displayString("+OPEN,-New Pass");
    2680:	87 e0       	ldi	r24, 0x07	; 7
    2682:	91 e0       	ldi	r25, 0x01	; 1
    2684:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <LCD_displayString>
						programState = 4;
    2688:	84 e0       	ldi	r24, 0x04	; 4
    268a:	88 ab       	std	Y+48, r24	; 0x30
    268c:	c7 c0       	rjmp	.+398    	; 0x281c <main+0x726>
					}
					else if(action == '-')
    268e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2690:	8d 32       	cpi	r24, 0x2D	; 45
    2692:	09 f0       	breq	.+2      	; 0x2696 <main+0x5a0>
    2694:	c3 c0       	rjmp	.+390    	; 0x281c <main+0x726>
					{
						UART_sendByte('-');		/*Send to controller to change the password*/
    2696:	8d e2       	ldi	r24, 0x2D	; 45
    2698:	0e 94 c3 06 	call	0xd86	; 0xd86 <UART_sendByte>
						LCD_sendCommand(LCD_CLEAR_DISPLAY);
    269c:	81 e0       	ldi	r24, 0x01	; 1
    269e:	0e 94 39 09 	call	0x1272	; 0x1272 <LCD_sendCommand>
						LCD_sendCommand(LCD_RETURN_HOME);
    26a2:	82 e0       	ldi	r24, 0x02	; 2
    26a4:	0e 94 39 09 	call	0x1272	; 0x1272 <LCD_sendCommand>
						LCD_displayString("Enter New Password: ");
    26a8:	80 e6       	ldi	r24, 0x60	; 96
    26aa:	90 e0       	ldi	r25, 0x00	; 0
    26ac:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <LCD_displayString>
						LCD_sendCommand(LCD_MOVE_CURSOR_TO_SECOND_LINE);
    26b0:	80 ec       	ldi	r24, 0xC0	; 192
    26b2:	0e 94 39 09 	call	0x1272	; 0x1272 <LCD_sendCommand>
						programState = 0;
    26b6:	18 aa       	std	Y+48, r1	; 0x30
    26b8:	b1 c0       	rjmp	.+354    	; 0x281c <main+0x726>
					}
				}
				else if(controller_status == 'X')	/*wrong pass => re-enter password*/
    26ba:	fe 01       	movw	r30, r28
    26bc:	ed 5a       	subi	r30, 0xAD	; 173
    26be:	ff 4f       	sbci	r31, 0xFF	; 255
    26c0:	80 81       	ld	r24, Z
    26c2:	88 35       	cpi	r24, 0x58	; 88
    26c4:	89 f4       	brne	.+34     	; 0x26e8 <main+0x5f2>
				{
					LCD_sendCommand(LCD_CLEAR_DISPLAY);
    26c6:	81 e0       	ldi	r24, 0x01	; 1
    26c8:	0e 94 39 09 	call	0x1272	; 0x1272 <LCD_sendCommand>
					LCD_sendCommand(LCD_RETURN_HOME);
    26cc:	82 e0       	ldi	r24, 0x02	; 2
    26ce:	0e 94 39 09 	call	0x1272	; 0x1272 <LCD_sendCommand>
					LCD_displayString("Wrong! re-enter:");
    26d2:	86 e5       	ldi	r24, 0x56	; 86
    26d4:	91 e0       	ldi	r25, 0x01	; 1
    26d6:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <LCD_displayString>
					LCD_sendCommand(LCD_MOVE_CURSOR_TO_SECOND_LINE);
    26da:	80 ec       	ldi	r24, 0xC0	; 192
    26dc:	0e 94 39 09 	call	0x1272	; 0x1272 <LCD_sendCommand>
					passwordLength1 = 0;
    26e0:	1a aa       	std	Y+50, r1	; 0x32
					programState = 5;
    26e2:	85 e0       	ldi	r24, 0x05	; 5
    26e4:	88 ab       	std	Y+48, r24	; 0x30
    26e6:	9a c0       	rjmp	.+308    	; 0x281c <main+0x726>
					//UART_sendByte('#');						/*ACK for communication*/
				}
				else if(controller_status == '!')	/*wrong pass => Alarm ON*/
    26e8:	fe 01       	movw	r30, r28
    26ea:	ed 5a       	subi	r30, 0xAD	; 173
    26ec:	ff 4f       	sbci	r31, 0xFF	; 255
    26ee:	80 81       	ld	r24, Z
    26f0:	81 32       	cpi	r24, 0x21	; 33
    26f2:	09 f0       	breq	.+2      	; 0x26f6 <main+0x600>
    26f4:	93 c0       	rjmp	.+294    	; 0x281c <main+0x726>
				{
					LCD_sendCommand(LCD_CLEAR_DISPLAY);
    26f6:	81 e0       	ldi	r24, 0x01	; 1
    26f8:	0e 94 39 09 	call	0x1272	; 0x1272 <LCD_sendCommand>
					LCD_sendCommand(LCD_RETURN_HOME);
    26fc:	82 e0       	ldi	r24, 0x02	; 2
    26fe:	0e 94 39 09 	call	0x1272	; 0x1272 <LCD_sendCommand>
					LCD_displayString("7aramaaaaay");
    2702:	87 e6       	ldi	r24, 0x67	; 103
    2704:	91 e0       	ldi	r25, 0x01	; 1
    2706:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <LCD_displayString>
					LCD_sendCommand(LCD_MOVE_CURSOR_TO_SECOND_LINE);
    270a:	80 ec       	ldi	r24, 0xC0	; 192
    270c:	0e 94 39 09 	call	0x1272	; 0x1272 <LCD_sendCommand>
					LCD_displayString("Yabnel &^$&!@%");
    2710:	83 e7       	ldi	r24, 0x73	; 115
    2712:	91 e0       	ldi	r25, 0x01	; 1
    2714:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <LCD_displayString>
    2718:	80 e0       	ldi	r24, 0x00	; 0
    271a:	90 e5       	ldi	r25, 0x50	; 80
    271c:	a3 e4       	ldi	r26, 0x43	; 67
    271e:	b7 e4       	ldi	r27, 0x47	; 71
    2720:	89 8f       	std	Y+25, r24	; 0x19
    2722:	9a 8f       	std	Y+26, r25	; 0x1a
    2724:	ab 8f       	std	Y+27, r26	; 0x1b
    2726:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2728:	69 8d       	ldd	r22, Y+25	; 0x19
    272a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    272c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    272e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2730:	20 e0       	ldi	r18, 0x00	; 0
    2732:	30 e0       	ldi	r19, 0x00	; 0
    2734:	4a ef       	ldi	r20, 0xFA	; 250
    2736:	54 e4       	ldi	r21, 0x44	; 68
    2738:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    273c:	dc 01       	movw	r26, r24
    273e:	cb 01       	movw	r24, r22
    2740:	8d 8b       	std	Y+21, r24	; 0x15
    2742:	9e 8b       	std	Y+22, r25	; 0x16
    2744:	af 8b       	std	Y+23, r26	; 0x17
    2746:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2748:	6d 89       	ldd	r22, Y+21	; 0x15
    274a:	7e 89       	ldd	r23, Y+22	; 0x16
    274c:	8f 89       	ldd	r24, Y+23	; 0x17
    274e:	98 8d       	ldd	r25, Y+24	; 0x18
    2750:	20 e0       	ldi	r18, 0x00	; 0
    2752:	30 e0       	ldi	r19, 0x00	; 0
    2754:	40 e8       	ldi	r20, 0x80	; 128
    2756:	5f e3       	ldi	r21, 0x3F	; 63
    2758:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    275c:	88 23       	and	r24, r24
    275e:	2c f4       	brge	.+10     	; 0x276a <main+0x674>
		__ticks = 1;
    2760:	81 e0       	ldi	r24, 0x01	; 1
    2762:	90 e0       	ldi	r25, 0x00	; 0
    2764:	9c 8b       	std	Y+20, r25	; 0x14
    2766:	8b 8b       	std	Y+19, r24	; 0x13
    2768:	3f c0       	rjmp	.+126    	; 0x27e8 <main+0x6f2>
	else if (__tmp > 65535)
    276a:	6d 89       	ldd	r22, Y+21	; 0x15
    276c:	7e 89       	ldd	r23, Y+22	; 0x16
    276e:	8f 89       	ldd	r24, Y+23	; 0x17
    2770:	98 8d       	ldd	r25, Y+24	; 0x18
    2772:	20 e0       	ldi	r18, 0x00	; 0
    2774:	3f ef       	ldi	r19, 0xFF	; 255
    2776:	4f e7       	ldi	r20, 0x7F	; 127
    2778:	57 e4       	ldi	r21, 0x47	; 71
    277a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    277e:	18 16       	cp	r1, r24
    2780:	4c f5       	brge	.+82     	; 0x27d4 <main+0x6de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2782:	69 8d       	ldd	r22, Y+25	; 0x19
    2784:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2786:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2788:	9c 8d       	ldd	r25, Y+28	; 0x1c
    278a:	20 e0       	ldi	r18, 0x00	; 0
    278c:	30 e0       	ldi	r19, 0x00	; 0
    278e:	40 e2       	ldi	r20, 0x20	; 32
    2790:	51 e4       	ldi	r21, 0x41	; 65
    2792:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2796:	dc 01       	movw	r26, r24
    2798:	cb 01       	movw	r24, r22
    279a:	bc 01       	movw	r22, r24
    279c:	cd 01       	movw	r24, r26
    279e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27a2:	dc 01       	movw	r26, r24
    27a4:	cb 01       	movw	r24, r22
    27a6:	9c 8b       	std	Y+20, r25	; 0x14
    27a8:	8b 8b       	std	Y+19, r24	; 0x13
    27aa:	0f c0       	rjmp	.+30     	; 0x27ca <main+0x6d4>
    27ac:	88 ec       	ldi	r24, 0xC8	; 200
    27ae:	90 e0       	ldi	r25, 0x00	; 0
    27b0:	9a 8b       	std	Y+18, r25	; 0x12
    27b2:	89 8b       	std	Y+17, r24	; 0x11
    27b4:	89 89       	ldd	r24, Y+17	; 0x11
    27b6:	9a 89       	ldd	r25, Y+18	; 0x12
    27b8:	01 97       	sbiw	r24, 0x01	; 1
    27ba:	f1 f7       	brne	.-4      	; 0x27b8 <main+0x6c2>
    27bc:	9a 8b       	std	Y+18, r25	; 0x12
    27be:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27c0:	8b 89       	ldd	r24, Y+19	; 0x13
    27c2:	9c 89       	ldd	r25, Y+20	; 0x14
    27c4:	01 97       	sbiw	r24, 0x01	; 1
    27c6:	9c 8b       	std	Y+20, r25	; 0x14
    27c8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27ca:	8b 89       	ldd	r24, Y+19	; 0x13
    27cc:	9c 89       	ldd	r25, Y+20	; 0x14
    27ce:	00 97       	sbiw	r24, 0x00	; 0
    27d0:	69 f7       	brne	.-38     	; 0x27ac <main+0x6b6>
    27d2:	14 c0       	rjmp	.+40     	; 0x27fc <main+0x706>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27d4:	6d 89       	ldd	r22, Y+21	; 0x15
    27d6:	7e 89       	ldd	r23, Y+22	; 0x16
    27d8:	8f 89       	ldd	r24, Y+23	; 0x17
    27da:	98 8d       	ldd	r25, Y+24	; 0x18
    27dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27e0:	dc 01       	movw	r26, r24
    27e2:	cb 01       	movw	r24, r22
    27e4:	9c 8b       	std	Y+20, r25	; 0x14
    27e6:	8b 8b       	std	Y+19, r24	; 0x13
    27e8:	8b 89       	ldd	r24, Y+19	; 0x13
    27ea:	9c 89       	ldd	r25, Y+20	; 0x14
    27ec:	98 8b       	std	Y+16, r25	; 0x10
    27ee:	8f 87       	std	Y+15, r24	; 0x0f
    27f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    27f2:	98 89       	ldd	r25, Y+16	; 0x10
    27f4:	01 97       	sbiw	r24, 0x01	; 1
    27f6:	f1 f7       	brne	.-4      	; 0x27f4 <main+0x6fe>
    27f8:	98 8b       	std	Y+16, r25	; 0x10
    27fa:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(50000);
					LCD_sendCommand(LCD_CLEAR_DISPLAY);
    27fc:	81 e0       	ldi	r24, 0x01	; 1
    27fe:	0e 94 39 09 	call	0x1272	; 0x1272 <LCD_sendCommand>
					LCD_sendCommand(LCD_RETURN_HOME);
    2802:	82 e0       	ldi	r24, 0x02	; 2
    2804:	0e 94 39 09 	call	0x1272	; 0x1272 <LCD_sendCommand>
					LCD_displayString("+OPEN,-New Pass");
    2808:	87 e0       	ldi	r24, 0x07	; 7
    280a:	91 e0       	ldi	r25, 0x01	; 1
    280c:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <LCD_displayString>
					LCD_sendCommand(LCD_MOVE_CURSOR_TO_SECOND_LINE);
    2810:	80 ec       	ldi	r24, 0xC0	; 192
    2812:	0e 94 39 09 	call	0x1272	; 0x1272 <LCD_sendCommand>
					passwordLength1 = 0;
    2816:	1a aa       	std	Y+50, r1	; 0x32
					programState = 4;
    2818:	84 e0       	ldi	r24, 0x04	; 4
    281a:	88 ab       	std	Y+48, r24	; 0x30
    281c:	80 e0       	ldi	r24, 0x00	; 0
    281e:	90 e0       	ldi	r25, 0x00	; 0
    2820:	af ea       	ldi	r26, 0xAF	; 175
    2822:	b3 e4       	ldi	r27, 0x43	; 67
    2824:	8b 87       	std	Y+11, r24	; 0x0b
    2826:	9c 87       	std	Y+12, r25	; 0x0c
    2828:	ad 87       	std	Y+13, r26	; 0x0d
    282a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    282c:	6b 85       	ldd	r22, Y+11	; 0x0b
    282e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2830:	8d 85       	ldd	r24, Y+13	; 0x0d
    2832:	9e 85       	ldd	r25, Y+14	; 0x0e
    2834:	20 e0       	ldi	r18, 0x00	; 0
    2836:	30 e0       	ldi	r19, 0x00	; 0
    2838:	4a ef       	ldi	r20, 0xFA	; 250
    283a:	54 e4       	ldi	r21, 0x44	; 68
    283c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2840:	dc 01       	movw	r26, r24
    2842:	cb 01       	movw	r24, r22
    2844:	8f 83       	std	Y+7, r24	; 0x07
    2846:	98 87       	std	Y+8, r25	; 0x08
    2848:	a9 87       	std	Y+9, r26	; 0x09
    284a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    284c:	6f 81       	ldd	r22, Y+7	; 0x07
    284e:	78 85       	ldd	r23, Y+8	; 0x08
    2850:	89 85       	ldd	r24, Y+9	; 0x09
    2852:	9a 85       	ldd	r25, Y+10	; 0x0a
    2854:	20 e0       	ldi	r18, 0x00	; 0
    2856:	30 e0       	ldi	r19, 0x00	; 0
    2858:	40 e8       	ldi	r20, 0x80	; 128
    285a:	5f e3       	ldi	r21, 0x3F	; 63
    285c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2860:	88 23       	and	r24, r24
    2862:	2c f4       	brge	.+10     	; 0x286e <main+0x778>
		__ticks = 1;
    2864:	81 e0       	ldi	r24, 0x01	; 1
    2866:	90 e0       	ldi	r25, 0x00	; 0
    2868:	9e 83       	std	Y+6, r25	; 0x06
    286a:	8d 83       	std	Y+5, r24	; 0x05
    286c:	3f c0       	rjmp	.+126    	; 0x28ec <main+0x7f6>
	else if (__tmp > 65535)
    286e:	6f 81       	ldd	r22, Y+7	; 0x07
    2870:	78 85       	ldd	r23, Y+8	; 0x08
    2872:	89 85       	ldd	r24, Y+9	; 0x09
    2874:	9a 85       	ldd	r25, Y+10	; 0x0a
    2876:	20 e0       	ldi	r18, 0x00	; 0
    2878:	3f ef       	ldi	r19, 0xFF	; 255
    287a:	4f e7       	ldi	r20, 0x7F	; 127
    287c:	57 e4       	ldi	r21, 0x47	; 71
    287e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2882:	18 16       	cp	r1, r24
    2884:	4c f5       	brge	.+82     	; 0x28d8 <main+0x7e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2886:	6b 85       	ldd	r22, Y+11	; 0x0b
    2888:	7c 85       	ldd	r23, Y+12	; 0x0c
    288a:	8d 85       	ldd	r24, Y+13	; 0x0d
    288c:	9e 85       	ldd	r25, Y+14	; 0x0e
    288e:	20 e0       	ldi	r18, 0x00	; 0
    2890:	30 e0       	ldi	r19, 0x00	; 0
    2892:	40 e2       	ldi	r20, 0x20	; 32
    2894:	51 e4       	ldi	r21, 0x41	; 65
    2896:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    289a:	dc 01       	movw	r26, r24
    289c:	cb 01       	movw	r24, r22
    289e:	bc 01       	movw	r22, r24
    28a0:	cd 01       	movw	r24, r26
    28a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28a6:	dc 01       	movw	r26, r24
    28a8:	cb 01       	movw	r24, r22
    28aa:	9e 83       	std	Y+6, r25	; 0x06
    28ac:	8d 83       	std	Y+5, r24	; 0x05
    28ae:	0f c0       	rjmp	.+30     	; 0x28ce <main+0x7d8>
    28b0:	88 ec       	ldi	r24, 0xC8	; 200
    28b2:	90 e0       	ldi	r25, 0x00	; 0
    28b4:	9c 83       	std	Y+4, r25	; 0x04
    28b6:	8b 83       	std	Y+3, r24	; 0x03
    28b8:	8b 81       	ldd	r24, Y+3	; 0x03
    28ba:	9c 81       	ldd	r25, Y+4	; 0x04
    28bc:	01 97       	sbiw	r24, 0x01	; 1
    28be:	f1 f7       	brne	.-4      	; 0x28bc <main+0x7c6>
    28c0:	9c 83       	std	Y+4, r25	; 0x04
    28c2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28c4:	8d 81       	ldd	r24, Y+5	; 0x05
    28c6:	9e 81       	ldd	r25, Y+6	; 0x06
    28c8:	01 97       	sbiw	r24, 0x01	; 1
    28ca:	9e 83       	std	Y+6, r25	; 0x06
    28cc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28ce:	8d 81       	ldd	r24, Y+5	; 0x05
    28d0:	9e 81       	ldd	r25, Y+6	; 0x06
    28d2:	00 97       	sbiw	r24, 0x00	; 0
    28d4:	69 f7       	brne	.-38     	; 0x28b0 <main+0x7ba>
    28d6:	77 cc       	rjmp	.-1810   	; 0x21c6 <main+0xd0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28d8:	6f 81       	ldd	r22, Y+7	; 0x07
    28da:	78 85       	ldd	r23, Y+8	; 0x08
    28dc:	89 85       	ldd	r24, Y+9	; 0x09
    28de:	9a 85       	ldd	r25, Y+10	; 0x0a
    28e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28e4:	dc 01       	movw	r26, r24
    28e6:	cb 01       	movw	r24, r22
    28e8:	9e 83       	std	Y+6, r25	; 0x06
    28ea:	8d 83       	std	Y+5, r24	; 0x05
    28ec:	8d 81       	ldd	r24, Y+5	; 0x05
    28ee:	9e 81       	ldd	r25, Y+6	; 0x06
    28f0:	9a 83       	std	Y+2, r25	; 0x02
    28f2:	89 83       	std	Y+1, r24	; 0x01
    28f4:	89 81       	ldd	r24, Y+1	; 0x01
    28f6:	9a 81       	ldd	r25, Y+2	; 0x02
    28f8:	01 97       	sbiw	r24, 0x01	; 1
    28fa:	f1 f7       	brne	.-4      	; 0x28f8 <main+0x802>
    28fc:	9a 83       	std	Y+2, r25	; 0x02
    28fe:	89 83       	std	Y+1, r24	; 0x01
    2900:	62 cc       	rjmp	.-1852   	; 0x21c6 <main+0xd0>

00002902 <__udivmodsi4>:
    2902:	a1 e2       	ldi	r26, 0x21	; 33
    2904:	1a 2e       	mov	r1, r26
    2906:	aa 1b       	sub	r26, r26
    2908:	bb 1b       	sub	r27, r27
    290a:	fd 01       	movw	r30, r26
    290c:	0d c0       	rjmp	.+26     	; 0x2928 <__udivmodsi4_ep>

0000290e <__udivmodsi4_loop>:
    290e:	aa 1f       	adc	r26, r26
    2910:	bb 1f       	adc	r27, r27
    2912:	ee 1f       	adc	r30, r30
    2914:	ff 1f       	adc	r31, r31
    2916:	a2 17       	cp	r26, r18
    2918:	b3 07       	cpc	r27, r19
    291a:	e4 07       	cpc	r30, r20
    291c:	f5 07       	cpc	r31, r21
    291e:	20 f0       	brcs	.+8      	; 0x2928 <__udivmodsi4_ep>
    2920:	a2 1b       	sub	r26, r18
    2922:	b3 0b       	sbc	r27, r19
    2924:	e4 0b       	sbc	r30, r20
    2926:	f5 0b       	sbc	r31, r21

00002928 <__udivmodsi4_ep>:
    2928:	66 1f       	adc	r22, r22
    292a:	77 1f       	adc	r23, r23
    292c:	88 1f       	adc	r24, r24
    292e:	99 1f       	adc	r25, r25
    2930:	1a 94       	dec	r1
    2932:	69 f7       	brne	.-38     	; 0x290e <__udivmodsi4_loop>
    2934:	60 95       	com	r22
    2936:	70 95       	com	r23
    2938:	80 95       	com	r24
    293a:	90 95       	com	r25
    293c:	9b 01       	movw	r18, r22
    293e:	ac 01       	movw	r20, r24
    2940:	bd 01       	movw	r22, r26
    2942:	cf 01       	movw	r24, r30
    2944:	08 95       	ret

00002946 <__prologue_saves__>:
    2946:	2f 92       	push	r2
    2948:	3f 92       	push	r3
    294a:	4f 92       	push	r4
    294c:	5f 92       	push	r5
    294e:	6f 92       	push	r6
    2950:	7f 92       	push	r7
    2952:	8f 92       	push	r8
    2954:	9f 92       	push	r9
    2956:	af 92       	push	r10
    2958:	bf 92       	push	r11
    295a:	cf 92       	push	r12
    295c:	df 92       	push	r13
    295e:	ef 92       	push	r14
    2960:	ff 92       	push	r15
    2962:	0f 93       	push	r16
    2964:	1f 93       	push	r17
    2966:	cf 93       	push	r28
    2968:	df 93       	push	r29
    296a:	cd b7       	in	r28, 0x3d	; 61
    296c:	de b7       	in	r29, 0x3e	; 62
    296e:	ca 1b       	sub	r28, r26
    2970:	db 0b       	sbc	r29, r27
    2972:	0f b6       	in	r0, 0x3f	; 63
    2974:	f8 94       	cli
    2976:	de bf       	out	0x3e, r29	; 62
    2978:	0f be       	out	0x3f, r0	; 63
    297a:	cd bf       	out	0x3d, r28	; 61
    297c:	09 94       	ijmp

0000297e <__epilogue_restores__>:
    297e:	2a 88       	ldd	r2, Y+18	; 0x12
    2980:	39 88       	ldd	r3, Y+17	; 0x11
    2982:	48 88       	ldd	r4, Y+16	; 0x10
    2984:	5f 84       	ldd	r5, Y+15	; 0x0f
    2986:	6e 84       	ldd	r6, Y+14	; 0x0e
    2988:	7d 84       	ldd	r7, Y+13	; 0x0d
    298a:	8c 84       	ldd	r8, Y+12	; 0x0c
    298c:	9b 84       	ldd	r9, Y+11	; 0x0b
    298e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2990:	b9 84       	ldd	r11, Y+9	; 0x09
    2992:	c8 84       	ldd	r12, Y+8	; 0x08
    2994:	df 80       	ldd	r13, Y+7	; 0x07
    2996:	ee 80       	ldd	r14, Y+6	; 0x06
    2998:	fd 80       	ldd	r15, Y+5	; 0x05
    299a:	0c 81       	ldd	r16, Y+4	; 0x04
    299c:	1b 81       	ldd	r17, Y+3	; 0x03
    299e:	aa 81       	ldd	r26, Y+2	; 0x02
    29a0:	b9 81       	ldd	r27, Y+1	; 0x01
    29a2:	ce 0f       	add	r28, r30
    29a4:	d1 1d       	adc	r29, r1
    29a6:	0f b6       	in	r0, 0x3f	; 63
    29a8:	f8 94       	cli
    29aa:	de bf       	out	0x3e, r29	; 62
    29ac:	0f be       	out	0x3f, r0	; 63
    29ae:	cd bf       	out	0x3d, r28	; 61
    29b0:	ed 01       	movw	r28, r26
    29b2:	08 95       	ret

000029b4 <itoa>:
    29b4:	fb 01       	movw	r30, r22
    29b6:	9f 01       	movw	r18, r30
    29b8:	e8 94       	clt
    29ba:	42 30       	cpi	r20, 0x02	; 2
    29bc:	c4 f0       	brlt	.+48     	; 0x29ee <itoa+0x3a>
    29be:	45 32       	cpi	r20, 0x25	; 37
    29c0:	b4 f4       	brge	.+44     	; 0x29ee <itoa+0x3a>
    29c2:	4a 30       	cpi	r20, 0x0A	; 10
    29c4:	29 f4       	brne	.+10     	; 0x29d0 <itoa+0x1c>
    29c6:	97 fb       	bst	r25, 7
    29c8:	1e f4       	brtc	.+6      	; 0x29d0 <itoa+0x1c>
    29ca:	90 95       	com	r25
    29cc:	81 95       	neg	r24
    29ce:	9f 4f       	sbci	r25, 0xFF	; 255
    29d0:	64 2f       	mov	r22, r20
    29d2:	77 27       	eor	r23, r23
    29d4:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <__udivmodhi4>
    29d8:	80 5d       	subi	r24, 0xD0	; 208
    29da:	8a 33       	cpi	r24, 0x3A	; 58
    29dc:	0c f0       	brlt	.+2      	; 0x29e0 <itoa+0x2c>
    29de:	89 5d       	subi	r24, 0xD9	; 217
    29e0:	81 93       	st	Z+, r24
    29e2:	cb 01       	movw	r24, r22
    29e4:	00 97       	sbiw	r24, 0x00	; 0
    29e6:	a1 f7       	brne	.-24     	; 0x29d0 <itoa+0x1c>
    29e8:	16 f4       	brtc	.+4      	; 0x29ee <itoa+0x3a>
    29ea:	5d e2       	ldi	r21, 0x2D	; 45
    29ec:	51 93       	st	Z+, r21
    29ee:	10 82       	st	Z, r1
    29f0:	c9 01       	movw	r24, r18
    29f2:	0c 94 fb 14 	jmp	0x29f6	; 0x29f6 <strrev>

000029f6 <strrev>:
    29f6:	dc 01       	movw	r26, r24
    29f8:	fc 01       	movw	r30, r24
    29fa:	67 2f       	mov	r22, r23
    29fc:	71 91       	ld	r23, Z+
    29fe:	77 23       	and	r23, r23
    2a00:	e1 f7       	brne	.-8      	; 0x29fa <strrev+0x4>
    2a02:	32 97       	sbiw	r30, 0x02	; 2
    2a04:	04 c0       	rjmp	.+8      	; 0x2a0e <strrev+0x18>
    2a06:	7c 91       	ld	r23, X
    2a08:	6d 93       	st	X+, r22
    2a0a:	70 83       	st	Z, r23
    2a0c:	62 91       	ld	r22, -Z
    2a0e:	ae 17       	cp	r26, r30
    2a10:	bf 07       	cpc	r27, r31
    2a12:	c8 f3       	brcs	.-14     	; 0x2a06 <strrev+0x10>
    2a14:	08 95       	ret

00002a16 <__udivmodhi4>:
    2a16:	aa 1b       	sub	r26, r26
    2a18:	bb 1b       	sub	r27, r27
    2a1a:	51 e1       	ldi	r21, 0x11	; 17
    2a1c:	07 c0       	rjmp	.+14     	; 0x2a2c <__udivmodhi4_ep>

00002a1e <__udivmodhi4_loop>:
    2a1e:	aa 1f       	adc	r26, r26
    2a20:	bb 1f       	adc	r27, r27
    2a22:	a6 17       	cp	r26, r22
    2a24:	b7 07       	cpc	r27, r23
    2a26:	10 f0       	brcs	.+4      	; 0x2a2c <__udivmodhi4_ep>
    2a28:	a6 1b       	sub	r26, r22
    2a2a:	b7 0b       	sbc	r27, r23

00002a2c <__udivmodhi4_ep>:
    2a2c:	88 1f       	adc	r24, r24
    2a2e:	99 1f       	adc	r25, r25
    2a30:	5a 95       	dec	r21
    2a32:	a9 f7       	brne	.-22     	; 0x2a1e <__udivmodhi4_loop>
    2a34:	80 95       	com	r24
    2a36:	90 95       	com	r25
    2a38:	bc 01       	movw	r22, r24
    2a3a:	cd 01       	movw	r24, r26
    2a3c:	08 95       	ret

00002a3e <_exit>:
    2a3e:	f8 94       	cli

00002a40 <__stop_program>:
    2a40:	ff cf       	rjmp	.-2      	; 0x2a40 <__stop_program>
